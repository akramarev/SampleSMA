<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Abt.Controls.SciChart.Wpf</name>
    </assembly>
    <members>
        <member name="M:Abt.Controls.SciChart.BandSeriesInfoToYValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.BandSeriesInfoToYValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Abt.Controls.SciChart.Common.Databinding.CategoryIndexToDataValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Abt.Controls.SciChart.Common.Databinding.CategoryIndexToDataValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Abt.Controls.SciChart.DataTemplateToObjectConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DataTemplateToObjectConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Abt.Controls.SciChart.DoubleToThicknessConverter">
            <summary>
            Converts a double value to a <see cref="T:System.Windows.Thickness"/> with equal value all round
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleToThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleToThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Abt.Controls.SciChart.ShowVisibilityCheckboxesConverter">
            <summary>
            Workaround converter to allow for cross-platform Ancestor binding to SciChartLegend in SL and WPF
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ShowVisibilityCheckboxesConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.ShowVisibilityCheckboxesConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Abt.Controls.SciChart.DataTemplateSelector">
            <summary>
            Provides the base functionality for template selectors
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            When overidden in derived classes, contains the logic for choosing a proper DataTemplate
            </summary>
            <param name="item"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DataTemplateSelector.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.
            </summary>
            <param name="oldContent">The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
            <param name="newContent">The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
        </member>
        <member name="P:Abt.Controls.SciChart.DataTemplateSelector.DefaultTemplate">
            <summary>
            Gets or sets the template which is used as default
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.FrameworkVisibility">
            <summary>
            Enumeration constants to define FrameworkVisibility
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FrameworkVisibility.All">
            <summary>
            Show this element in all frameworks
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FrameworkVisibility.Wpf">
            <summary>
            Show this element in WPF only
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FrameworkVisibility.Silverlight">
            <summary>
            Show this element in Silverlight only
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.FrameworkVisibilityManager">
            <summary>
            Used to show or hide UIElements based on framework (WPF, Silverlight)
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FrameworkVisibilityManager.VisibleInProperty">
            <summary>
            Defines the VisibleIn DependencyProperty, used to set which frameworks (WPF, Silverlight, All) an element is visible in
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.FrameworkVisibilityManager.SetVisibleIn(System.Windows.DependencyObject,Abt.Controls.SciChart.FrameworkVisibility)">
            <summary>
            Sets the VisibleIn DependencyProperty, used to set which frameworks (WPF, Silverlight, All) an element is visible in
            </summary>
            <param name="element">The element.</param>
            <param name="visibleIn">The <see cref="T:Abt.Controls.SciChart.FrameworkVisibility"/> enum</param>
        </member>
        <member name="M:Abt.Controls.SciChart.FrameworkVisibilityManager.GetVisibleIn(System.Windows.DependencyObject)">
            <summary>
            Gets the VisibleIn DependencyProperty, used to set which frameworks (WPF, Silverlight, All) an element is visible in
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:Abt.Controls.SciChart.IComparableToObjectConverter">
            <summary>
            ValueConverter to assist in marshalling <see cref="T:System.IComparable"/> types to object. Necessary because the XAML binding engine does not cope well with <see cref="T:System.IComparable"/> values
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IComparableToObjectConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IComparableToObjectConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Abt.Controls.SciChart.InvertBooleanConverter">
            <summary>
            Value converter which inverts a boolean
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.InvertBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.InvertBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:Abt.Controls.SciChart.Common.Databinding.StringToDoubleRangeTypeConverter">
            <summary>
            TypeConverter to allow conversion of a string value to <see cref="T:Abt.Controls.SciChart.DoubleRange"/>. Used to allow succinct Markup syntax e.g. 
            
            &lt;NumericAxis VisibleRange="10, 20"/&gt;
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Common.Databinding.StringToDoubleRangeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Common.Databinding.StringToDoubleRangeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the intended conversion type of the converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>
            The converted value.
            </returns>
            <exception cref="T:System.FormatException">Unable to convert the string {0} into a DoubleRange. Please use the format '1.234,5.678'</exception>
        </member>
        <member name="T:Abt.Controls.SciChart.StringToLabelValueConverter">
            <summary>
            TypeConverter to assist in transforming strings to <see cref="T:Abt.Controls.SciChart.LineAnnotation"/> Labels
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.StringToLabelValueConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.StringToLabelValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the intended conversion type of the converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="T:Abt.Controls.SciChart.SeriesInfoTemplateSelector">
            <summary>
            Provides class for choosing proper DataTemplate according to a <see cref="T:System.Type"/> of <see cref="T:Abt.Controls.SciChart.SeriesInfo"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SeriesInfoTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            When overidden in derived classes, contains the logic for choosing a proper DataTemplate
            </summary>
            <param name="item"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="P:Abt.Controls.SciChart.SeriesInfoTemplateSelector.OhlcSeriesTemplate">
            <summary>
            Gets or sets the DataTemplate for <see cref="T:Abt.Controls.SciChart.OhlcSeriesInfo"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SeriesInfoTemplateSelector.BandSeries2Template">
            <summary>
            Gets or sets the DataTemplate for the second series of the <see cref="T:Abt.Controls.SciChart.BandSeriesInfo"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SeriesInfoTemplateSelector.BandSeries1Template">
            <summary>
            Gets or sets the DataTemplate for the first series of the <see cref="T:Abt.Controls.SciChart.BandSeriesInfo"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.PropertyChangedEventArgsWithValues">
            <summary>
             Provides data for the System.ComponentModel.INotifyPropertyChanged.PropertyChanged event.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.PropertyChangedEventArgsWithValues.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the PropertyChangedEventArgsWithValues class
            </summary>
            <param name="propertyName"> The name of the property that changed.</param>
            <param name="oldValue"> Old value of the property that changed. </param>
            <param name="newValue"> New value of the property that changed. </param>
        </member>
        <member name="P:Abt.Controls.SciChart.PropertyChangedEventArgsWithValues.OldValue">
            <summary>
            Gets an old value of property that changed
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.PropertyChangedEventArgsWithValues.NewValue">
            <summary>
            Gets a new value of property that changed
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.UnsortedXyDataSeries`2">
            <summary>
            A DataSeries to store Xy data-points, unsorted containing X and Y values. 
            If your data is sorted in the X-direction, for extra performance use the <see cref="T:Abt.Controls.SciChart.XyDataSeries`2"/>
            May be used as a DataSource for <see cref="T:Abt.Controls.SciChart.FastLineRenderableSeries"/> as well as standard XY renderable series types
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.XyDataSeries`2">
            <summary>
            A DataSeries to store Xy data-points, containing X and Y values which must be sorted in the X-direction. 
            If your data is not sorted in the X-direction, please use the <see cref="T:Abt.Controls.SciChart.UnsortedXyDataSeries`2"/>
            May be used as a DataSource for <see cref="T:Abt.Controls.SciChart.FastLineRenderableSeries"/> as well as standard XY renderable series types
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.DataSeries`2">
            <summary>
            Defines a generic DataSeries within a <see cref="T:Abt.Controls.SciChart.DataSeriesSet`2"/>, which contains 1..N columns, 
            such as X,Y in the case of plain X,Y data, or X, Open, High, Low, Close in the case of OHLC data.
            </summary>
            <typeparam name="TX">The type of the X-Data.</typeparam>
            <typeparam name="TY">The type of the Y-Data.</typeparam>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.IDataSeries`2">
            <summary>
            Defines the Generic interface to a DataSeries within a <see cref="T:Abt.Controls.SciChart.DataSeriesSet`2"/>
            </summary>
            <typeparam name="TX">The type of the X-Data.</typeparam>
            <typeparam name="TY">The type of the Y-Data.</typeparam>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.IDataSeries">
            <summary>
            Defines the base interface to a DataSeries within a <see cref="T:Abt.Controls.SciChart.DataSeriesSet`2"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeries.GetIndicesRange(Abt.Controls.SciChart.IRange)">
            <summary>
            Gets the integer indices of the XValues array that are currently in the VisibleRange passed in. 
            </summary>
            <example>If the input X-data is 0...99 in steps of 1, the VisibleRange is 10, 30 then the Indices Range will be 10, 30</example>
            <param name="visibleRange">The VisibleRange to get the indices range</param>
            <returns>The indices to the X-Data that are currently in range</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeries.ToPointSeries(Abt.Controls.SciChart.Numerics.ResamplingMode,Abt.Controls.SciChart.IndexRange,System.Int32,System.Boolean)">
            <summary>
            Converts the default <see cref="P:Abt.Controls.SciChart.IDataSeries.YValues"/> to an <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which is used to render XY series
            </summary>
            <param name="resamplingMode">The desired <see cref="T:Abt.Controls.SciChart.Numerics.ResamplingMode"/></param>
            <param name="pointRange">The integer Indices range in the parent data-set</param>
            <param name="viewportWidth">The current width of the viewport</param>
            <param name="useXIndices">If true, uses the indices to form the resampled X-values, else uses the X-Values themselves</param>
            <returns>A <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which is used to render XY series</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeries.ToPointSeries(System.Collections.IList,Abt.Controls.SciChart.Numerics.ResamplingMode,Abt.Controls.SciChart.IndexRange,System.Int32,System.Boolean)">
            <summary>
            OBSOLETE: ToPointSeries overload has been deprecated, use ToPointSeries instead, and cast to correct type of point series
            </summary>
            <param name="column"></param>
            <param name="resamplingMode"></param>
            <param name="pointRange"></param>
            <param name="viewportWidth"></param>
            <param name="useXIndices"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeries.GetWindowedYRange(Abt.Controls.SciChart.IRange)">
            <summary>
            Gets the YRange of the data (min, max of the series) in the input visible range point range, where the input range is the <see cref="P:Abt.Controls.SciChart.IAxis.VisibleRange"/>
            </summary>
            <param name="xRange">The X-Axis Range currently in view</param>
            <returns>The YRange of the data in this window</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeries.GetWindowedYRange(Abt.Controls.SciChart.IndexRange)">
            <summary>
            Gets the YRange of the data (min, max of the series) in the input IndexRange, where indices are point-indices on the DataSeries columns
            </summary>
            <param name="xIndexRange">The X-Axis Indices currently in view</param>
            <returns>The YRange of the data in this window</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeries.FindIndex(System.IComparable,Abt.Controls.SciChart.Extensions.SearchMode)">
            <summary>
            Finds the index to the DataSeries at the specified X-Value
            </summary>
            <param name="x">The X-value to search for</param>
            <param name="searchMode">The <see cref="T:Abt.Controls.SciChart.Extensions.SearchMode"/> options to use. Default is exact, where -1 is returned if the index is not found</param>
            <returns>The index of the found value</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeries.ToHitTestInfo(System.Int32)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct containing data about the data-point at the specified index
            </summary>
            <param name="index">The index to the DataSeries</param>
            <returns>The HitTestInfo</returns>
        </member>
        <member name="E:Abt.Controls.SciChart.IDataSeries.DataSeriesChanged">
            <summary>
            Event raised whenever points are added to, removed or one or more DataSeries properties changes
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries.DataSet">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.IDataSeriesSet"/> that this DataSeries belongs to
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries.DataSeriesType">
            <summary>
            Gets the <see cref="P:Abt.Controls.SciChart.IDataSeries.DataSeriesType"/> for this DataSeries
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries.XValues">
            <summary>
            Gets the XValues of this dataseries
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries.YValues">
            <summary>
            Gets the YValues of this dataseries        
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries.SeriesName">
            <summary>
            Gets or sets the name of this series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries.YMin">
            <summary>
            Gets the computed Minimum value in Y for this series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries.YMax">
            <summary>
            Gets the computed Maximum value in Y for this series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries.XMin">
            <summary>
            Gets the computed Minimum value in X for this series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries.XMax">
            <summary>
            Gets the computed Maximum value in X for this series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries.IsFifo">
            <summary>
            Gets whether the dataseries behaves as a FIFO. 
            If True, when the FifoCapacity is reached, old points will be
            discarded in favour of new points, resulting in a scrolling chart
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries.FifoCapacity">
            <summary>
            Gets or sets the size of the FIFO buffer. 
            If null, then the dataseries is unlimited. 
            If a value is set, when the point count reaches this value, older points will be discarded
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries.HasValues">
            <summary>
            Gets whether the DataSeries has values (is not empty)
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries.Count">
            <summary>
            Gets the number of points in this dataseries
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries.IsSorted">
            <summary>
            Gets whether this DataSeries contains Sorted data in the X-direction. 
            Note: Sorted data will result in far faster indexing operations. If at all possible, try to keep your data sorted in the X-direction
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries.SyncRoot">
            <summary>
            Gets a synchronization object used to lock this data-series. Also locked on append, update, remove or clear
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeries`2.Append(`0,`1[])">
            <summary>
            Appends an X, Y point to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of y differ</exception>
            <param name="x">The X Value</param>
            <param name="yValues">The Y Values (depends on series type)</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}[])">
            <summary>
            Appends a list of X, Y points to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of x and each y differ</exception>
            <param name="x">The list of X points</param>
            <param name="yValues">Lists of Y points (depends on series type)</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeries`2.Remove(`0)">
            <summary>
            Removes a point with the specified X Value
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeries`2.RemoveAt(System.Int32)">
            <summary>
            Removes a point at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeries`2.Clear">
            <summary>
            Clears the series, resetting internal lists to zero size
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeries`2.Clone">
            <summary>
            Creates a deep copy of a DataSeries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeries`2.GetYMinAt(System.Int32,`1)">
            <summary>
            Used internally by AutoRanging algorithm. 
            When overriden in a derived class, gets the Min(existingYMin, currentMin), where currentMin is the minimum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMin">The existing minimum</param>
            <returns>The new YMin, which is the Min(existingYMin, currentMin)</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeries`2.GetYMaxAt(System.Int32,`1)">
            <summary>
            Used internally by AutoRanging algorithm. 
            When overriden in a derived class, gets the Max(existingYMax, currentMax), where currentMax is the maximum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMax">The existing maximum</param>
            <returns>The new YMax, which is the Min(existingYMax, currentMax)</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries`2.IsAttached">
            <summary>
            Gets whether the current DataSeries is attached to a DataSet
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries`2.DataSet">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.IDataSeriesSet`2"/> that this DataSeries belongs to
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries`2.XValues">
            <summary>
            Gets the X Values of this series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeries`2.YValues">
            <summary>
            Gets the Y Values of this series
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DataSeries`2._xColumn">
            <summary>
            The XColumn for this DataSeries
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DataSeries`2._yColumn">
            <summary>
            The primary YColumn for this DataSeries
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DataSeries`2._yMin">
            <summary>
            The computed Y-Minimum for this DataSeries
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DataSeries`2._yMax">
            <summary>
            The computed Y-Maximum for this DataSeries
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DataSeries`2._xMin">
            <summary>
            The computed X-Minimum for this DataSeries
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DataSeries`2._xMax">
            <summary>
            The computed X-Maximum for this DataSeries
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.DataSeries`2"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.Remove(`0)">
            <summary>
            Removes the associated Y-Values for the specified X-Value
            </summary>
            <param name="x">The X DataValue to remove. Removes all associated Y-Values</param>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.RemoveAt(System.Int32)">
            <summary>
            Removes the X,Y values at the specified index
            </summary>
            <param name="index">The index to remove at</param>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.Clear">
            <summary>
            Clears the series, resetting internal lists to zero size
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.Clone">
            <summary>
            Creates a deep copy of a DataSeries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.GetIndicesRange(Abt.Controls.SciChart.IRange)">
            <summary>
            Gets the integer indices of the XValues array that are currently in the VisibleRange passed in.
            </summary>
            <param name="visibleRange">The VisibleRange to get the indices range</param>
            <returns>
            The indices to the X-Data that are currently in range
            </returns>
            <example>If the input X-data is 0...99 in steps of 1, the VisibleRange is 10, 30 then the Indices Range will be 10, 30</example>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.ToPointSeries(Abt.Controls.SciChart.Numerics.ResamplingMode,Abt.Controls.SciChart.IndexRange,System.Int32,System.Boolean)">
            <summary>
            Converts the default <see cref="P:Abt.Controls.SciChart.IDataSeries.YValues"/> to an <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which is used to render XY series
            </summary>
            <param name="resamplingMode">The desired <see cref="T:Abt.Controls.SciChart.Numerics.ResamplingMode"/></param>
            <param name="pointRange">The integer Indices range in the parent data-set</param>
            <param name="viewportWidth">The current width of the viewport</param>
            <param name="useXIndices">If true, uses the indices to form the resampled X-values, else uses the X-Values themselves</param>
            <returns>
            A <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which is used to render XY series
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.ToPointSeries(System.Collections.IList,Abt.Controls.SciChart.Numerics.ResamplingMode,Abt.Controls.SciChart.IndexRange,System.Int32,System.Boolean)">
            <summary>
            OBSOLETE. Use ToPointSeries instead, and cast to correct type of point series
            </summary>
            <param name="column"></param>
            <param name="resamplingMode"></param>
            <param name="pointRange"></param>
            <param name="viewportWidth"></param>
            <param name="useXIndices"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.GetWindowedYRange(Abt.Controls.SciChart.IRange)">
            <summary>
            Gets the YRange of the data (min, max of the series) in the input visible range point range, where the input range is the <see cref="P:Abt.Controls.SciChart.IAxis.VisibleRange"/>
            </summary>
            <param name="xRange">The X-Axis Range currently in view</param>
            <returns>The YRange of the data in this window</returns>
            <exception cref="T:System.ArgumentNullException">xRange</exception>
            <exception cref="T:System.InvalidOperationException">Invalid Range Type. Please ensure you are using DateTimeAxis where the X-Data is DateTime, and NumericAxis where the X-Data is Double, Float, Int, Long</exception>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.GetWindowedYRange(Abt.Controls.SciChart.IndexRange)">
            <summary>
            Gets the YRange of the data (min, max of the series) in the input IndexRange, where indices are point-indices on the DataSeries columns
            </summary>
            <param name="xIndexRange">The X-Axis Indices currently in view</param>
            <returns>
            The YRange of the data in this window
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.FindIndex(System.IComparable,Abt.Controls.SciChart.Extensions.SearchMode)">
            <summary>
            Finds the index to the DataSeries at the specified X-Value
            </summary>
            <param name="x">The X-value to search for</param>
            <param name="searchMode">The <see cref="T:Abt.Controls.SciChart.Extensions.SearchMode"/> options to use. Default is exact, where -1 is returned if the index is not found</param>
            <returns>
            The index of the found value
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.ToHitTestInfo(System.Int32)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct containing data about the data-point at the specified index
            </summary>
            <param name="index">The index to the DataSeries</param>
            <returns>The HitTestInfo</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.RecalculateYMinMaxFull">
            <summary>
            Performs a full recalculation of the YMin, YMax values of the DataSeries, by iterating over all Y-values
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.ClearColumns">
            <summary>
            When overridden in a derived class, clears all columns in the Data Series
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.GetYMinAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Min(existingYMin, currentMin), where currentMin is the minimum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMin">The existing minimum</param>
            <returns>
            The new YMin, which is the Min(existingYMin, currentMin)
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.GetYMaxAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Max(existingYMax, currentMax), where currentMax is the maximum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMax">The existing maximum</param>
            <returns>
            The new YMax, which is the Min(existingYMax, currentMax)
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeries`2.ThrowWhenAppendInvalid(System.Int32)">
            <summary>
            Asserts correct number of parameters supplied to Append(TX, params TY) and throws if necessary
            </summary>
            <param name="paramsCount">The expected params count</param>
        </member>
        <member name="E:Abt.Controls.SciChart.DataSeries`2.DataSeriesChanged">
            <summary>
            Event raised whenever points are added to, removed or one or more DataSeries properties changes
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.SyncRoot">
            <summary>
            Synchronization object (per instance) 
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.YMin">
            <summary>
            Gets the computed Minimum value in Y for this series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.YMax">
            <summary>
            Gets the computed Maximum value in Y for this series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.XMin">
            <summary>
            Gets the computed Minimum value in X for this series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.XMax">
            <summary>
            Gets the computed Maximum value in X for this series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.Count">
            <summary>
            Gets the number of points in this data series
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.SeriesName">
            <summary>
            Gets or sets the name of this series
            </summary>
            <value>The name of the series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.IsAttached">
            <summary>
            Gets a value indicating whether this instance is attached.
            </summary>
            <value>
            	<c>true</c> if this instance is attached; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.Abt#Controls#SciChart#IDataSeries#DataSet">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.IDataSeriesSet"/> that this DataSeries belongs to
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.DataSeriesType">
            <summary>
            Gets the <see cref="P:Abt.Controls.SciChart.DataSeries`2.DataSeriesType"/> for this DataSeries
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.Item(Abt.Controls.SciChart.DataSeriesColumn,System.Int32)">
            <summary>
            Gets the item at the index from the specified <see cref="T:Abt.Controls.SciChart.DataSeriesColumn"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.HasValues">
            <summary>
            Gets whether the Data Series has values (is not empty)
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.DataSet">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.IDataSeriesSet`2"/> that this DataSeries belongs to
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.XValues">
            <summary>
            Gets the X Values of this series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.YValues">
            <summary>
            Gets the Y Values of this series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.Abt#Controls#SciChart#IDataSeries#XValues">
            <summary>
            Gets the X Values of this dataseries
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.Abt#Controls#SciChart#IDataSeries#YValues">
            <summary>
            Gets the Y Values of this dataseries
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.IsFifo">
            <summary>
            Gets whether the dataseries behaves as a FIFO
            If True, when the FifoCapacity is reached, old points will be
            discarded in favour of new points
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.IsSorted">
            <summary>
            Gets whether this DataSeries contains Sorted data in the X-direction. 
            Note: Sorted data will result in far faster indexing operations. If at all possible, try to keep your data sorted in the X-direction
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeries`2.FifoCapacity">
            <summary>
            Gets or sets the size of the FIFO buffer.
            If null, then the dataseries is unlimited.
            If a value is set, when the point count reaches this value, older points will be discarded
            </summary>
            <value>The fifo capacity.</value>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.IXyDataSeries`2">
            <summary>
            Defines the interface to a typed Xy DataSeries, which contains columns of X-Values and Y-Values. 
            </summary>    
        </member>
        <member name="T:Abt.Controls.SciChart.IXyDataSeries">
            <summary>
            Defines the interface to an Xy DataSeries, which contains columns of X-Values and Y-Values
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IXyDataSeries`2.Append(`0,`1)">
            <summary>
            Appends an X, Y point to the series
            </summary>
            <param name="x">The X Value</param>
            <param name="y">The Y Value</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IXyDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends a list of X, Y points to the series
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception will be thrown if the count of x and y differ</exception>
            <param name="x">The list of X points</param>
            <param name="y">The list of Y points</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IXyDataSeries`2.Update(`0,`1)">
            <summary>
            Updates an X,Y point specified by the X-Value passed in. 
            </summary>
            <param name="x">The X Value to key on when updating</param>
            <param name="y">The new Y value</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the x value is not in the DataSeries</exception>
        </member>
        <member name="M:Abt.Controls.SciChart.IXyDataSeries`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts an X,Y point at the specified index
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
        </member>
        <member name="M:Abt.Controls.SciChart.XyDataSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:XyDataSeries&lt;TY&gt;"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.XyDataSeries`2.ToPointSeries(Abt.Controls.SciChart.Numerics.ResamplingMode,Abt.Controls.SciChart.IndexRange,System.Int32,System.Boolean)">
            <summary>
            Converts the default <see cref="P:Abt.Controls.SciChart.IDataSeries.YValues"/> to an <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which is used to render XY series
            </summary>
            <param name="resamplingMode">The desired <see cref="T:Abt.Controls.SciChart.Numerics.ResamplingMode"/></param>
            <param name="pointRange">The integer Indices range in the parent data-set</param>
            <param name="viewportWidth">The current width of the viewport</param>
            <param name="useXIndices">If true, uses the indices to form the resampled X-values, else uses the X-Values themselves</param>
            <returns>
            A <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which is used to render XY series
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.XyDataSeries`2.ToHitTestInfo(System.Int32)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct containing data about the data-point at the specified index
            </summary>
            <param name="index">The index to the DataSeries</param>
            <returns>The HitTestInfo</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.XyDataSeries`2.ClearColumns">
            <summary>
            When overridden in a derived class, clears all columns in the Data Series
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.XyDataSeries`2.RemoveAt(System.Int32)">
            <summary>
            Removes the X,Y values at the specified index
            </summary>
            <param name="index">The index to remove at</param>
        </member>
        <member name="M:Abt.Controls.SciChart.XyDataSeries`2.Clone">
            <summary>
            Creates a deep copy of a DataSeries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.XyDataSeries`2.Append(`0,`1)">
            <summary>
            Appends an X, Y point to the series
            </summary>
            <param name="x">The X Value</param>
            <param name="y">The Y Value</param>
        </member>
        <member name="M:Abt.Controls.SciChart.XyDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends a list of X, Y points to the series
            </summary>
            <param name="x">The list of X points</param>
            <param name="y">The list of Y points</param>
        </member>
        <member name="M:Abt.Controls.SciChart.XyDataSeries`2.Update(`0,`1)">
            <summary>
            Updates an X,Y point specified by the X-Value passed in. 
            </summary>
            <param name="x">The X Value to key on when updating</param>
            <param name="y">The new Y value</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the x value is not in the DataSeries</exception>
        </member>
        <member name="M:Abt.Controls.SciChart.XyDataSeries`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts an X,Y point at the specified index
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
        </member>
        <member name="M:Abt.Controls.SciChart.XyDataSeries`2.GetYMinAt(System.Int32,`1)">
            <summary>
            Used internally by AutoRanging algorithm. 
            When overriden in a derived class, gets the Min(existingYMin, currentMin), where currentMin is the minimum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMin">The existing minimum</param>
            <returns>The new YMin, which is the Min(existingYMin, currentMin)</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.XyDataSeries`2.GetYMaxAt(System.Int32,`1)">
            <summary>
            Used internally by AutoRanging algorithm. 
            When overriden in a derived class, gets the Max(existingYMax, currentMax), where currentMax is the maximum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMax">The existing maximum</param>
            <returns>The new YMax, which is the Min(existingYMax, currentMax)</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.XyDataSeries`2.DataSeriesType">
            <summary>
            Gets the <see cref="P:Abt.Controls.SciChart.XyDataSeries`2.DataSeriesType"/> for this DataSeries
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.XyDataSeries`2.HasValues">
            <summary>
            Gets whether the Data Series has values (is not empty)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.UnsortedXyDataSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:UnsortedXyDataSeries&lt;TY&gt;"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.UnsortedXyDataSeries`2.ToPointSeries(Abt.Controls.SciChart.Numerics.ResamplingMode,Abt.Controls.SciChart.IndexRange,System.Int32,System.Boolean)">
            <summary>
            Converts the default <see cref="P:Abt.Controls.SciChart.IDataSeries.YValues"/> to an <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which is used to render XY series
            </summary>
            <param name="resamplingMode">The desired <see cref="T:Abt.Controls.SciChart.Numerics.ResamplingMode"/></param>
            <param name="pointRange">The integer Indices range in the parent data-set</param>
            <param name="viewportWidth">The current width of the viewport</param>
            <param name="useXIndices">If true, uses the indices to form the resampled X-values, else uses the X-Values themselves</param>
            <returns>
            A <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which is used to render XY series
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.UnsortedXyDataSeries`2.ToHitTestInfo(System.Int32)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct containing data about the data-point at the specified index
            </summary>
            <param name="index">The index to the DataSeries</param>
            <returns>The HitTestInfo</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.UnsortedXyDataSeries`2.ClearColumns">
            <summary>
            When overridden in a derived class, clears all columns in the Data Series
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.UnsortedXyDataSeries`2.RemoveAt(System.Int32)">
            <summary>
            Removes the X,Y values at the specified index
            </summary>
            <param name="index">The index to remove at</param>
        </member>
        <member name="M:Abt.Controls.SciChart.UnsortedXyDataSeries`2.Clone">
            <summary>
            Creates a deep copy of a DataSeries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.UnsortedXyDataSeries`2.Append(`0,`1)">
            <summary>
            Appends an X, Y point to the series
            </summary>
            <param name="x">The X Value</param>
            <param name="y">The Y Value</param>
        </member>
        <member name="M:Abt.Controls.SciChart.UnsortedXyDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends a list of X, Y points to the series
            </summary>
            <param name="x">The list of X points</param>
            <param name="y">The list of Y points</param>
        </member>
        <member name="M:Abt.Controls.SciChart.UnsortedXyDataSeries`2.Update(`0,`1)">
            <summary>
            Updates an X,Y point specified by the X-Value passed in. 
            </summary>
            <param name="x">The X Value to key on when updating</param>
            <param name="y">The new Y value</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the x value is not in the DataSeries</exception>
        </member>
        <member name="M:Abt.Controls.SciChart.UnsortedXyDataSeries`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts an X,Y point at the specified index
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
        </member>
        <member name="M:Abt.Controls.SciChart.UnsortedXyDataSeries`2.GetYMinAt(System.Int32,`1)">
            <summary>
            Used internally by AutoRanging algorithm. 
            When overriden in a derived class, gets the Min(existingYMin, currentMin), where currentMin is the minimum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMin">The existing minimum</param>
            <returns>The new YMin, which is the Min(existingYMin, currentMin)</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.UnsortedXyDataSeries`2.GetYMaxAt(System.Int32,`1)">
            <summary>
            Used internally by AutoRanging algorithm. 
            When overriden in a derived class, gets the Max(existingYMax, currentMax), where currentMax is the maximum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMax">The existing maximum</param>
            <returns>The new YMax, which is the Min(existingYMax, currentMax)</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.UnsortedXyDataSeries`2.DataSeriesType">
            <summary>
            Gets the <see cref="P:Abt.Controls.SciChart.UnsortedXyDataSeries`2.DataSeriesType"/> for this DataSeries
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.UnsortedXyDataSeries`2.HasValues">
            <summary>
            Gets whether the Data Series has values (is not empty)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Licensing.IAbtLicenseProvider.Validate(System.Object)">
            <summary>
            Validates the component
            </summary>
            <param name="parameter">The component to validate</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Licensing.SciStockChartLicenseProvider.Validate(System.Object)">
            <summary>
            Validates the component
            </summary>
            <param name="parameter">The component to validate</param>
        </member>
        <member name="T:Abt.Controls.SciChart.IChartSeriesViewModel">
            <summary>
            Defines the interface to a <see cref="T:Abt.Controls.SciChart.ChartSeriesViewModel"/>, a viewmodel to a single data-render series pair, which is used in the new <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> Mvvm API. 
            For usage, see the SeriesSource property and the Mvvm examples in the examples suite. You may bind SeriesSource to a collection of <see cref="T:Abt.Controls.SciChart.IChartSeriesViewModel"/> 
            and SciChart will automatically create a <see cref="T:Abt.Controls.SciChart.DataSeriesSet`2"/> 
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IChartSeriesViewModel.DataSeries">
            <summary>
            Gets or sets the DataSeries
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IChartSeriesViewModel.RenderSeries">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> paired with the data
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ChartSeriesViewModel">
            <summary>
            A viewmodel to a single data-render series pair, used in the new <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> Mvvm API. 
            For usage, see the SeriesSource property and the Mvvm examples in the examples suite. You may bind SeriesSource to a collection of <see cref="T:Abt.Controls.SciChart.IChartSeriesViewModel"/> 
            and SciChart will automatically create a <see cref="T:Abt.Controls.SciChart.DataSeriesSet`2"/> 
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.BindableObject">
            <summary>
            Provides a base-type for classes that need to raise <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> events
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.BindableObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event
            </summary>
            <param name="propertyName">Name of the property.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.BindableObject.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">Old value of the property.</param>
            <param name="newValue">New value of the property.</param>
            <remarks></remarks>
        </member>
        <member name="E:Abt.Controls.SciChart.BindableObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartSeriesViewModel.#ctor(Abt.Controls.SciChart.IDataSeries,Abt.Controls.SciChart.IRenderableSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ChartSeriesViewModel"/> class.
            </summary>
            <param name="dataSeries">The data series.</param>
            <param name="renderSeries">The render series paired with the data.</param>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartSeriesViewModel.DataSeries">
            <summary>
            Gets or sets the DataSeries
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartSeriesViewModel.RenderSeries">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> paired with the data
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IXyyDataSeries">
            <summary>
            Defines the interface to an Xyy DataSeries, a series containing X, Y0 and Y1 data-points
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IXyyDataSeries.Y1Values">
            <summary>
            Gets the Y1 Values as a list of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IXyyDataSeries`2">
            <summary>
            Defines the templated interface to an Xyy DataSeries, a series containing X, Y0 and Y1 data-points
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IXyyDataSeries`2.Append(`0,`1,`1)">
            <summary>
            Appends a single X, Y0, Y1 point to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-value</param>
            <param name="y0">The Y0-value</param>
            <param name="y1">The Y1-value</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IXyyDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends a collection of X, Y0 and Y1 points to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-values</param>
            <param name="y0">The Y0-values</param>
            <param name="y1">The Y1-values</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IXyyDataSeries`2.Update(`0,`1,`1)">
            <summary>
            Updates (overwrites) the Y0, Y1 values at the specified X-value. Automatically triggers a redraw
            </summary>
            <param name="x">The X-value</param>
            <param name="y0">The Y0-value</param>
            <param name="y1">The Y1-value</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IXyyDataSeries`2.Insert(System.Int32,`0,`1,`1)">
            <summary>
            Inserts an X, Y0, Y1 point at the specified index. Automatically triggers a redraw
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X-value</param>
            <param name="y0">The Y0-value</param>
            <param name="y1">The Y1-value</param>
        </member>
        <member name="P:Abt.Controls.SciChart.IXyyDataSeries`2.Y1Values">
            <summary>
            Gets the Y1 values
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AnnotationCreationModifier">
            <summary>
            A custom <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> to be used in conjunction with the <see cref="T:Abt.Controls.SciChart.AnnotationCollection"/>. The <see cref="T:Abt.Controls.SciChart.AnnotationCreationModifier"/> 
            allows creation of annotations on mouse-click and drag. See the example of use CreateAnnotationsDynamically in the examples-suite
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ChartModifierBase">
            <summary>
            Defines the base class to a Chart Modifier, which can be used to extend the interactivity or rendering of the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ApiElementBase">
            <summary>
            Base class to expose properties and methods for <see cref="T:Abt.Controls.SciChart.AnnotationBase"/> derived types and <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> derived types
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ApiElementBase.OnAttached">
            <summary>
            Called when the element is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ApiElementBase.OnDetached">
            <summary>
            Called immediately before the element is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ApiElementBase.GetYAxis(System.String)">
            <summary>
            Gets the YAxis <see cref="T:Abt.Controls.SciChart.IAxis"/> instance on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> at the specified <see cref="T:Abt.Controls.SciChart.AxisAlignment"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ApiElementBase.OnInvalidateParentSurface">
            <summary>
            Raises the <see cref="T:Abt.Controls.SciChart.InvalidateSciChartMessage"/> which causes the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> to invalidate
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ApiElementBase.GetAndAssertTemplateChild``1(System.String)">
            <summary>
            Gets the TemplateChild by the specified name and casts to type <typeparamref name="T"/>, asserting that the result is not null
            </summary>
            <typeparam name="T">The Type of the templated part</typeparam>
            <param name="childName">Name of the templated part.</param>
            <returns>The template part instance</returns>
            <exception cref="T:System.InvalidOperationException">Unable to Apply the Control Template. Child is missing or of the wrong type</exception>
        </member>
        <member name="M:Abt.Controls.SciChart.ApiElementBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event, as part of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="E:Abt.Controls.SciChart.ApiElementBase.PropertyChanged">
            <summary>
            Occurs when a property changes in the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ApiElementBase.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> to perform operations on 
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ApiElementBase.YAxis">
            <summary>
            Gets the primary YAxis, this is the first axis in the YAxes collection
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ApiElementBase.YAxes">
            <summary>
            Returns the YAxes on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ApiElementBase.XAxis">
            <summary>
            Gets the XAxis <see cref="T:Abt.Controls.SciChart.IAxis"/> instance on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ApiElementBase.Services">
            <summary>
            Gets or sets a <see cref="T:Abt.Controls.SciChart.IServiceContainer"/> container
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ApiElementBase.ModifierSurface">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.IChartModifierSurface"/> instance on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>, which acts as a canvas to place UIElements
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ApiElementBase.IsAttached">
            <summary>
            Gets or sets whether this Element is attached to a parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <value><c>true</c> if this instance is attached; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.ApiElementBase.RootGrid">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.IMainGrid"/> which is the root component for the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>, 
            containing the XAxis, YAxes, ModifierSurface, RenderSurface and GridLinesPanel
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IChartModifier">
            <summary>
            Defines the interface to a <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/>, which can be used to extend the interactivity or rendering of the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.Utility.Mouse.IReceiveMouseEvents">
            <summary>
            Defines the interface to a type which receives unified Mouse Events (cross-platform WPF and Silverlight)
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Mouse.IReceiveMouseEvents.OnModifierDoubleClick(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Mouse.IReceiveMouseEvents.OnModifierMouseDown(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Mouse.IReceiveMouseEvents.OnModifierMouseMove(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Mouse.IReceiveMouseEvents.OnModifierMouseUp(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Mouse.IReceiveMouseEvents.OnModifierMouseWheel(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
        </member>
        <member name="P:Abt.Controls.SciChart.Utility.Mouse.IReceiveMouseEvents.IsEnabled">
            <summary>
            Gets or sets whether the mouse target is enabled
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Utility.Mouse.IReceiveMouseEvents.MouseEventGroup">
            <summary>
            Gets or sets a Mouse Event Group, an ID used to share mouse events across multiple targets
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IChartModifier.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IChartModifier.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IChartModifier.GetYAxis(System.String)">
            <summary>
            Gets the YAxis <see cref="T:Abt.Controls.SciChart.IAxis"/> instance on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> with the specified Id
            </summary>
            <param name="axisId">The Id of the axis to get</param>
            <returns>The Axis instance</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.IChartModifier.Services">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.ServiceContainer"/> which provides access to services throughout SciChart. 
            ServiceContainers are created one per <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Abt.Controls.SciChart.AxisBase"/>, <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IChartModifier.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> to perform operations on 
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IChartModifier.ModifierName">
            <summary>
            Gets modifier name
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IChartModifier.IsAttached">
            <summary>
            Gets or sets whether this Chart Modifier is attached to a parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IChartModifier.DataContext">
            <summary>
            Gets or sets the DataContext for this Chart Modifier 
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IChartModifier.ReceiveHandledEvents">
            <summary>
            If true, this <see cref="T:Abt.Controls.SciChart.IChartModifier"/> can receive handled events. Chart modifiers work similarly to mouse event handlers in WPF and Silverlight. If a modifier
            further up the stack receives an event and handles it, then subsequent modifiers do not receive the event. This property overrides this behaviour. 
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ChartModifierBase.ReceiveHandledEventsProperty">
            <summary>
            Defines the ReceiveHandledEvents DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ChartModifierBase.IsEnabledProperty">
            <summary>
            Defines the ListenAttachedIsEnabled Attached Property
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ChartModifierBase.ExecuteOnProperty">
            <summary>
            Defines the ExecuteOn DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.OnModifierDoubleClick(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.OnModifierMouseDown(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.OnModifierMouseMove(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.OnModifierMouseUp(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.OnModifierMouseWheel(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.GetPointRelativeTo(System.Windows.Point,Abt.Controls.SciChart.IHitTestable)">
            <summary>
            Transforms the input point relative to the <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element. Can be used to transform 
            points relative to the <see cref="P:Abt.Controls.SciChart.SciChartSurface.ModifierSurface"/>, or <see cref="P:Abt.Controls.SciChart.SciChartSurface.XAxis"/> for instance.
            </summary>
            <param name="point">The input point</param>
            <param name="relativeTo">The <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element to translate points relative to</param>
            <returns>The output point</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.GetRelativePosition(System.Windows.Point,Abt.Controls.SciChart.IHitTestable)">
            <summary>
            OBSOLETE
            </summary>
            <param name="point"></param>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.CanReceiveEvents">
            <summary>
            Returns value which indicates can modifier receive mouse events or can't
            </summary>
            <returns>Boolean value</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.OnParentSurfaceResized(Abt.Controls.SciChart.SciChartResizedMessage)">
            <summary>
            Called when the parent SciChartSurface is resized
            </summary>
            <param name="e">The <see cref="T:Abt.Controls.SciChart.SciChartResizedMessage"/> which contains the event arg data</param>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.OnParentSurfaceRendered(Abt.Controls.SciChart.SciChartRenderedMessage)">
            <summary>
            Called when the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> is rendered
            </summary>
            <param name="e">The <see cref="T:Abt.Controls.SciChart.SciChartRenderedMessage"/> which contains the event arg data</param>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.SetCursor(System.Windows.Input.Cursor)">
            <summary>
            Sets the Cursor on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="cursor"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the DataContext of the <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instance
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.OnParentSurfaceMouseLeave">
            <summary>
            Called when the mouse leaves the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.OnParentSurfaceMouseEnter">
            <summary>
            Called when the mouse enters the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.OnSelectedSeriesChanged(System.Collections.Generic.IEnumerable{Abt.Controls.SciChart.IRenderableSeries},System.Collections.Generic.IEnumerable{Abt.Controls.SciChart.IRenderableSeries})">
            <summary>
            Called when the parent surface SelectedSeries collection changes
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierBase.MatchesExecuteOn(Abt.Controls.SciChart.MouseButtons,Abt.Controls.SciChart.ExecuteOn)">
            <summary>
            Determines whether the currently pressed mouse buttons matches the <see cref="P:Abt.Controls.SciChart.ChartModifierBase.ExecuteOn"/>. Used to 
            filter events such as zoom or pan on right mouse button
            </summary>
            <param name="mouseButtons"></param>
            <param name="executeOn"></param>
            <returns></returns>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartModifierBase.ExecuteOn">
            <summary>
            Determines when the <see cref="T:Abt.Controls.SciChart.ZoomExtentsModifier"/> executes, 
            e.g. <see cref="F:Abt.Controls.SciChart.ExecuteOn.MouseDoubleClick"/> will cause a zoom extents on mouse double 
            click of the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartModifierBase.ReceiveHandledEvents">
            <summary>
            Gets or sets a value, indicates whether current modifier handles events
            which have already been marked as handled
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartModifierBase.ModifierName">
            <summary>
            Gets modifier name
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartModifierBase.IsMouseLeftButtonDown">
            <summary>
            Gets if the Left mouse button is currently down
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartModifierBase.IsMouseMiddleButtonDown">
            <summary>
            Gets if the Middle mouse button is currently down
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartModifierBase.IsMouseRightButtonDown">
            <summary>
            Gets of the right mouse button is currently down
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartModifierBase.MouseEventGroup">
            <summary>
            Gets or sets a Mouse Event Group, an ID used to share mouse events across multiple targets
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartModifierBase.Services">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.ServiceContainer"/> which provides access to services throughout SciChart. 
            ServiceContainers are created one per <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Abt.Controls.SciChart.AxisBase"/>, <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartModifierBase.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> to perform operations on
            </summary>
            <value>The parent surface.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartModifierBase.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this element is enabled in the user interface (UI).
            </summary>
            <returns>true if the element is enabled; otherwise, false. The default value is true.</returns>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationCreationModifier.YAxisIdProperty">
            <summary>Defines the YAxisId DependencyProperty</summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationCreationModifier.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instance
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationCreationModifier.OnAnnotationCreated">
            <summary>
            Called when [annotation created].
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationCreationModifier.OnModifierMouseMove(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="mouseEventArgs">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationCreationModifier.OnModifierMouseUp(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="mouseButtonEventArgs">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationCreationModifier.CreateAnnotation(System.Type,System.Windows.Style)">
            <summary>
            Creates an annotation of the specified Type and applies the style to it
            </summary>
            <param name="annotationType">The Type of annotation to create</param>
            <param name="annotationStyle">The style to apply to the annotation</param>
            <returns>The annotation instance</returns>
        </member>
        <member name="E:Abt.Controls.SciChart.AnnotationCreationModifier.AnnotationCreated">
            <summary>
            Event raised when an annotation is created
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationCreationModifier.YAxisId">
            <summary>
            Gets or sets the ID of the Y-Axis which this Annotation is measured against
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationCreationModifier.AnnotationType">
            <summary>
            Gets or sets the type of the annotation to create
            </summary>
            <value>
            The type of the annotation.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">value</exception>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationCreationModifier.AnnotationStyle">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Style"/> to apply to the annotation being created
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationCreationModifier.Annotation">
            <summary>
            Gets the newly created <see cref="T:Abt.Controls.SciChart.IAnnotation"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.Common.Device">
            <summary>
            Used to show or hide UIElements based on framework (WPF, Silverlight)
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.Common.Device.SnapsToDevicePixelsProperty">
            <summary>
            Defines the SnapsToDevicePixels DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Common.Device.SetSnapsToDevicePixels(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the SnapsToDevicePixels attached property on the specified DependencyObject
            </summary>
            <param name="element">The DependencyObject</param>
            <param name="snapToDevicePixels">The value of the SnapsToDevicePixels attached property to set</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Common.Device.GetSnapsToDevicePixels(System.Windows.DependencyObject)">
            <summary>
            Gets the SnapsToDevicePixels attached property from the specified DependencyObject
            </summary>
            <param name="element">The DependencyObject</param>
            <return>The value of the SnapsToDevicePixels attached property</return>
        </member>
        <member name="T:Abt.Controls.SciChart.ActionCommand`1">
            <summary>
            Provides an ICommand derived class allowing delegates to be invokved directly on the view model 
            </summary>
            <typeparam name="T">The Type of the command parameter</typeparam>
        </member>
        <member name="M:Abt.Controls.SciChart.ActionCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ActionCommand`1"/> class.
            </summary>
            <param name="execute">The execute delegate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ActionCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ActionCommand`1"/> class.
            </summary>
            <param name="execute">The execute delegate.</param>
            <param name="canExecute">The can execute predicate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ActionCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ActionCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ActionCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <remarks></remarks>
        </member>
        <member name="E:Abt.Controls.SciChart.ActionCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.ActionCommand">
            <summary>
            Provides an ICommand derived class allowing delegates to be invokved directly on the view model 
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ActionCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ActionCommand"/> class.
            </summary>
            <param name="execute">The execute delegate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ActionCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ActionCommand"/> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute delegate.</param>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.BooleanToVisibilityConverter">
            <summary>
            Converts to Visibility.Collapsed if input value is null by default. Can be used with "Inverse" flag
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Abt.Controls.SciChart.CollapseIfNullOrEmptyStringConverter">
            <summary>
            Converts to Visibility.Collapsed if input string is null or empty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.CollapseIfNullOrEmptyStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.CollapseIfNullOrEmptyStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Abt.Controls.SciChart.ColorToBrushConverter">
            <summary>
            Converts from a Color to SolidColorBrush
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ColorToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.ColorToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Abt.Controls.SciChart.InverseOrientationConverter">
            <summary>
            Converts from Axis <see cref="T:System.Windows.Controls.Orientation"/> to its inverse, e.g. Horizontal becomes Vertical and vice versa
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.InverseOrientationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.InverseOrientationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.LayoutTransformer">
            <summary>
            Represents a control that applies a layout transformation to its Content.
            </summary>
            <remarks>
            From the Silverlight Toolkit http://silverlight.codeplex.com/. (c) Copyright Microsoft Corporation. This source is subject to the Microsoft Public License (Ms-PL).
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer.TransformRootName">
            <summary>
            Name of the TransformRoot template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer.PresenterName">
            <summary>
            Name of the Presenter template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer.AcceptableDelta">
            <summary>
            Acceptable difference between two doubles.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer.DecimalsAfterRound">
            <summary>
            Number of decimals to round the Matrix to.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer.LayoutTransformProperty">
            <summary>
            Identifies the LayoutTransform DependencyProperty.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer._transformRoot">
            <summary>
            Root element for performing transformations.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer._contentPresenter">
            <summary>
            ContentPresenter element for displaying the content.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer._matrixTransform">
            <summary>
            RenderTransform/MatrixTransform applied to _transformRoot.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer._transformation">
            <summary>
            Transformation matrix corresponding to _matrixTransform.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer._childActualSize">
            <summary>
            Actual DesiredSize of Child element (the value it returned from its MeasureOverride method).
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.#ctor">
            <summary>
            Initializes a new instance of the LayoutTransformer class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.OnApplyTemplate">
            <summary>
            Builds the visual tree for the LayoutTransformer control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.LayoutTransformChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Transform DependencyProperty.
            </summary>
            <param name="o">Source of the change.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.ApplyLayoutTransform">
            <summary>
            Applies the layout transform on the LayoutTransformer control content.
            </summary>
            <remarks>
            Only used in advanced scenarios (like animating the LayoutTransform). 
            Should be used to notify the LayoutTransformer control that some aspect 
            of its Transform property has changed. 
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.ProcessTransform(System.Windows.Media.Transform)">
            <summary>
            Processes the Transform to determine the corresponding Matrix.
            </summary>
            <param name="transform">Transform to process.</param>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.GetTransformMatrix(System.Windows.Media.Transform)">
            <summary>
            Walks the Transform(Group) and returns the corresponding Matrix.
            </summary>
            <param name="transform">Transform(Group) to walk.</param>
            <returns>Computed Matrix.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
            <remarks>
            Using the WPF paramater name finalSize instead of Silverlight's finalSize for clarity
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.ComputeLargestTransformedSize(System.Windows.Size)">
            <summary>
            Compute the largest usable size (greatest area) after applying the transformation to the specified bounds.
            </summary>
            <param name="arrangeBounds">Arrange bounds.</param>
            <returns>Largest Size possible.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.IsSizeSmaller(System.Windows.Size,System.Windows.Size)">
            <summary>
            Returns true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">Second Size.</param>
            <param name="b">First Size.</param>
            <returns>True if Size a is smaller than Size b in either dimension.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.RoundMatrix(System.Windows.Media.Matrix,System.Int32)">
            <summary>
            Rounds the non-offset elements of a Matrix to avoid issues due to floating point imprecision.
            </summary>
            <param name="matrix">Matrix to round.</param>
            <param name="decimals">Number of decimal places to round to.</param>
            <returns>Rounded Matrix.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.RectTransform(System.Windows.Rect,System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Rect.Transform on Silverlight.
            </summary>
            <param name="rect">Rect to transform.</param>
            <param name="matrix">Matrix to transform with.</param>
            <returns>Bounding box of transformed Rect.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.MatrixMultiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.Multiply on Silverlight.
            </summary>
            <param name="matrix1">First matrix.</param>
            <param name="matrix2">Second matrix.</param>
            <returns>Multiplication result.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.MatrixHasInverse(System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.HasInverse on Silverlight.
            </summary>
            <param name="matrix">Matrix to check for inverse.</param>
            <returns>True if the Matrix has an inverse.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.DiagnosticWriteLine(System.String)">
            <summary>
            Outputs diagnostic info if DIAGNOSTICWRITELINE is defined.
            </summary>
            <param name="message">Diagnostic message.</param>
        </member>
        <member name="P:System.Windows.Controls.LayoutTransformer.LayoutTransform">
            <summary>
            Gets or sets the layout transform to apply on the LayoutTransformer 
            control content.
            </summary>
            <remarks>
            Corresponds to UIElement.LayoutTransform.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.LayoutTransformer.Child">
            <summary>
            Gets the child element being transformed.
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.NullToVisibilityConverter">
            <summary>
            Converts to Visibility.Collapsed if input value is null by default. Can be used with "Inverse" flag
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.NullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.NullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Abt.Controls.SciChart.OrientationToAxisLabelRotationConverter">
            <summary>
            Converts from Axis <see cref="T:System.Windows.Controls.Orientation"/> to label rotation angle
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.OrientationToAxisLabelRotationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.OrientationToAxisLabelRotationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.StringToAnnotationCoordinateConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.StringToAnnotationCoordinateConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the intended conversion type of the converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="T:Abt.Controls.SciChart.CanvasExtensions">
            <summary>
            Defines attached properties for Canvases
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.CanvasExtensions.ClipToBoundsProperty">
            <summary>
            Defines the ClipToBounds DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.CanvasExtensions.GetClipToBounds(System.Windows.DependencyObject)">
            <summary>
            Gets the ClipToBounds DependencyProperty value
            </summary>
            <param name="depObj">The dependencyObject target</param>
            <returns>The ClipToBounds property value</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.CanvasExtensions.SetClipToBounds(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the ClipToBounds DependencyProperty value. If true, the canvas clips any child elements to the bounds when rendering.
            </summary>
            <param name="depObj">The dependencyObject target</param>
            <param name="clipToBounds">if set to <c>true</c> clip to bounds.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.DecimalExtensions.RoundOff(System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds using arithmetic (5 rounds up) symmetrical (up is away from zero) rounding
            </summary>
            <param name="d">A Decimal number to be rounded.</param>
            <param name="decimals">The number of significant fractional digits (precision) in the return value.</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns>The number nearest d with precision equal to decimals. If d is halfway between two numbers, then the nearest whole number away from zero is returned.</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.DoubleExtensions.RoundOff(System.Double,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds using arithmetic (5 rounds up) symmetrical (up is away from zero) rounding
            </summary>
            <param name="d">A double number to be rounded.</param>
            <param name="decimals">The number of significant fractional digits (precision) in the return value.</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns>The number nearest d with precision equal to decimals. If d is halfway between two numbers, then the nearest whole number away from zero is returned.</returns>
        </member>
        <member name="T:Abt.Controls.SciChart.Extensions.SearchMode">
            <summary>
            Enumeration constants to define binary searching of lists
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.Extensions.SearchMode.Exact">
            <summary>
            Specifies exact search. If the index is not found, -1 is returned. 
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.Extensions.SearchMode.Nearest">
            <summary>
            Specifies the nearest index. This will round up or down if the search is in-between x-values
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.Extensions.SearchMode.RoundDown">
            <summary>
            Rounds down to the nearest index.
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.Extensions.SearchMode.RoundUp">
            <summary>
            Rounds up to the nearest index
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.ElementExtensions.GetBoundsRelativeTo(System.Windows.FrameworkElement,System.Windows.UIElement)">
            <summary>
            Get the bounds of an element relative to another element.
            </summary>
            <param name="element">The element.</param>
            <param name="otherElement">
            The element relative to the other element.
            </param>
            <returns>
            The bounds of the element relative to another element, or null if
            the elements are not related.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="otherElement"/> is null.
            </exception>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.ElementExtensions.FindLogicalParent``1(System.Windows.FrameworkElement)">
            <summary>
            Finds the logical parent of the <see cref="T:System.Windows.FrameworkElement"/> 
            </summary>
            <typeparam name="T">The type of parent to find</typeparam>
            <param name="frameworkElement">The FrameworkElement.</param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.PointExtensions.Floor(System.Windows.Point)">
            <summary>
            Returns a new Point where X and Y components are equivalent to Math.Floor of the input point
            </summary>
            <param name="point">The input point, e.g. x=1.242, y=6.336</param>
            <returns>The Floor'ed point, e.g. x=1, y=6</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.StringExtensions.Substring(System.String,System.String,System.String)">
            <summary>
            Returns the substring of the input string which is sandwiched between the Before and After strings
            </summary>
            <param name="input"></param>
            <param name="before"></param>
            <param name="after"></param>
            <returns></returns>
        </member>
        <member name="T:Abt.Controls.SciChart.Extensions.VisualTreeExtensions">
            <summary>
            Provides useful extensions for working with the visual tree.
            </summary>
            <remarks>
            Since many of these extension methods are declared on types like
            DependencyObject high up in the class hierarchy, we've placed them in
            the Primitives namespace which is less likely to be imported for normal
            scenarios.
            </remarks>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.VisualTreeExtensions.GetVisualAncestors(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree ancestors of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree ancestors of the element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.VisualTreeExtensions.GetVisualAncestorsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree ancestors of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree ancestors of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.VisualTreeExtensions.GetVisualAncestorsAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree ancestors of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree ancestors of an element and the element itself.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.VisualTreeExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.VisualTreeExtensions.GetVisualChildrenAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.VisualTreeExtensions.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.VisualTreeExtensions.GetVisualDescendants(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree descendants of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.VisualTreeExtensions.GetVisualDescendantsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree descendants of an element and the element
            itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree descendants of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.VisualTreeExtensions.GetVisualDescendantsAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree descendants of an element and the element
            itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree descendants of an element and the element itself.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.VisualTreeExtensions.GetVisualSiblings(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree siblings of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree siblings of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.VisualTreeExtensions.GetVisualSiblingsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree siblings of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree siblings of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.VisualTreeExtensions.InvokeOnLayoutUpdated(System.Windows.FrameworkElement,System.Action)">
            <summary>
            Perform an action when the element's LayoutUpdated event fires.
            </summary>
            <param name="element">The element.</param>
            <param name="action">The action to perform.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is null.
            </exception>
        </member>
        <member name="M:Abt.Controls.SciChart.Extensions.VisualTreeExtensions.GetLogicalChildren(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="T:Abt.Controls.SciChart.IEventAggregator">
            <summary>
            Defines the interface to a lightweight Event Aggregator used within SciChart for inter-component communication
            </summary>
        </member>
        <member name="T:TinyMessenger.ITinyMessengerHub">
            <summary>
            Messenger hub responsible for taking subscriptions/publications and delivering of messages.
            </summary>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            All references are held with WeakReferences
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with WeakReferences
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Boolean,TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean,TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Unsubscribe``1(TinyMessenger.TinyMessageSubscriptionToken)">
            <summary>
            Unsubscribe from a particular message type.
            
            Does not throw an exception if the subscription is not found.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="subscriptionToken">Subscription token received from Subscribe</param>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Publish``1(``0)">
            <summary>
            Publish a message to any subscribers
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.PublishAsync``1(``0)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.PublishAsync``1(``0,System.AsyncCallback)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
            <param name="callback">AsyncCallback called on completion</param>
        </member>
        <member name="T:Abt.Controls.SciChart.LoggedMessageBase">
            <summary>
            Base class for automatically logged Event Aggregator messages
            </summary>
        </member>
        <member name="T:TinyMessenger.TinyMessageBase">
            <summary>
            Base class for messages that provides weak refrence storage of the sender
            </summary>
        </member>
        <member name="T:TinyMessenger.ITinyMessage">
            <summary>
            A TinyMessage to be published/delivered by TinyMessenger
            </summary>
        </member>
        <member name="P:TinyMessenger.ITinyMessage.Sender">
            <summary>
            The sender of the message, or null if not supported by the message implementation.
            </summary>
        </member>
        <member name="F:TinyMessenger.TinyMessageBase._Sender">
            <summary>
            Store a WeakReference to the sender just in case anyone is daft enough to
            keep the message around and prevent the sender from being collected.
            </summary>
        </member>
        <member name="M:TinyMessenger.TinyMessageBase.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MessageBase class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
        </member>
        <member name="P:TinyMessenger.TinyMessageBase.Sender">
            <summary>
            The sender of the message, or null if not supported by the message implementation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.LoggedMessageBase.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MessageBase class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.InvalidateSciChartMessage">
            <summary>
            When published, causes the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> to queue up an asynchronous redraw 
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.InvalidateSciChartMessage.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MessageBase class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.ZoomExtentsMessage">
            <summary>
            When published, causes the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> to zoom to extents and redraw
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ZoomExtentsMessage.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MessageBase class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ZoomExtentsMessage.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ZoomExtentsMessage"/> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="zoomYOnly">if set to <c>true</c> zooms in the Y-direction only.</param>
        </member>
        <member name="P:Abt.Controls.SciChart.ZoomExtentsMessage.ZoomYOnly">
            <summary>
            If set to <c>true</c> zooms in the Y-direction only.
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.SciChartResizedMessage">
            <summary>
            Published by <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> after the chart surface resizes
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartResizedMessage.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MessageBase class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.SciChartRenderedMessage">
            <summary>
            Published by <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> immediately before the end of a render pass
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartRenderedMessage.#ctor(System.Object,Abt.Controls.SciChart.Services.IRenderContext2D)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.SciChartRenderedMessage"/> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="renderContext">The render context.</param>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartRenderedMessage.BitmapContext">
            <summary>
            OBSOLETE
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartRenderedMessage.RenderContext">
            <summary>
            Gets the RenderContext
            </summary>
        </member>
        <member name="T:TinyMessenger.GenericTinyMessage`1">
            <summary>
            Generic message with user specified content
            </summary>
            <typeparam name="TContent">Content type to store</typeparam>
        </member>
        <member name="M:TinyMessenger.GenericTinyMessage`1.#ctor(System.Object,`0)">
            <summary>
            Create a new instance of the GenericTinyMessage class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <param name="content">Contents of the message</param>
        </member>
        <member name="P:TinyMessenger.GenericTinyMessage`1.Content">
            <summary>
            Contents of the message
            </summary>
        </member>
        <member name="T:TinyMessenger.CancellableGenericTinyMessage`1">
            <summary>
            Basic "cancellable" generic message
            </summary>
            <typeparam name="TContent">Content type to store</typeparam>
        </member>
        <member name="M:TinyMessenger.CancellableGenericTinyMessage`1.#ctor(System.Object,`0,System.Action)">
            <summary>
            Create a new instance of the CancellableGenericTinyMessage class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <param name="content">Contents of the message</param>
            <param name="cancelAction">Action to call for cancellation</param>
        </member>
        <member name="P:TinyMessenger.CancellableGenericTinyMessage`1.Cancel">
            <summary>
            Cancel action
            </summary>
        </member>
        <member name="P:TinyMessenger.CancellableGenericTinyMessage`1.Content">
            <summary>
            Contents of the message
            </summary>
        </member>
        <member name="T:TinyMessenger.TinyMessageSubscriptionToken">
            <summary>
            Represents an active subscription to a message
            </summary>
        </member>
        <member name="M:TinyMessenger.TinyMessageSubscriptionToken.#ctor(TinyMessenger.ITinyMessengerHub,System.Type)">
            <summary>
            Initializes a new instance of the TinyMessageSubscriptionToken class.
            </summary>
        </member>
        <member name="M:TinyMessenger.TinyMessageSubscriptionToken.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:TinyMessenger.ITinyMessageSubscription">
            <summary>
            Represents a message subscription
            </summary>
        </member>
        <member name="M:TinyMessenger.ITinyMessageSubscription.ShouldAttemptDelivery(TinyMessenger.ITinyMessage)">
            <summary>
            Whether delivery should be attempted.
            </summary>
            <param name="message">Message that may potentially be delivered.</param>
            <returns>True - ok to send, False - should not attempt to send</returns>
        </member>
        <member name="M:TinyMessenger.ITinyMessageSubscription.Deliver(TinyMessenger.ITinyMessage)">
            <summary>
            Deliver the message
            </summary>
            <param name="message">Message to deliver</param>
        </member>
        <member name="P:TinyMessenger.ITinyMessageSubscription.SubscriptionToken">
            <summary>
            Token returned to the subscribed to reference this subscription
            </summary>
        </member>
        <member name="T:TinyMessenger.ITinyMessageProxy">
            <summary>
            Message proxy definition.
            
            A message proxy can be used to intercept/alter messages and/or
            marshall delivery actions onto a particular thread.
            </summary>
        </member>
        <member name="M:TinyMessenger.ITinyMessageProxy.Deliver(TinyMessenger.ITinyMessage,TinyMessenger.ITinyMessageSubscription)">
            <summary>
            Delivers the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="subscription">The subscription.</param>
            <remarks></remarks>
        </member>
        <member name="T:TinyMessenger.DefaultTinyMessageProxy">
            <summary>
            Default "pass through" proxy.
            
            Does nothing other than deliver the message.
            </summary>
        </member>
        <member name="M:TinyMessenger.DefaultTinyMessageProxy.Deliver(TinyMessenger.ITinyMessage,TinyMessenger.ITinyMessageSubscription)">
            <summary>
            Delivers the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="subscription">The subscription.</param>
            <remarks></remarks>
        </member>
        <member name="P:TinyMessenger.DefaultTinyMessageProxy.Instance">
            <summary>
            Singleton instance of the proxy.
            </summary>
        </member>
        <member name="T:TinyMessenger.TinyMessengerSubscriptionException">
            <summary>
            Thrown when an exceptions occurs while subscribing to a message type
            </summary>
        </member>
        <member name="M:TinyMessenger.TinyMessengerSubscriptionException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TinyMessenger.TinyMessengerSubscriptionException"/> class.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="reason">The reason.</param>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerSubscriptionException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TinyMessenger.TinyMessengerSubscriptionException"/> class.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="reason">The reason.</param>
            <param name="innerException">The inner exception.</param>
            <remarks></remarks>
        </member>
        <member name="T:TinyMessenger.TinyMessengerHub">
            <summary>
            Messenger hub responsible for taking subscriptions/publications and delivering of messages.
            </summary>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            All references are held with strong references
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with strong references
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Boolean,TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean,TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Unsubscribe``1(TinyMessenger.TinyMessageSubscriptionToken)">
            <summary>
            Unsubscribe from a particular message type.
            
            Does not throw an exception if the subscription is not found.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="subscriptionToken">Subscription token received from Subscribe</param>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Publish``1(``0)">
            <summary>
            Publish a message to any subscribers
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.PublishAsync``1(``0)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.PublishAsync``1(``0,System.AsyncCallback)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
            <param name="callback">AsyncCallback called on completion</param>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.WeakTinyMessageSubscription`1.#ctor(TinyMessenger.TinyMessageSubscriptionToken,System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the WeakTinyMessageSubscription class.
            </summary>
            <param name="subscriptionToken">The subscription token.</param>
            <param name="deliveryAction">The delivery action.</param>
            <param name="messageFilter">The message filter.</param>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.StrongTinyMessageSubscription`1.#ctor(TinyMessenger.TinyMessageSubscriptionToken,System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the TinyMessageSubscription class.
            </summary>
            <param name="subscriptionToken">The subscription token.</param>
            <param name="deliveryAction">The delivery action.</param>
            <param name="messageFilter">The message filter.</param>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.AxisCollection">
            <summary>
            Contains a collection of Axes and allows getting of axis by Id
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.AxisCollection"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisCollection.#ctor(System.Collections.Generic.IEnumerable{Abt.Controls.SciChart.IAxis})">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.AxisCollection"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisCollection.GetAxisById(System.String)">
            <summary>
            Gets the axis specified by Id, else null
            </summary>
            <param name="axisId"></param>
            <returns></returns>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisCollection.Default">
            <summary>
            Gets the default axis, which is equal to the axis with the <see cref="F:Abt.Controls.SciChart.AxisBase.DefaultAxisId"/>, else null
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisCollection.HasPrimaryAxis">
            <summary>
            Returns true if any of the Axes in the collection have <see cref="P:Abt.Controls.SciChart.AxisBase.IsPrimaryAxis"/> set to true
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisCollection.PrimaryAxis">
            <summary>
            Gets the primary axis in the collection. This is the first that has <see cref="P:Abt.Controls.SciChart.AxisBase.IsPrimaryAxis"/> set to true, or null if none exists. 
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ChartDataObject">
            <summary>
            Provides a ViewModel containing info about chart series, which can be bound to to create Rollover or legends
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartDataObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ChartDataObject"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartDataObject.#ctor(System.Collections.Generic.IEnumerable{Abt.Controls.SciChart.SeriesInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ChartDataObject"/> class.
            </summary>
            <param name="seriesInfos">The series infos.</param>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartDataObject.ShowVisibilityCheckboxes">
            <summary>
            Workaround - used by SciChartLegend items to bind to SciChartLegend.ShowVisibilityCheckboxes. This property is set as a proxy 
            by the SciChartLegend control itself and data-bound in the themes
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartDataObject.SeriesInfo">
            <summary>
            Gets or sets a collection of <see cref="P:Abt.Controls.SciChart.ChartDataObject.SeriesInfo"/> instances
            </summary>
            <value>The series info.</value>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.XySeriesInfo">
            <summary>
            Provides a ViewModel containing info about an Xy series, such as name, x, y values, color
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.SeriesInfo">
            <summary>
            Provides a ViewModel containing info about a series, such as name, value, color
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SeriesInfo.#ctor(Abt.Controls.SciChart.IRenderableSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.SeriesInfo"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.SeriesInfo.#ctor(Abt.Controls.SciChart.IRenderableSeries,System.String,System.IComparable,System.IComparable,System.Windows.Media.Color,Abt.Controls.SciChart.DataSeriesType)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.SeriesInfo"/> class.
            </summary>
            <param name="rSeries">The <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> that this SeriesInfo represents.</param>
            <param name="seriesName">Name of the series.</param>
            <param name="xValue">The X-value of the series.</param>
            <param name="yValue">The Y-value of the series.</param>
            <param name="seriesColor">Color of the series.</param>
            <param name="dataSeriesType">Type of the data series.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.SeriesInfo.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Abt.Controls.SciChart.SeriesInfo.IsVisible">
            <summary>
            Gets or sets whether the <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> that this <see cref="T:Abt.Controls.SciChart.SeriesInfo"/> represents is visible or not. 
            NOTE: Setting this value will show or hide the associated <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> and may be data-bound to
            </summary>
            <value>
            <c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Abt.Controls.SciChart.SeriesInfo.DataSeriesType">
            <summary>
            Gets or sets the type of the data series.
            </summary>
            <value>
            The type of the data series.
            </value>
        </member>
        <member name="P:Abt.Controls.SciChart.SeriesInfo.SeriesColor">
            <summary>
            Gets or sets the color of the series.
            </summary>
            <value>The color of the series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SeriesInfo.SeriesName">
            <summary>
            Gets or sets the name of the series.
            </summary>
            <value>The name of the series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SeriesInfo.Value">
            <summary>
            Gets or sets the Y-value.
            </summary>
            <value>The value.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SeriesInfo.YValue">
            <summary>
            Gets or sets the Y-value.
            </summary>
            <value>The value.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SeriesInfo.XValue">
            <summary>
            Gets or sets the X-value.
            </summary>
            <value>The value.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SeriesInfo.XyCoordinate">
            <summary>
            Gets or sets the xy coordinate in pixels of the data-point being inspected
            </summary>        
        </member>
        <member name="T:Abt.Controls.SciChart.OhlcSeriesInfo">
            <summary>
            Provides a ViewModel containing info about an OHLC series, such as name, open high low close values, color
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.OhlcSeriesInfo.#ctor(Abt.Controls.SciChart.IRenderableSeries,System.String,System.IComparable,System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.OhlcSeriesInfo"/> class.
            </summary>
            <param name="rSeries">The RenderableSeries instance that this <see cref="T:Abt.Controls.SciChart.SeriesInfo"/> is bound to.</param>
            <param name="seriesName">Name of the series.</param>
            <param name="xValue">The x value.</param>
            <param name="openValue">The open value.</param>
            <param name="highValue">The high value.</param>
            <param name="lowValue">The low value.</param>
            <param name="closeValue">The close value.</param>
            <param name="seriesColor">Color of the series.</param>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcSeriesInfo.OpenValue">
            <summary>
            Gets or sets the Open value.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcSeriesInfo.HighValue">
            <summary>
            Gets or sets the High value.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcSeriesInfo.LowValue">
            <summary>
            Gets or sets the Low value.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcSeriesInfo.CloseValue">
            <summary>
            Gets or sets the Close value.
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.BandSeriesInfo">
            <summary>
            Provides a ViewModel containing info about an Xyy series
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.BandSeriesInfo.#ctor(Abt.Controls.SciChart.IRenderableSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.BandSeriesInfo"/> class.
            </summary>
            <param name="rSeries">The <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/>.</param>
        </member>
        <member name="P:Abt.Controls.SciChart.BandSeriesInfo.IsFirstSeries">
            <summary>
            Gets or sets value indicates whether this is Up or Down line of the <see cref="T:Abt.Controls.SciChart.FastBandRenderableSeries"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.BandSeriesInfo.Y1Value">
            <summary>
            Gets or sets the Y1 value, which is used in the <see cref="T:Abt.Controls.SciChart.FastBandRenderableSeries"/>.
            </summary>
            <value>The value.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BandSeriesInfo.Xy1Coordinate">
            <summary>
            Gets or sets the xy coordinate in pixels of the data-point being inspected (for <see cref="T:Abt.Controls.SciChart.FastBandRenderableSeries"/> series)
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.BandSeriesInfo.Series1Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.FloatRange">
            <summary>
            Defines a range of type <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.Range`1">
            <summary>
            Abstract base implementation of <see cref="T:Abt.Controls.SciChart.IRange"/>, used throughout SciChart for visible, data and index range calculations
            </summary>
            <typeparam name="T">The typeparameter of the range, e.g. <see cref="T:System.Double"/></typeparam>
        </member>
        <member name="T:Abt.Controls.SciChart.IRange`1">
            <summary>
            Defines the generic interface to a Range (Min, Max), used throughout SciChart for visible, data and index range calculations
            </summary>
            <typeparam name="T">The Type Parameter, expected types are Double, DateTime etc... </typeparam>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.IRange">
            <summary>
            Defines the base interface to a Range (Min, Max), used throughout SciChart for visible, data and index range calculations
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IRange.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Abt.Controls.SciChart.DoubleRange"/>, which are used internally for calculations
            </summary>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Abt.Controls.SciChart.DateRange"/> instances, returns a new <see cref="T:Abt.Controls.SciChart.DoubleRange"/> with the Min and Max Ticks</example>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IRange.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Abt.Controls.SciChart.IRange"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IRange.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IRange.SetMinMaxWithLimit(System.Double,System.Double,Abt.Controls.SciChart.IRange)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IRange.ClipTo(Abt.Controls.SciChart.IRange)">
            <summary>
            Clips the current <see cref="T:Abt.Controls.SciChart.IRange"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IRange.IsValueWithinRange(System.IComparable)">
            <summary>
            Returns True if the value is within the Min and Max of the Range
            </summary>
            <param name="value">The value to test</param>
            <returns>True if the value is within the Min and Max of the Range</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.IRange.Min">
            <summary>
            Gets or sets the Min value of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRange.Max">
            <summary>
            Gets or sets the Max value of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRange.IsDefined">
            <summary>
            Gets whether this Range is defined
            </summary>
            <example>Min and Max are not equal to double.NaN, or DateTime.MinValue or DateTime.MaxValue</example>
        </member>
        <member name="P:Abt.Controls.SciChart.IRange.Diff">
            <summary>
            Gets the difference (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRange.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IRange`1.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and maxFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IRange`1.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange`1"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.IRange`1.Min">
            <summary>
            Gets or sets the Min value of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRange`1.Max">
            <summary>
            Gets or sets the Max value of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRange`1.Diff">
            <summary>
            Gets the Diff (Max - Min) of this range
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.Range`1"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.Range`1"/> class.
            </summary>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.ClipTo(Abt.Controls.SciChart.IRange{`0})">
            <summary>
            Clips the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Abt.Controls.SciChart.DoubleRange"/>, which are used internally for calculations
            </summary>
            <returns></returns>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Abt.Controls.SciChart.DateRange"/> instances, returns a new <see cref="T:Abt.Controls.SciChart.DoubleRange"/> with the Min and Max Ticks</example>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange`1"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.SetMinMax(System.Double,System.Double,Abt.Controls.SciChart.IRange{`0})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange`1"/> with a maximum range limit, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.ClipTo(Abt.Controls.SciChart.IRange)">
            <summary>
            Clips the current <see cref="T:Abt.Controls.SciChart.IRange"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.IsValueWithinRange(System.IComparable)">
            <summary>
            Returns True if the value is within the Min and Max of the Range
            </summary>
            <param name="value">The value to test</param>
            <returns>
            True if the value is within the Min and Max of the Range
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.Abt#Controls#SciChart#IRange#SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.Abt#Controls#SciChart#IRange#SetMinMaxWithLimit(System.Double,System.Double,Abt.Controls.SciChart.IRange)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.Abt#Controls#SciChart#IRange#GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Abt.Controls.SciChart.IRange"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The max fraction.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.Equals(System.Object)">
            <summary>
            Compares Min and Max values to determine whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Range`1.Equals(Abt.Controls.SciChart.IRange{`0})">
            <summary>
            Compares Min and Max values to determine whether the specified <see cref="T:Abt.Controls.SciChart.IRange`1"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Abt.Controls.SciChart.IRange`1"/> to compare with the current <see cref="T:Abt.Controls.SciChart.IRange`1"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Abt.Controls.SciChart.IRange`1"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.Range`1.IsDefined">
            <summary>
            Gets whether this Range is defined
            </summary>
            <example>Min and Max are not equal to double.NaN, or DateTime.MinValue or DateTime.MaxValue</example>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.Range`1.Abt#Controls#SciChart#IRange#Min">
            <summary>
            Gets or sets the Min value of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Range`1.Abt#Controls#SciChart#IRange#Max">
            <summary>
            Gets or sets the Max value of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Range`1.Abt#Controls#SciChart#IRange#Diff">
            <summary>
            Gets the difference (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Range`1.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.Range`1.Min">
            <summary>
            Gets or sets the Min value of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Range`1.Max">
            <summary>
            Gets or sets the Max value of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Range`1.Diff">
            <summary>
            Gets the Diff (Max - Min) of this range
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.FloatRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.FloatRange"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.FloatRange.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.FloatRange"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.FloatRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.FloatRange.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.FloatRange.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Abt.Controls.SciChart.DoubleRange"/>, which are used internally for calculations
            </summary>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Abt.Controls.SciChart.DateRange"/> instances, returns a new <see cref="T:Abt.Controls.SciChart.DoubleRange"/> with the Min and Max Ticks</example>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.FloatRange.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.FloatRange.SetMinMax(System.Double,System.Double,Abt.Controls.SciChart.IRange{System.Single})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.FloatRange.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.FloatRange.ClipTo(Abt.Controls.SciChart.IRange{System.Single})">
            <summary>
            Clips the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.FloatRange.Diff">
            <summary>
            Gets the difference (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FloatRange.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.IndexRange">
            <summary>
            Defines a range used to specify array indices to another series
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IndexRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.IndexRange"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IndexRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.IndexRange"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IndexRange.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IndexRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IndexRange.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Abt.Controls.SciChart.DoubleRange"/>, which are used internally for calculations
            </summary>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Abt.Controls.SciChart.DateRange"/> instances, returns a new <see cref="T:Abt.Controls.SciChart.DoubleRange"/> with the Min and Max Ticks</example>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IndexRange.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange`1"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IndexRange.SetMinMax(System.Double,System.Double,Abt.Controls.SciChart.IRange{System.Int32})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange`1"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IndexRange.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IndexRange.ClipTo(Abt.Controls.SciChart.IRange{System.Int32})">
            <summary>
            Clips the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.IndexRange.Diff">
            <summary>
            Gets the Diff (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IndexRange.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.Int32AxisDelta">
            <summary>
            Defines an Int32 Delta, which provides Major and Minor deltas as used in <see cref="T:Abt.Controls.SciChart.NumericAxis"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IAxisDelta`1">
            <summary>
            Defines the Typed interface to a Delta type, which defines Major and Minor deltas as used in <see cref="T:Abt.Controls.SciChart.AxisBase"/>
            </summary>
            <typeparam name="T">The typeparameter of this Delta, e.g. <see cref="T:System.Double"/></typeparam>
        </member>
        <member name="T:Abt.Controls.SciChart.IAxisDelta">
            <summary>
            Defines the interface to a Delta type, which defines Major and Minor deltas as used in <see cref="T:Abt.Controls.SciChart.AxisBase"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxisDelta.MajorDelta">
            <summary>
            Gets or sets the Major Delta
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxisDelta.MinorDelta">
            <summary>
            Gets or sets the Minor Delta
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxisDelta`1.MajorDelta">
            <summary>
            Gets or sets the Major Delta
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxisDelta`1.MinorDelta">
            <summary>
            Gets or sets the Minor Delta
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Int32AxisDelta.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.Int32AxisDelta"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Int32AxisDelta.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.Int32AxisDelta"/> class.
            </summary>
            <param name="minorDelta">The minor delta.</param>
            <param name="majorDelta">The major delta.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Int32AxisDelta.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Int32AxisDelta.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Int32AxisDelta.Equals(Abt.Controls.SciChart.Int32AxisDelta)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Int32AxisDelta.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Int32AxisDelta.op_Equality(Abt.Controls.SciChart.Int32AxisDelta,Abt.Controls.SciChart.Int32AxisDelta)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Int32AxisDelta.op_Inequality(Abt.Controls.SciChart.Int32AxisDelta,Abt.Controls.SciChart.Int32AxisDelta)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Int32AxisDelta.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.Int32AxisDelta.MajorDelta">
            <summary>
            Gets or sets the major delta.
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.Int32AxisDelta.MinorDelta">
            <summary>
            Gets or sets the minor delta.
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.Int64Range">
            <summary>
            Defines a Range of type Int64
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Int64Range.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.IntegerRange"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Int64Range.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.IntegerRange"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Int64Range.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Int64Range.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Int64Range.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Abt.Controls.SciChart.DoubleRange"/>, which are used internally for calculations
            </summary>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Abt.Controls.SciChart.DateRange"/> instances, returns a new <see cref="T:Abt.Controls.SciChart.DoubleRange"/> with the Min and Max Ticks</example>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Int64Range.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange`1"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Int64Range.SetMinMax(System.Double,System.Double,Abt.Controls.SciChart.IRange{System.Int64})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange`1"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Int64Range.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Int64Range.ClipTo(Abt.Controls.SciChart.IRange{System.Int64})">
            <summary>
            Clips the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.Int64Range.Diff">
            <summary>
            Gets the Diff (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Int64Range.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.IntegerRange">
            <summary>
            Defines a Range of type Integer
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IntegerRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.IntegerRange"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IntegerRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.IntegerRange"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IntegerRange.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IntegerRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IntegerRange.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Abt.Controls.SciChart.DoubleRange"/>, which are used internally for calculations
            </summary>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Abt.Controls.SciChart.DateRange"/> instances, returns a new <see cref="T:Abt.Controls.SciChart.DoubleRange"/> with the Min and Max Ticks</example>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IntegerRange.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange`1"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IntegerRange.SetMinMax(System.Double,System.Double,Abt.Controls.SciChart.IRange{System.Int32})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange`1"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IntegerRange.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IntegerRange.ClipTo(Abt.Controls.SciChart.IRange{System.Int32})">
            <summary>
            Clips the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.IntegerRange.Diff">
            <summary>
            Gets the Diff (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IntegerRange.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.DecimalRange">
            <summary>
            Defines a range of type <see cref="T:System.Decimal"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DecimalRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.DecimalRange"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DecimalRange.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.DecimalRange"/> class.
            </summary>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DecimalRange.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DecimalRange.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Abt.Controls.SciChart.DoubleRange"/>, which are used internally for calculations
            </summary>
            <returns></returns>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Abt.Controls.SciChart.DateRange"/> instances, returns a new <see cref="T:Abt.Controls.SciChart.DoubleRange"/> with the Min and Max Ticks</example>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DecimalRange.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DecimalRange.SetMinMax(System.Double,System.Double,Abt.Controls.SciChart.IRange{System.Decimal})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DecimalRange.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DecimalRange.ClipTo(Abt.Controls.SciChart.IRange{System.Decimal})">
            <summary>
            Clips the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.DecimalRange.Diff">
            <summary>
            Gets the difference (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DecimalRange.IsZero">
            <summary>
            Gets a value indicating whether this instance is zero.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.RangeFactory">
            <summary>
            Helper class to instantiate IRange derived types, where strong typing is required underneath but the runtime type of IRange is not known
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.RangeFactory.NewWithMinMax(Abt.Controls.SciChart.IRange,System.IComparable,System.IComparable)">
            <summary>
            Creates a new <see cref="T:Abt.Controls.SciChart.IRange"/> derived instance of the same type as originalRange with the specified Min and Max
            </summary>
            <param name="originalRange">The original range to use as a reference</param>
            <param name="min">The min value of the new range</param>
            <param name="max">The max value of the new range</param>
            <returns>A new <see cref="T:Abt.Controls.SciChart.IRange"/> derived instance of the same type as originalRange</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.RangeFactory.NewWithMinMax(Abt.Controls.SciChart.IRange,System.Double,System.Double,Abt.Controls.SciChart.IRange)">
            <summary>
            Creates a new <see cref="T:Abt.Controls.SciChart.IRange"/> derived instance of the same type as originalRange with the specified Min and Max, with a Range Limit to clip min, max to.
            </summary>
            <param name="originalRange">The original range to use as a reference</param>
            <param name="min">The min value of the new range</param>
            <param name="max">The max value of the new range</param>
            <param name="rangeLimit">The range limit to clip Min and Max to.</param>
            <returns>A new <see cref="T:Abt.Controls.SciChart.IRange"/> derived instance of the same type as originalRange</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RangeFactory.NewRange(System.IComparable,System.IComparable)">
            <summary>
            Creates a new <see cref="T:Abt.Controls.SciChart.IRange"/> instance of the same type as the min, max range with the specified Min and Max
            </summary>
            <param name="min">The min value of the new range</param>
            <param name="max">The max value of the new range</param>
            <returns>A new <see cref="T:Abt.Controls.SciChart.IRange"/> derived instance of the same type as the input values</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.RangeFactory.NewRange(System.Type,System.IComparable,System.IComparable)">
            <summary>
            Creates a new <see cref="T:Abt.Controls.SciChart.IRange"/> instance of desired type, setting the min and max value
            </summary>
            <param name="rangeType">Type of the range to create, e.g. <see cref="T:Abt.Controls.SciChart.IndexRange"/> or <see cref="T:Abt.Controls.SciChart.DoubleRange"/>.</param>
            <param name="min">The min value of the new range</param>
            <param name="max">The max value of the new range</param>
            <returns>
            A new <see cref="T:Abt.Controls.SciChart.IRange"/> derived instance of the same type as the input values
            </returns>
        </member>
        <member name="T:Abt.Controls.SciChart.ISeriesColumn`1">
            <summary>
            Defines the interface to a generically typed series column in a <see cref="T:Abt.Controls.SciChart.DataSeries`2"/>
            </summary>
            <typeparam name="T">The underlying type of this <see cref="T:Abt.Controls.SciChart.ISeriesColumn`1"/></typeparam>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.ISeriesColumn">
            <summary>
            Defines the interface to a series column in a <see cref="T:Abt.Controls.SciChart.IDataSeries"/> derived type
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.ISeriesColumn.HasValues">
            <summary>
            Gets a value indicating whether this column has any values.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.ISeriesColumn.Count">
            <summary>
            Gets the count of values in this column
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ISeriesColumn`1.GetMinimum">
            <summary>
            Gets the minimum value of the <see cref="T:Abt.Controls.SciChart.ISeriesColumn`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.ISeriesColumn`1.GetMaximum">
            <summary>
            Gets the maximum value of the <see cref="T:Abt.Controls.SciChart.ISeriesColumn`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.ISeriesColumn`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the column
            </summary>
            <param name="values">The values.</param>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.DataSeriesUpdate">
            <summary>
            Constants to define the type of update when the <see cref="E:Abt.Controls.SciChart.IDataSeries.DataSeriesChanged"/> event is raised
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DataSeriesUpdate.DataChanged">
            <summary>
            The underlying data has changed
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DataSeriesUpdate.DataSeriesCleared">
            <summary>
            The Data Series has been cleared
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DataSeriesUpdate.DataSetCleared">
            <summary>
            The DataSeriesSset has been cleared
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.DataSeriesChangedEventArgs">
            <summary>
            Event args used by event <see cref="E:Abt.Controls.SciChart.IDataSeries.DataSeriesChanged"/> event
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesChangedEventArgs.#ctor(Abt.Controls.SciChart.DataSeriesUpdate)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.DataSeriesChangedEventArgs"/> class.
            </summary>
            <param name="dataSeriesUpdate">The data series update type.</param>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeriesChangedEventArgs.DataSeriesUpdate">
            <summary>
            Gets the type of <see cref="T:Abt.Controls.SciChart.IDataSeries"/> Update
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.DataSeriesColumn">
            <summary>
            Defines enumeration constants for accessing columns in a <see cref="T:Abt.Controls.SciChart.DataSeries`2"/>
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DataSeriesColumn.Close">
            <summary>
            The close column
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DataSeriesColumn.Y">
            <summary>
            The Y-Axis column
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.DataSeriesSet`2">
            <summary>
            Defines a strongly typed dataset which the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> can bind to via the <see cref="P:Abt.Controls.SciChart.SciChartSurface.DataSet"/> property
            </summary>
            <typeparam name="TX">The X Type parameter, e.g. <see cref="T:System.DateTime"/></typeparam>
            <typeparam name="TY">The Y Type parameter, e.g. <see cref="T:System.Double"/></typeparam>
        </member>
        <member name="T:Abt.Controls.SciChart.IDataSeriesSet`2">
            <summary>
            Specifies the interface to a generically typed <see cref="T:Abt.Controls.SciChart.DataSeriesSet`2"/>
            </summary>
            <typeparam name="TX">The type of the X-Data.</typeparam>
            <typeparam name="TY">The type of the Y-Data.</typeparam>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.IDataSeriesSet">
            <summary>
            Specifies the interface to a <see cref="T:Abt.Controls.SciChart.DataSeriesSet`2"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.ISuspendable">
            <summary>
            Types which implement ISuspendable can have updates suspended/resumed. Useful for batch operations 
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ISuspendable.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>The disposable Update Suspender</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.ISuspendable.ResumeUpdates(Abt.Controls.SciChart.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ISuspendable.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISuspendable.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeriesSet.Get(System.Int32)">
            <summary>
            An optimized getter to return the <see cref="T:Abt.Controls.SciChart.IDataSeries"/> at the specified index
            </summary>
            <param name="index">The index to get at</param>
            <returns>The <see cref="T:Abt.Controls.SciChart.IDataSeries"/> instance at this index</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeriesSet.Add(Abt.Controls.SciChart.IDataSeries)">
            <summary>
            Adds the <see cref="T:Abt.Controls.SciChart.IDataSeries"/> to the Dataset
            </summary>
            <param name="series">The <see cref="T:Abt.Controls.SciChart.IDataSeries"/> to add</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeriesSet.Remove(Abt.Controls.SciChart.IDataSeries)">
            <summary>
            Removes the <see cref="T:Abt.Controls.SciChart.IDataSeries"/> from the DataSet
            </summary>
            <param name="series">The <see cref="T:Abt.Controls.SciChart.IDataSeries"/> to remove</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeriesSet.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Abt.Controls.SciChart.IDataSeries"/> at the specified index
            </summary>
            <param name="index">The index to remove at</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeriesSet.Insert(System.Int32,Abt.Controls.SciChart.IDataSeries)">
            <summary>
            Inserts the <see cref="T:Abt.Controls.SciChart.IDataSeries"/> at the specified index
            </summary>
            <param name="index">The index to insert at</param>
            <param name="dataSeries">The <see cref="T:Abt.Controls.SciChart.IDataSeries"/> to insert</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeriesSet.Clear">
            <summary>
            Clears the DataSet
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeriesSet.AlignToX(Abt.Controls.SciChart.IRange)">
            <summary>
            Aligns the specified <see cref="T:Abt.Controls.SciChart.IRange"/> to the X-Axis data points
            </summary>
            <remarks>VisibleRanges must be aligned in the X-Axis for correct rendering. This method provides that functionality.</remarks>
            <example>Given a <see cref="T:Abt.Controls.SciChart.DataSeriesSet`2"/> with BaseXValues of 0,1,2,3,4,5,6,7,8,9, passing a VisibleRange of 1.2,7.9 will return an aligned ranve of 1.0,8.0</example>
            <param name="range">The input <see cref="T:Abt.Controls.SciChart.IRange"/></param>
            <returns>The output range</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeriesSet.IsXAligned(Abt.Controls.SciChart.IRange)">
            <summary>
            Returns True if the <see cref="T:Abt.Controls.SciChart.IRange"/> passed in is aligned to X-Axis data points
            </summary>
            <param name="range">The input range</param>
            <exception cref="T:System.InvalidOperationException">Throws if the IRange type does not match the base X Series</exception>
            <returns>True if the IRange is aligned to X-Axis</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeriesSet.GetWindowedYRange(Abt.Controls.SciChart.IntegerRange)">
            <summary>
            Gets the YRange of the data (min, max of all series) in the integer point range (indices to data points)
            </summary>
            <param name="pointRange">The indices to datapoints in each series</param>
            <returns>The YRange of the data in this window</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeriesSet.InvalidateParentSurface(Abt.Controls.SciChart.RangeMode)">
            <summary>
            Triggers a redraw on the parent surface with the specified RangeMode
            </summary>
            <param name="rangeMode">The <see cref="T:Abt.Controls.SciChart.RangeMode"/> specifying how to redraw the parent surface</param>
        </member>
        <member name="E:Abt.Controls.SciChart.IDataSeriesSet.SeriesUpdated">
            <summary>
            Event raised whenever a child <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> is updated
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeriesSet.YRange">
            <summary>
            Gets the total extents of the DataRange in the Y-Direction for all child <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeriesSet.XRange">
            <summary>
            Gets the total extents of the DataRange in the X-Direction for all child <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeriesSet.Count">
            <summary>
            Gets the number of child <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeriesSet.BaseXValues">
            <summary>
            Gets the first <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/>.XValues in the dataset. 
            This forms the base X-Values which are used as a marker for all transformations on the X-Axis
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeriesSet.IsBaseXValuesSorted">
            <summary>
            Gets whether the first <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> has sorted X-Values. 
            NOTE: Sorted data allows SciChart to take hold of a host of performance optimizations. If at all possible, try to keep your data sorted
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeriesSet`2.AddSeries">
            <summary>
            Creates and adds a new Xy <see cref="T:Abt.Controls.SciChart.IXyDataSeries`2"/> to the <see cref="T:Abt.Controls.SciChart.IDataSeriesSet`2"/>
            </summary>
            <returns>The new <see cref="T:Abt.Controls.SciChart.IXyDataSeries`2"/> instance</returns>
            <exception cref="T:System.InvalidOperationException">Will throw if any existing series type is a FIFO series</exception>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeriesSet`2.AddSeries``1">
            <summary>
            Creates and adds a new <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> derived type to the <see cref="T:Abt.Controls.SciChart.IDataSeriesSet`2"/>. 
            Using the TypeParam as per the example you can create and add a specific sub-type of dataseries
            </summary>
            <example>
            <code>
            // Create a new DataSeriesSet
            var dataSeriesSet = new DataSeriesSet&lt;DateTime, Double&gt;();
            // Create a new XyDataSeries
            var xyDataSeries = dataSeriesSet.AddSeries&lt;XyDataSeries&lt;DateTime, double&gt;&gt;();
            </code>
            </example>
            <returns>The new <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> instance</returns>
            <exception cref="T:System.InvalidOperationException">Will throw if any existing series type is a FIFO series</exception>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeriesSet`2.AddFifoSeries(System.Int32)">
            <summary>
            Creates and adds a new FIFO Series with the specified size to the <see cref="T:Abt.Controls.SciChart.IDataSeriesSet`2"/>
            </summary>
            <param name="size">The size of the FIFO series</param>
            <exception cref="T:System.InvalidOperationException">Will throw if any existing series type is not a FIFO series</exception>
            <returns>The new <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> instance</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeriesSet`2.RemoveWhere(System.Func{Abt.Controls.SciChart.IDataSeries{`0,`1},System.Boolean})">
            <summary>
            Removes <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> which are matched by the predicate
            </summary>
            <param name="predicate">The predicate delegate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IDataSeriesSet`2.RemoveSeries(Abt.Controls.SciChart.IDataSeries{`0,`1})">
            <summary>
            Removes the specified <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> from the IDataSeriesSet
            </summary>
            <param name="series">The series.</param>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.IDataSeriesSet`2.Count">
            <summary>
            Gets the count of <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> contained by this IDataSeriesSet
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.DataSeriesSet`2"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.IndexOf(Abt.Controls.SciChart.IDataSeries{`0,`1})">
            <summary>
            Determines the index of a specific <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.Insert(System.Int32,Abt.Controls.SciChart.IDataSeries{`0,`1})">
            <summary>
            Inserts an <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.Insert(System.Int32,Abt.Controls.SciChart.IDataSeries)">
            <summary>
            Inserts the <see cref="T:Abt.Controls.SciChart.IDataSeries"/> at the specified index
            </summary>
            <param name="index">The index to insert at</param>
            <param name="dataSeries">The <see cref="T:Abt.Controls.SciChart.IDataSeries"/> to insert</param>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.Add(Abt.Controls.SciChart.IDataSeries)">
            <summary>
            Adds the <see cref="T:Abt.Controls.SciChart.IDataSeries"/> to the Dataset
            </summary>
            <param name="series">The <see cref="T:Abt.Controls.SciChart.IDataSeries"/> to add</param>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.Remove(Abt.Controls.SciChart.IDataSeries)">
            <summary>
            Removes the <see cref="T:Abt.Controls.SciChart.IDataSeries"/> from the DataSet
            </summary>
            <param name="series">The <see cref="T:Abt.Controls.SciChart.IDataSeries"/> to remove</param>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.AddSeries">
            <summary>
            Creates and adds a new Xy <see cref="T:Abt.Controls.SciChart.IXyDataSeries`2"/> to the <see cref="T:Abt.Controls.SciChart.IDataSeriesSet`2"/>
            </summary>
            <returns>The new <see cref="T:Abt.Controls.SciChart.IXyDataSeries`2"/> instance</returns>
            <exception cref="T:System.InvalidOperationException">Will throw if any existing series type is a FIFO series</exception>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.AddSeries``1">
            <summary>
            Creates and adds a new <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> derived type to the <see cref="T:Abt.Controls.SciChart.IDataSeriesSet`2"/>. 
            Using the TypeParam as per the example you can create and add a specific sub-type of dataseries
            </summary>
            <example>
            <code>
            // Create a new DataSeriesSet
            var dataSeriesSet = new DataSeriesSet&lt;DateTime, Double&gt;();
            // Create a new XyDataSeries
            var xyDataSeries = dataSeriesSet.AddSeries&lt;XyDataSeries&lt;DateTime, double&gt;&gt;();
            </code>
            </example>
            <returns>The new <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> instance</returns>
            <exception cref="T:System.InvalidOperationException">Will throw if any existing series type is a FIFO series</exception>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.AddFifoSeries(System.Int32)">
            <summary>
            Creates and adds a new FIFO Series with the specified size to the <see cref="T:Abt.Controls.SciChart.IDataSeriesSet`2"/>
            </summary>
            <param name="size">The size of the FIFO series</param>
            <exception cref="T:System.InvalidOperationException">Will throw if any existing series type is not a FIFO series</exception>
            <returns>The new <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> instance</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.RemoveWhere(System.Func{Abt.Controls.SciChart.IDataSeries{`0,`1},System.Boolean})">
            <summary>
            Removes <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> instances which are matched by the predicate
            </summary>
            <param name="predicate">The predicate delegate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.RemoveSeries(Abt.Controls.SciChart.IDataSeries{`0,`1})">
            <summary>
            Removes the specified <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> from the data set
            </summary>
            <param name="dataSeries">The <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> instance.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> instances.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection of <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> instances.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.Add(Abt.Controls.SciChart.IDataSeries{`0,`1})">
            <summary>
            Adds an <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The IDataSeries to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.AddRange(System.Collections.Generic.IEnumerable{Abt.Controls.SciChart.IDataSeries{`0,`1}})">
            <summary>
            Adds a collection of <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> instances to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="items">The <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> instances to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.Abt#Controls#SciChart#IDataSeriesSet#Clear">
            <summary>
            Clears the DataSet
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.IsXAligned(Abt.Controls.SciChart.IRange)">
            <summary>
            Returns True if the <see cref="T:Abt.Controls.SciChart.IRange"/> passed in is aligned to X-Axis data points
            </summary>
            <param name="range">The input range</param>
            <returns>True if the IRange is aligned to X-Axis</returns>
            <exception cref="T:System.InvalidOperationException">Throws if the IRange type does not match the base X Series</exception>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.GetWindowedYRange(Abt.Controls.SciChart.IntegerRange)">
            <summary>
            Gets the Y-Data Range for the given window on the X-Axis. 
            Input point range defines the indices to the X-Data
            </summary>
            <param name="pointRange">the indices to the X-Data</param>
            <returns>The Y-Data Range in the input X-Range</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.InvalidateParentSurface(Abt.Controls.SciChart.RangeMode)">
            <summary>
            Triggers a redraw on the parent surface with the specified RangeMode
            </summary>
            <param name="rangeMode">The <see cref="T:Abt.Controls.SciChart.RangeMode"/> specifying how to redraw the parent surface</param>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.AlignToX(Abt.Controls.SciChart.IRange)">
            <summary>
            Aligns the specified <see cref="T:Abt.Controls.SciChart.IRange"/> to the X-Axis data points
            </summary>
            <param name="range">The input <see cref="T:Abt.Controls.SciChart.IRange"/></param>
            <returns>The output range</returns>
            <example>Given a <see cref="T:Abt.Controls.SciChart.DataSeriesSet`2"/> with BaseXValues of 0,1,2,3,4,5,6,7,8,9, passing a VisibleRange of 1.2,7.9 will return an aligned ranve of 1.0,8.0</example>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.Clear">
            <summary>
            Clears the DataSet
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.Contains(Abt.Controls.SciChart.IDataSeries{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains the IDataSeries
            </summary>
            <param name="item">The IDataSeries to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.CopyTo(Abt.Controls.SciChart.IDataSeries{`0,`1}[],System.Int32)">
            <summary>
            Copies the <see cref="T:Abt.Controls.SciChart.DataSeriesSet`2"/> to an array of type <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/>
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.Remove(Abt.Controls.SciChart.IDataSeries{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.Get(System.Int32)">
            <summary>
            An optimized getter to return the <see cref="T:Abt.Controls.SciChart.IDataSeries"/> at the specified index
            </summary>
            <param name="index">The index to get at</param>
            <returns>
            The <see cref="T:Abt.Controls.SciChart.IDataSeries"/> instance at this index
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned <see cref="T:Abt.Controls.SciChart.IUpdateSuspender"/> is disposed, when a final draw call will be issued
            </summary>
            <returns>The disposable <see cref="T:Abt.Controls.SciChart.IUpdateSuspender"/> which manages suspension of the target</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.ResumeUpdates(Abt.Controls.SciChart.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.DecrementSuspend">
            <summary>
            Called by <see cref="T:Abt.Controls.SciChart.IUpdateSuspender"/> each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.OnSeriesUpdated(Abt.Controls.SciChart.DataSetUpdatedEventArgs)">
            <summary>
            Raises the <see cref="E:Abt.Controls.SciChart.IDataSeriesSet.SeriesUpdated"/> event.
            </summary>
            <param name="e">The <see cref="T:Abt.Controls.SciChart.DataSetUpdatedEventArgs"/> instance containing the event data.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSeriesSet`2.System#Collections#Generic#IEnumerable{Abt#Controls#SciChart#IDataSeries}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of series
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
            <remarks></remarks>
        </member>
        <member name="E:Abt.Controls.SciChart.DataSeriesSet`2.SeriesUpdated">
            <summary>
            Event raised whenever a child <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> is updated
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeriesSet`2.InnerSeries">
            <summary>
            Gets or sets the inner collection of <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> 
            </summary>
            <value>The inner series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeriesSet`2.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
              </returns>
              
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeriesSet`2.BaseXValues">
            <summary>
            Gets the first <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/>.XValues in the dataset.
            This forms the base X-Values which are used as a marker for all transformations on the X-Axis
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeriesSet`2.IsBaseXValuesSorted">
            <summary>
            Gets whether the first <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> has sorted X-Values.
            NOTE: Sorted data allows SciChart to take hold of a host of performance optimizations. If at all possible, try to keep your data sorted
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeriesSet`2.Count">
            <summary>
            Gets the count of child <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeriesSet`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeriesSet`2.XRange">
            <summary>
            Gets the total extents of the DataRange in the X-Direction for all child <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeriesSet`2.YRange">
            <summary>
            Gets the total extents of the DataRange in the Y-Direction for all child <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSeriesSet`2.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.DataSeriesType">
            <summary>
            Enumeration constants to define the Type of <see cref="T:Abt.Controls.SciChart.DataSeries`2"/>
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DataSeriesType.Xy">
            <summary>
            The <see cref="T:Abt.Controls.SciChart.DataSeries`2"/> contains Xy data
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DataSeriesType.Ohlc">
            <summary>
            The <see cref="T:Abt.Controls.SciChart.OhlcDataSeries`2"/> contains OHLC data
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DataSeriesType.Xyy">
            <summary>
            The <see cref="T:Abt.Controls.SciChart.XyyDataSeries`2"/> contains Xyy data
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.DateRange">
            <summary>
            Defines a Range of Type DateTime
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DateRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.DateRange"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DateRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.DateRange"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DateRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DateRange.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DateRange.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Abt.Controls.SciChart.DoubleRange"/>, which are used internally for calculations
            </summary>
            <returns></returns>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Abt.Controls.SciChart.DateRange"/> instances, returns a new <see cref="T:Abt.Controls.SciChart.DoubleRange"/> with the Min and Max Ticks</example>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DateRange.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange`1"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DateRange.SetMinMax(System.Double,System.Double,Abt.Controls.SciChart.IRange{System.DateTime})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange`1"/> with a maximum range limit, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DateRange.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DateRange.ClipTo(Abt.Controls.SciChart.IRange{System.DateTime})">
            <summary>
            Clips the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.DateRange.Diff">
            <summary>
            Gets the difference (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DateRange.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.DoubleAxisDelta">
            <summary>
            Defines a Double Delta, which provides Major and Minor deltas as used in <see cref="T:Abt.Controls.SciChart.NumericAxis"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleAxisDelta.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.DoubleAxisDelta"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleAxisDelta.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.DoubleAxisDelta"/> class.
            </summary>
            <param name="minorDelta">The minor delta.</param>
            <param name="majorDelta">The major delta.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleAxisDelta.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleAxisDelta.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleAxisDelta.Equals(Abt.Controls.SciChart.DoubleAxisDelta)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleAxisDelta.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleAxisDelta.op_Equality(Abt.Controls.SciChart.DoubleAxisDelta,Abt.Controls.SciChart.DoubleAxisDelta)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleAxisDelta.op_Inequality(Abt.Controls.SciChart.DoubleAxisDelta,Abt.Controls.SciChart.DoubleAxisDelta)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleAxisDelta.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DoubleAxisDelta.MajorDelta">
            <summary>
            Gets or sets the major delta.
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DoubleAxisDelta.MinorDelta">
            <summary>
            Gets or sets the minor delta.
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.DoubleRange">
            <summary>
            Defines a range of type <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.DoubleRange"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleRange.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.DoubleRange"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleRange.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleRange.AsDoubleRange">
            <summary>
            Converts this range to a <see cref="T:Abt.Controls.SciChart.DoubleRange"/>, which are used internally for calculations
            </summary>
            <example>For numeric ranges, the conversion is simple. For <see cref="T:Abt.Controls.SciChart.DateRange"/> instances, returns a new <see cref="T:Abt.Controls.SciChart.DoubleRange"/> with the Min and Max Ticks</example>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleRange.SetMinMax(System.Double,System.Double)">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange"/>, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleRange.SetMinMax(System.Double,System.Double,Abt.Controls.SciChart.IRange{System.Double})">
            <summary>
            Sets the Min, Max values on the <see cref="T:Abt.Controls.SciChart.IRange"/> with a max range to clip values to, returning this instance after modification
            </summary>
            <param name="min">The new Min value.</param>
            <param name="max">The new Max value.</param>
            <param name="maxRange">The max range, which is used to clip values.</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleRange.GrowBy(System.Double,System.Double)">
            <summary>
            Grows the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> by the min and max fraction, returning this instance after modification
            </summary>
            <param name="minFraction">The Min fraction to grow by. For example, Min = -10 and minFraction = 0.1 will result in the new Min = -11</param>
            <param name="maxFraction">The Max fraction to grow by. For example, Max = 10 and minFraction = 0.2 will result in the new Max = 12</param>
            <returns>This instance, after the operation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DoubleRange.ClipTo(Abt.Controls.SciChart.IRange{System.Double})">
            <summary>
            Clips the current <see cref="T:Abt.Controls.SciChart.IRange`1"/> to a maxmimum range 
            </summary>
            <param name="maximumRange">The Maximum Range</param>
            <returns>This instance, after the operation</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.DoubleRange.Diff">
            <summary>
            Gets the difference (Max - Min) of this range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DoubleRange.IsZero">
            <summary>
            Gets whether the range is Zero, where Max equals Min
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.Model.Series.IPoint">
            <summary>
            Defines the interface to a 2D point
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Model.Series.IPoint.X">
            <summary>
            Gets the X-Value
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Model.Series.IPoint.Y">
            <summary>
            Gets the Y-value
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.RangeMode">
            <summary>
            Defines enumeration constants for a programmatic redraw of the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RangeMode.None">
            <summary>
            Perform no ranging, just redraw
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RangeMode.ZoomToFit">
            <summary>
            Perform full X and Y ranging on redraw
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RangeMode.ZoomToFitY">
            <summary>
            Perform just Y ranging on redraw
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IPointSeries">
            <summary>
            Defines the interface to a Point Series, a subset of X,Y data used to render points to the screen
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IPointSeries.GetYRange">
            <summary>
            Gets the min, max range in the Y-Direction
            </summary>
            <returns>A <see cref="T:Abt.Controls.SciChart.DoubleRange"/> defining the min, max in the Y-direction</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.IPointSeries.Count">
            <summary>
            Gets the count of the PointSeries
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IPointSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Windows.Point"/> at the specified index.
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IOhlcDataSeries">
            <summary>
            Defines the interface to an OHLC DataSeries, a series containing Open, High, Low, Close data-points
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IOhlcDataSeries.OpenValues">
            <summary>
            Gets the Open Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IOhlcDataSeries.HighValues">
            <summary>
            Gets the High Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IOhlcDataSeries.LowValues">
            <summary>
            Gets the Low Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IOhlcDataSeries.CloseValues">
            <summary>
            Gets the Close Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
            <remarks>Close equates to Y Values in either OHLC or simple XY dataseries</remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.IOhlcDataSeries`2">
            <summary>
            Defines the typed interface to an OHLC DataSeries, a series containing Open, High, Low, Close data-points
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IOhlcDataSeries`2.Append(`0,`1,`1,`1,`1)">
            <summary>
            Appends an Open, High, Low, Close point to the series
            </summary>
            <param name="x">The X value</param>
            <param name="open">The Open value</param>
            <param name="high">The High value</param>
            <param name="low">The Low value</param>
            <param name="close">The Close value</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IOhlcDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends a list of Open, High, Low, Close points to the series
            </summary>
            <param name="x">The list of X values</param>
            <param name="open">The list of Open values</param>
            <param name="high">The list of High values</param>
            <param name="low">The list of Low values</param>
            <param name="close">The list of Close values</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IOhlcDataSeries`2.Update(`0,`1,`1,`1,`1)">
            <summary>
            Updates an Open, High, Low, Close point specified by the X-Value passed in. 
            </summary>
            <param name="x">The X Value to key on when updating</param>
            <param name="open">The Open value</param>
            <param name="high">The High value</param>
            <param name="low">The Low value</param>
            <param name="close">The Close value</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the x value is not in the DataSeries</exception>
        </member>
        <member name="M:Abt.Controls.SciChart.IOhlcDataSeries`2.Insert(System.Int32,`0,`1,`1,`1,`1)">
            <summary>
            Inserts an Open, High, Low, Close point at the specified index
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X value</param>
            <param name="open">The Open value</param>
            <param name="high">The High value</param>
            <param name="low">The low value</param>
            <param name="close">The close value</param>
        </member>
        <member name="P:Abt.Controls.SciChart.IOhlcDataSeries`2.OpenValues">
            <summary>
            Gets the Open Values of this DataSeries, if the data is OHLC
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IOhlcDataSeries`2.HighValues">
            <summary>
            Gets the High Values of this DataSeries, if the data is OHLC
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IOhlcDataSeries`2.LowValues">
            <summary>
            Gets the Low Values of this DataSeries, if the data is OHLC
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IOhlcDataSeries`2.CloseValues">
            <summary>
            Gets the Close Values of this DataSeries, if the data is OHLC
            </summary>
            <remarks>Close equates to Y Values in either OHLC or simple XY dataseries</remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.ISeriesPoint`1">
            <summary>
            Defines the interface to a Series Point, an internally used structure which contains transformed points to render Y-values on the <see cref="T:Abt.Controls.SciChart.RenderSurface"/>
            </summary>
            <typeparam name="T">The Type of the Y-Values</typeparam>
        </member>
        <member name="P:Abt.Controls.SciChart.ISeriesPoint`1.Max">
            <summary>
            Gets the maximum of this <see cref="T:Abt.Controls.SciChart.ISeriesPoint`1"/>. In the case of an <see cref="T:Abt.Controls.SciChart.OhlcSeriesPoint"/> this would be the High value
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISeriesPoint`1.Min">
            <summary>
            Gets the minimum of this <see cref="T:Abt.Controls.SciChart.ISeriesPoint`1"/>. In the case of an <see cref="T:Abt.Controls.SciChart.OhlcSeriesPoint"/> this would be the Low value
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISeriesPoint`1.Y">
            <summary>
            Gets the default Y-value of this <see cref="T:Abt.Controls.SciChart.ISeriesPoint`1"/>. In the case of an <see cref="T:Abt.Controls.SciChart.OhlcSeriesPoint"/> this would be the Close value
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.OhlcDataSeries`2">
            <summary>
            A DataSeries to store OHLC data-points, containing X and Y-Open, Y-High, Y-Low, Y-Close values. 
            May be used as a DataSource for <see cref="T:Abt.Controls.SciChart.FastCandlestickRenderableSeries"/> and <see cref="T:Abt.Controls.SciChart.FastOhlcRenderableSeries"/> as well as standard XY renderable series types
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.OhlcDataSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.OhlcDataSeries`2"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.OhlcDataSeries`2.ToHitTestInfo(System.Int32)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct containing data about the data-point at the specified index
            </summary>
            <param name="index">The index to the DataSeries</param>
            <returns>The HitTestInfo</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.OhlcDataSeries`2.ClearColumns">
            <summary>
            When overridden in a derived class, clears all columns in the Data Series
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.OhlcDataSeries`2.RemoveAt(System.Int32)">
            <summary>
            Removes the X,Y values at the specified index
            </summary>
            <param name="index">The index to remove at</param>
        </member>
        <member name="M:Abt.Controls.SciChart.OhlcDataSeries`2.Clone">
            <summary>
            Creates a deep copy of a DataSeries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.OhlcDataSeries`2.ToPointSeries(Abt.Controls.SciChart.Numerics.ResamplingMode,Abt.Controls.SciChart.IndexRange,System.Int32,System.Boolean)">
            <summary>
            Converts the default <see cref="P:Abt.Controls.SciChart.IDataSeries.YValues"/> to an <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which is used to render XY series
            </summary>
            <param name="resamplingMode">The desired <see cref="T:Abt.Controls.SciChart.Numerics.ResamplingMode"/></param>
            <param name="pointRange">The integer Indices range in the parent data-set</param>
            <param name="viewportWidth">The current width of the viewport</param>
            <param name="useXIndices">If true, uses the indices to form the resampled X-values, else uses the X-Values themselves</param>
            <returns>
            A <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which is used to render XY series
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.OhlcDataSeries`2.Append(`0,`1,`1,`1,`1)">
            <summary>
            Appends an Open, High, Low, Close point to the series
            </summary>
            <param name="x">The X value</param>
            <param name="open">The Open value</param>
            <param name="high">The High value</param>
            <param name="low">The Low value</param>
            <param name="close">The Close value</param>
        </member>
        <member name="M:Abt.Controls.SciChart.OhlcDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends a list of Open, High, Low, Close points to the series
            </summary>
            <param name="x">The list of X values</param>
            <param name="open">The list of Open values</param>
            <param name="high">The list of High values</param>
            <param name="low">The list of Low values</param>
            <param name="close">The list of Close values</param>
        </member>
        <member name="M:Abt.Controls.SciChart.OhlcDataSeries`2.Update(`0,`1,`1,`1,`1)">
            <summary>
            Updates an Open, High, Low, Close point specified by the X-Value passed in. 
            </summary>
            <param name="x">The X Value to key on when updating</param>
            <param name="open">The Open value</param>
            <param name="high">The High value</param>
            <param name="low">The Low value</param>
            <param name="close">The Close value</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the x value is not in the DataSeries</exception>
        </member>
        <member name="M:Abt.Controls.SciChart.OhlcDataSeries`2.Insert(System.Int32,`0,`1,`1,`1,`1)">
            <summary>
            Inserts an Open, High, Low, Close point at the specified index
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X value</param>
            <param name="open">The Open value</param>
            <param name="high">The High value</param>
            <param name="low">The low value</param>
            <param name="close">The close value</param>
        </member>
        <member name="M:Abt.Controls.SciChart.OhlcDataSeries`2.GetYMaxAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Max(existingYMax, currentMax), where currentMax is the maximum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMax">The existing maximum</param>
            <returns>The new YMax, which is the Min(existingYMax, currentMax)</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.OhlcDataSeries`2.GetYMinAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Min(existingYMin, currentMin), where currentMin is the minimum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMin">The existing minimum</param>
            <returns>The new YMin, which is the Min(existingYMin, currentMin)</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcDataSeries`2.HasValues">
            <summary>
            Gets whether the Data Series has values (is not empty)
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcDataSeries`2.DataSeriesType">
            <summary>
            Gets the <see cref="P:Abt.Controls.SciChart.OhlcDataSeries`2.DataSeriesType"/> for this DataSeries
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcDataSeries`2.Abt#Controls#SciChart#IOhlcDataSeries#OpenValues">
            <summary>
            Gets the Open Values of this DataSeries
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcDataSeries`2.Abt#Controls#SciChart#IOhlcDataSeries#HighValues">
            <summary>
            Gets the High Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcDataSeries`2.Abt#Controls#SciChart#IOhlcDataSeries#LowValues">
            <summary>
            Gets the Low Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcDataSeries`2.Abt#Controls#SciChart#IOhlcDataSeries#CloseValues">
            <summary>
            Gets the Close Values of this DataSeries as a List of <see cref="T:System.IComparable"/>
            </summary>
            <remarks>Close equates to Y Values in either OHLC or simple XY dataseries</remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcDataSeries`2.OpenValues">
            <summary>
            Gets the Open Values of this DataSeries, if the data is OHLC
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcDataSeries`2.HighValues">
            <summary>
            Gets the High Values of this DataSeries, if the data is OHLC
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcDataSeries`2.LowValues">
            <summary>
            Gets the Low Values of this DataSeries, if the data is OHLC
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcDataSeries`2.CloseValues">
            <summary>
            Gets the Close Values of this DataSeries, if the data is OHLC
            </summary>
            <remarks>Close equates to Y Values in either OHLC or simple XY dataseries</remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.OhlcSeriesPoint">
            <summary>
            A structure to contain OHLC series point values for the Y-Axis only
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.OhlcSeriesPoint.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.OhlcSeriesPoint"/> struct.
            </summary>
            <param name="open">The open value.</param>
            <param name="high">The high value.</param>
            <param name="low">The low value.</param>
            <param name="close">The close value.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.OhlcSeriesPoint.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcSeriesPoint.Open">
            <summary>
            Gets the open value
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcSeriesPoint.High">
            <summary>
            Gets the high value
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcSeriesPoint.Low">
            <summary>
            Gets the low value
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcSeriesPoint.Close">
            <summary>
            Gets the close value
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcSeriesPoint.Max">
            <summary>
            Gets the maximum of this <see cref="T:Abt.Controls.SciChart.ISeriesPoint`1"/>. In the case of an <see cref="T:Abt.Controls.SciChart.OhlcSeriesPoint"/> this would be the High value
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcSeriesPoint.Min">
            <summary>
            Gets the minimum of this <see cref="T:Abt.Controls.SciChart.ISeriesPoint`1"/>. In the case of an <see cref="T:Abt.Controls.SciChart.OhlcSeriesPoint"/> this would be the Low value
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.OhlcSeriesPoint.Y">
            <summary>
            Gets the default Y-value of this <see cref="T:Abt.Controls.SciChart.ISeriesPoint`1"/>. In the case of an <see cref="T:Abt.Controls.SciChart.OhlcSeriesPoint"/> this would be the Close value
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.Model.Series.Point2D">
            <summary>
            A struct representing a 2D point
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Model.Series.Point2D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.Model.Series.Point2D"/> struct.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
        </member>
        <member name="P:Abt.Controls.SciChart.Model.Series.Point2D.X">
            <summary>
            Gets the X value
            </summary>        
        </member>
        <member name="P:Abt.Controls.SciChart.Model.Series.Point2D.Y">
            <summary>
            Gets the Y value
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.PointSeries">
            <summary>
            Defines a PointSeries, a subset of X,Y data used to render points to the screen
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.PointSeries.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.PointSeries"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.PointSeries.GetYRange">
            <summary>
            Gets the min, max range in the Y-Direction
            </summary>
            <returns>
            A <see cref="T:Abt.Controls.SciChart.DoubleRange"/> defining the min, max in the Y-direction
            </returns>
        </member>
        <member name="T:Abt.Controls.SciChart.Model.Series.SciList`1">
            <summary>
            Implementation of generic list, same as .NET Framework version however we expose the inner array 
            for direct manipulation of the array. Tests show this to be around 4x faster than accessing via the indexed
            property
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Abt.Controls.SciChart.Model.Series.SciList`1.Add(`0)">
            <summary>Adds an object to the end of the <see cref="T:System.Collections.Generic.List`1" />.</summary>
            <param name="item">The object to be added to the end of the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.</param>
        </member>
        <member name="T:Abt.Controls.SciChart.DataSetUpdatedEventArgs">
            <summary>
            Event args used by event <see cref="E:Abt.Controls.SciChart.IDataSeriesSet.SeriesUpdated"/> event
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSetUpdatedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.DataSetUpdatedEventArgs"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSetUpdatedEventArgs.#ctor(Abt.Controls.SciChart.DataSeriesUpdate)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.DataSetUpdatedEventArgs"/> class.
            </summary>
            <param name="update">The update.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DataSetUpdatedEventArgs.#ctor(Abt.Controls.SciChart.RangeMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.DataSetUpdatedEventArgs"/> class.
            </summary>
            <param name="rangeMode">The requested ranging mode.</param>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSetUpdatedEventArgs.RangeMode">
            <summary>
            Gets the requested <see cref="P:Abt.Controls.SciChart.DataSetUpdatedEventArgs.RangeMode"/> on redraw
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.DataSetUpdatedEventArgs.DataSeriesUpdate">
            <summary>
            Gets the data series update type
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.XyyDataSeries`2">
            <summary>
            A DataSeries to store Xyy data-points, containing X and Y0, Y1 values
            May be used as a DataSource for <see cref="T:Abt.Controls.SciChart.FastBandRenderableSeries"/> as well as standard XY renderable series types
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.XyyDataSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:XyyDataSeries&lt;TY&gt;"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.XyyDataSeries`2.RemoveAt(System.Int32)">
            <summary>
            Removes the X,Y values at the specified index
            </summary>
            <param name="index">The index to remove at</param>
        </member>
        <member name="M:Abt.Controls.SciChart.XyyDataSeries`2.Clone">
            <summary>
            Creates a deep copy of a DataSeries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.XyyDataSeries`2.GetYMinAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Min(existingYMin, currentMin), where currentMin is the minimum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMin">The existing minimum</param>
            <returns>The new YMin, which is the Min(existingYMin, currentMin)</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.XyyDataSeries`2.GetYMaxAt(System.Int32,`1)">
            <summary>
            When overriden in a derived class, gets the Max(existingYMax, currentMax), where currentMax is the maximum at the specified index
            </summary>
            <param name="index">The index to the underlying dataset</param>
            <param name="existingYMax">The existing maximum</param>
            <returns>The new YMax, which is the Min(existingYMax, currentMax)</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.XyyDataSeries`2.ToPointSeries(Abt.Controls.SciChart.Numerics.ResamplingMode,Abt.Controls.SciChart.IndexRange,System.Int32,System.Boolean)">
            <summary>
            Converts the default <see cref="P:Abt.Controls.SciChart.IDataSeries.YValues"/> to an <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which is used to render XY series
            </summary>
            <param name="resamplingMode">The desired <see cref="T:Abt.Controls.SciChart.Numerics.ResamplingMode"/></param>
            <param name="pointRange">The integer Indices range in the parent data-set</param>
            <param name="viewportWidth">The current width of the viewport</param>
            <param name="useXIndices">If true, uses the indices to form the resampled X-values, else uses the X-Values themselves</param>
            <returns>
            A <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which is used to render XY series
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.XyyDataSeries`2.ToHitTestInfo(System.Int32)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct containing data about the data-point at the specified index
            </summary>
            <param name="index">The index to the DataSeries</param>
            <returns>The HitTestInfo</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.XyyDataSeries`2.ClearColumns">
            <summary>
            When overridden in a derived class, clears all columns in the Data Series
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.XyyDataSeries`2.Append(`0,`1,`1)">
            <summary>
            Appends a single X, Y0, Y1 point to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-value</param>
            <param name="y0">The Y0-value</param>
            <param name="y1">The Y1-value</param>
        </member>
        <member name="M:Abt.Controls.SciChart.XyyDataSeries`2.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Appends a collection of X, Y0 and Y1 points to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-values</param>
            <param name="y0">The Y0-values</param>
            <param name="y1">The Y1-values</param>
        </member>
        <member name="M:Abt.Controls.SciChart.XyyDataSeries`2.Update(`0,`1,`1)">
            <summary>
            Updates (overwrites) the Y0, Y1 values at the specified X-value. Automatically triggers a redraw
            </summary>
            <param name="x">The X-value</param>
            <param name="y0">The Y0-value</param>
            <param name="y1">The Y1-value</param>
        </member>
        <member name="M:Abt.Controls.SciChart.XyyDataSeries`2.Insert(System.Int32,`0,`1,`1)">
            <summary>
            Inserts an X, Y0, Y1 point at the specified index. Automatically triggers a redraw
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X-value</param>
            <param name="y0">The Y0-value</param>
            <param name="y1">The Y1-value</param>
        </member>
        <member name="P:Abt.Controls.SciChart.XyyDataSeries`2.DataSeriesType">
            <summary>
            Gets the <see cref="P:Abt.Controls.SciChart.XyyDataSeries`2.DataSeriesType"/> for this DataSeries
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.XyyDataSeries`2.Abt#Controls#SciChart#IXyyDataSeries#Y1Values">
            <summary>
            Gets the Y1 Values as a list of <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.XyyDataSeries`2.Y1Values">
            <summary>
            Gets the Y1 values
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.XyyDataSeries`2.HasValues">
            <summary>
            Gets whether the Data Series has values (is not empty)
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.XyySeriesPoint">
            <summary>
            A structure to contain Xyy series point values for the Y-Axis only
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.XyySeriesPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.XyySeriesPoint"/> struct.
            </summary>
            <param name="y0">The y0 value.</param>
            <param name="y1">The y1 value.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.XyySeriesPoint.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="P:Abt.Controls.SciChart.XyySeriesPoint.Y0">
            <summary>
            Gets the Y0 value of the Xyy point
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.XyySeriesPoint.Y1">
            <summary>
            Gets the Y1 value of the Xyy point
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.XyySeriesPoint.Max">
            <summary>
            Gets the maximum of this <see cref="T:Abt.Controls.SciChart.ISeriesPoint`1"/>. In the case of an <see cref="T:Abt.Controls.SciChart.OhlcSeriesPoint"/> this would be the High value
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.XyySeriesPoint.Min">
            <summary>
            Gets the minimum of this <see cref="T:Abt.Controls.SciChart.ISeriesPoint`1"/>. In the case of an <see cref="T:Abt.Controls.SciChart.OhlcSeriesPoint"/> this would be the Low value
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.XyySeriesPoint.Y">
            <summary>
            Gets the default Y-value of this <see cref="T:Abt.Controls.SciChart.ISeriesPoint`1"/>. In the case of an <see cref="T:Abt.Controls.SciChart.XyySeriesPoint"/> this would be the Y0 value. 
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.TimeSpanDelta">
            <summary>
            Defines a TimeSpan Delta, which provides Major and Minor deltas as used in <see cref="T:Abt.Controls.SciChart.DateTimeAxis"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.TimeSpanDelta.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.TimeSpanDelta"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.TimeSpanDelta.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.TimeSpanDelta"/> class.
            </summary>
            <param name="minorDelta">The minor delta.</param>
            <param name="majorDelta">The major delta.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.TimeSpanDelta.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.TimeSpanDelta.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.TimeSpanDelta.Equals(Abt.Controls.SciChart.TimeSpanDelta)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.TimeSpanDelta.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.TimeSpanDelta.op_Equality(Abt.Controls.SciChart.TimeSpanDelta,Abt.Controls.SciChart.TimeSpanDelta)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.TimeSpanDelta.op_Inequality(Abt.Controls.SciChart.TimeSpanDelta,Abt.Controls.SciChart.TimeSpanDelta)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.TimeSpanDelta.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.TimeSpanDelta.MajorDelta">
            <summary>
            Gets or sets the major delta.
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.TimeSpanDelta.MinorDelta">
            <summary>
            Gets or sets the minor delta.
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.CursorExecuteOptions">
            <summary>
            Specifies actions that cause cursor tooltip to be shown
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.CursorExecuteOptions.Always">
            <summary>
            Show tooltip always
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.CursorExecuteOptions.MouseLeftButtonDown">
            <summary>
            Show tooltip when mouse left button is pressed
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.CursorExecuteOptions.MouseRightButtonDown">
            <summary>
            Show tooltip when mouse right button is pressed
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.CursorExecuteOptions.MouseMiddleButtonDown">
            <summary>
            Show tooltip when mouse middle button is pressed
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.CursorModifier">
            <summary>
            The CursorModifier provides a cross-hairs (cursor) plus tooltip with X,Y data values under the mouse as the mouse moves. 
            Add to a <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.CursorModifier.CrosshairsStyleProperty">
            <summary>
            Defines the CrosshairsStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.CursorModifier.CursorLabelTemplateProperty">
            <summary>
            Defines the CursorLabelTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.CursorModifier.ShowAxisLabelsProperty">
            <summary>
            Defines the ShowAxisLabels DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.CursorModifier.ShowTooltipProperty">
            <summary>
            Defines the ShowTooltip DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.CursorModifier.ShowTooltipOnProperty">
            <summary>
            Defines the ShowTooltipOn DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.CursorModifier.AxisLabelTemplateProperty">
            <summary>
            Defines the AxisLabelTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.CursorModifier.SeriesDataProperty">
            <summary>
            Defines the SeriesData Dependency property which you may bind to in your applications to show cursor updates on mouse-move
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.CursorModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.CursorModifier"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.CursorModifier.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.CursorModifier.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.CursorModifier.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instance
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.CursorModifier.OnParentSurfaceMouseLeave">
            <summary>
            Called when the mouse leaves the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.CursorModifier.OnParentSurfaceMouseEnter">
            <summary>
            Called when the mouse enters the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.CursorModifier.OnModifierMouseDown(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Abt.Controls.SciChart.CursorModifier.OnModifierMouseUp(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Abt.Controls.SciChart.CursorModifier.OnModifierMouseMove(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.CursorModifier.OnParentSurfaceRendered(Abt.Controls.SciChart.SciChartRenderedMessage)">
            <summary>
            Called when the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> is rendered
            </summary>
            <param name="e">The <see cref="T:Abt.Controls.SciChart.SciChartRenderedMessage"/> which contains the event arg data</param>
        </member>
        <member name="M:Abt.Controls.SciChart.CursorModifier.GetXAxisData(System.Windows.Point)">
            <summary>
            Performs a hit-test on the XAxis and returns the <see cref="P:Abt.Controls.SciChart.CursorModifier.AxisInfo"/> struct
            </summary>
            <param name="mousePoint">The mouse-point to hit-test at</param>
            <returns>the <see cref="P:Abt.Controls.SciChart.CursorModifier.AxisInfo"/> struct containing hit-test data</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.CursorModifier.GetAxesData(System.Windows.Point)">
            <summary>
            Performs a hit-test on all axes and aggregates data into the <see cref="P:Abt.Controls.SciChart.CursorModifier.AxisInfo"/> collection
            </summary>
            <param name="mousePoint"></param>
        </member>
        <member name="P:Abt.Controls.SciChart.CursorModifier.AxisInfo">
            <summary>
            Provides a collection of <see cref="P:Abt.Controls.SciChart.CursorModifier.AxisInfo"/> structs, which may be data-bound to in the UI defined by the <see cref="P:Abt.Controls.SciChart.CursorModifier.CursorLabelTemplate"/> Control template
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.CursorModifier.XAxisInfo">
            <summary>
            Provides an <see cref="P:Abt.Controls.SciChart.CursorModifier.AxisInfo"/> object, which may be data-bound to
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.CursorModifier.YAxisInfo">
            <summary>
            Provides an <see cref="P:Abt.Controls.SciChart.CursorModifier.AxisInfo"/> object, which may be data-bound to
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.CursorModifier.CrosshairsStyle">
            <summary>
            Gets or sets the style applied to the Crosshairs (TargetType=Line)
            </summary>
            <value>The crosshairs style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.CursorModifier.CursorLabelTemplate">
            <summary>
            Gets or sets the ControlTemplate used for the cursor tooltip
            </summary>
            <value>The cursor label template.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.CursorModifier.ShowAxisLabels">
            <summary>
            Gets or sets value, indicates whether show labels on axes or not
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.CursorModifier.ShowTooltip">
            <summary>
            Gets or sets value, indicates whether show cursor tooltip or not
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.CursorModifier.AxisLabelTemplate">
            <summary>
            Gets or sets the AxisLabelTemplate used for the labels on axes
            </summary>
            <value>The axis label template.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.CursorModifier.ShowTooltipOn">
            <summary>
            Gets or sets option which determines when cursor tooltip should be shown
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.CursorModifier.SeriesData">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.ChartDataObject"/> which may be bound to, to provide feedback to the user of cursor updates
            </summary>
            <value>The series data.</value>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.MasterSlaveChartModifier">
            <summary>
            Provides a base class for Linked Chart Modifiers. Classes that inherit this allow mouse events and interaction to occur across Chart Panes
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.MasterSlaveChartModifier.OnModifierMouseMove(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
        </member>
        <member name="M:Abt.Controls.SciChart.MasterSlaveChartModifier.OnModifierDoubleClick(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Abt.Controls.SciChart.MasterSlaveChartModifier.OnModifierMouseDown(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Abt.Controls.SciChart.MasterSlaveChartModifier.OnModifierMouseUp(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:Abt.Controls.SciChart.MasterSlaveChartModifier.OnModifierMouseWheel(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
        </member>
        <member name="T:Abt.Controls.SciChart.ModifierGroup">
            <summary>
            Allows a collection of modifiers to be set on the <see cref="P:Abt.Controls.SciChart.SciChartSurface.ChartModifier"/> property. Child modifiers are stored in the
            <see cref="P:Abt.Controls.SciChart.ModifierGroup.ChildModifiers"/> collection, which is backed by a DependencyProperty so may be bound to in Xaml.
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ModifierGroup.ChildModifiersProperty">
            <summary>
            Defines the ChildModifiers DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ModifierGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ModifierGroup"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ModifierGroup.#ctor(Abt.Controls.SciChart.IChartModifier[])">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ModifierGroup"/> class.
            </summary>
            <param name="childModifiers">The child modifier collection.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ModifierGroup.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ModifierGroup.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ModifierGroup.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instance
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ModifierGroup.OnModifierDoubleClick(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ModifierGroup.OnModifierMouseDown(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ModifierGroup.OnModifierMouseMove(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ModifierGroup.OnModifierMouseUp(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ModifierGroup.OnModifierMouseWheel(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ModifierGroup.HasModifier(System.Type)">
            <summary>
            Determines whether the current <see cref="T:Abt.Controls.SciChart.ModifierGroup"/> has a child modifier of the desired type
            </summary>
            <param name="desiredType">The type of child modifier to search for</param>
            <returns><c>true</c> if the current <see cref="T:Abt.Controls.SciChart.ModifierGroup"/> has a chlid modifier by this type; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ModifierGroup.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the DataContext of the <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.ModifierGroup.ChildModifiers">
            <summary>
            Gets or sets a collection of child modifiers in this group
            </summary>
            <value>The child modifiers.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.ModifierGroup.Item(System.String)">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.IChartModifier"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:Abt.Controls.SciChart.IChartModifier"/>.
            </value>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:Abt.Controls.SciChart.ModifierGroup.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.IChartModifier"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:Abt.Controls.SciChart.IChartModifier"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="T:Abt.Controls.SciChart.ModifierMouseArgs">
            <summary>
            Defines a cross-platform Mouse event args, used by <see cref="T:Abt.Controls.SciChart.IChartModifier"/> derived types to process mouse events
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ModifierMouseArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ModifierMouseArgs"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ModifierMouseArgs.#ctor(System.Windows.Point,Abt.Controls.SciChart.MouseButtons,Abt.Controls.SciChart.MouseModifier,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ModifierMouseArgs"/> class.
            </summary>
            <param name="mousePoint">The mouse point that this event occurred at relative to the <see cref="P:Abt.Controls.SciChart.SciChartSurface.RootGrid"/>.</param>
            <param name="mouseButtons">The mouse buttons clicked.</param>
            <param name="modifier">The modifier key pressed.</param>
            <param name="isMaster">If True, then this mouse event occurred on a master <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/>. 
            Used to process which modifier was the source of an event when multiple modifiers are linked</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ModifierMouseArgs.#ctor(System.Windows.Point,Abt.Controls.SciChart.MouseButtons,Abt.Controls.SciChart.MouseModifier,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ModifierMouseArgs"/> class.
            </summary>
            <param name="mousePoint">The mouse point that this event occurred at relative to the <see cref="P:Abt.Controls.SciChart.SciChartSurface.RootGrid"/>.</param>
            <param name="mouseButtons">The mouse buttons clicked.</param>
            <param name="modifier">The modifier key pressed.</param>
            <param name="wheelDelta">The mouse wheel delta.</param>
            <param name="isMaster">If True, then this mouse event occurred on a master <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/>. 
            Used to process which modifier was the source of an event when multiple modifiers are linked</param>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.ModifierMouseArgs.IsMaster">
            <summary>
            If True, then this mouse event occurred on a master <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/>. 
            Used to process which modifier was the source of an event when multiple modifiers are linked
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ModifierMouseArgs.Delta">
            <summary>
            Gets or sets the mouse wheel delta
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ModifierMouseArgs.MousePoint">
            <summary>
            Gets or sets the mouse point that this event occurred at
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ModifierMouseArgs.MouseButtons">
            <summary>
            Gets or sets the MouseButtons that were pressed at the time of the event
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ModifierMouseArgs.Modifier">
            <summary>
            Gets or sets the Modifier Key that was pressed at the time of the event
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ModifierMouseArgs.Handled">
            <summary>
            Gets or sets whether this event is Handled. If true, no further modifiers will be informed of the mouse event and mouse events will cease bubbling and tunnelling
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.MouseModifier">
            <summary>
            Specifies the Modifier button pressed at the time of a mouse operation
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.MouseModifier.None">
            <summary>
            No modifiers were pressed
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.MouseModifier.Shift">
            <summary>
            The SHIFT button was pressed
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.MouseModifier.Ctrl">
            <summary>
            The CTRL button was pressed
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.MouseModifier.Alt">
            <summary>
            The ALT button was pressed
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.MouseButtons">
            <summary>
            Specifies the MouseButtons pressed at the time of a mouse operation
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.MouseButtons.None">
            <summary>
            No buttons were pressed
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.MouseButtons.Left">
            <summary>
            The LEFT button was pressed
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.MouseButtons.Middle">
            <summary>
            The MIDDLE button was pressed
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.MouseButtons.Right">
            <summary>
            The RIGHT button was pressed
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.MouseWheelZoomModifier">
            <summary>
            The <see cref="T:Abt.Controls.SciChart.MouseWheelZoomModifier"/> provides zooming (or shrinking) of the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> on mouse wheel scroll
            Add to a <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.MouseWheelZoomModifier.XyDirectionProperty">
            <summary>
            Defines the XyDirection DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.MouseWheelZoomModifier.ActionTypeProperty">
            <summary>
            Defines the ActionType DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.MouseWheelZoomModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.MouseWheelZoomModifier"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.MouseWheelZoomModifier.OnModifierMouseWheel(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.MouseWheelZoomModifier.XyDirection">
            <summary>
            Gets or sets the <see cref="P:Abt.Controls.SciChart.MouseWheelZoomModifier.XyDirection"/> to restrict mouse-wheel interactivity to
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.MouseWheelZoomModifier.ActionType">
            <summary>
            Gets or sets the <see cref="P:Abt.Controls.SciChart.MouseWheelZoomModifier.ActionType"/> to perform on mouse-wheel interaction
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.MouseWheelZoomModifier.GrowFactor">
            <summary>
            Gets or sets the grow factor to scale (or shrink) both axes on mouse wheel
            </summary>
            <value>The grow factor.</value>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.NullModifier">
            <summary>
            The <see cref="T:Abt.Controls.SciChart.NullModifier"/> can be attached to consume mouse events but perform no action
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.RolloverModifier">
            <summary>
            The <see cref="T:Abt.Controls.SciChart.RolloverModifier"/> provides a mouse-over hit-test to a chart, plus a collection of <see cref="T:Abt.Controls.SciChart.SeriesInfo"/> objects to bind to which updates as the mouse moves.
            Add to a <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RolloverModifier.RolloverDataProperty">
            <summary>
            Defines the RolloverData Dependency property which you may bind to in your applications to show Rollover updates on mouse-move
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RolloverModifier.DrawVerticalLineProperty">
            <summary>
            Defines the DrawVerticalLine DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RolloverModifier.VerticalLineStyleProperty">
            <summary>
            Defines the VerticalLineStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RolloverModifier.RolloverModeProperty">
            <summary>
            Defines the RolloverMode DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RolloverModifier.RolloverLabelTemplateProperty">
            <summary>
            Defines the RolloverLabelTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RolloverModifier.UseInterpolationProperty">
            <summary>
            Defines the UseInterpolation DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RolloverModifier.RolloverLabelTemplateSelectorProperty">
            <summary>
            Defines the RolloverLabelTemplateSelector DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RolloverModifier.RolloverLabelProperty">
            <summary>
            Defines the RolloverLabel Attached Property, which can be attached to point marker
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.RolloverModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.RolloverModifier"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RolloverModifier.OnModifierMouseMove(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RolloverModifier.OnParentSurfaceRendered(Abt.Controls.SciChart.SciChartRenderedMessage)">
            <summary>
            Called when the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> is rendered
            </summary>
            <param name="e">The <see cref="T:Abt.Controls.SciChart.SciChartRenderedMessage"/> which contains the event arg data</param>
        </member>
        <member name="M:Abt.Controls.SciChart.RolloverModifier.OnParentSurfaceMouseLeave">
            <summary>
            Called when the mouse leaves the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.RolloverModifier.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RolloverModifier.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instance
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RolloverModifier.OnSelectedSeriesChanged(System.Collections.Generic.IEnumerable{Abt.Controls.SciChart.IRenderableSeries},System.Collections.Generic.IEnumerable{Abt.Controls.SciChart.IRenderableSeries})">
            <summary>
            Called when the parent surface SelectedSeries collection changes
            </summary>
            <param name="oldSeries"></param>
            <param name="newSeries"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.RolloverModifier.CreateRolloverLabelFromTemlate(System.Windows.DataTemplate)">
            <summary>
            Creates the RolloverLabel from passed DataTemplate. If parameter is Null, creates the RolloverLabel from <see cref="P:Abt.Controls.SciChart.RolloverModifier.RolloverLabelTemplate"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RolloverModifier.UseInterpolation">
            <summary>
            Gets or sets whether the rollover action should use interpolation
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RolloverModifier.SourceMode">
            <summary>
            Gets or sets type of series on which Rollover is drawn
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RolloverModifier.DrawVerticalLine">
            <summary>
            Gets or sets whether a Vertical Line should be drawn at the rollover location
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RolloverModifier.VerticalLineStyle">
            <summary>
            Gets or sets the Vertical Line Style (TargetType=<see cref="T:System.Windows.Shapes.Line"/>). Only applied if <see cref="P:Abt.Controls.SciChart.RolloverModifier.DrawVerticalLine"/> is true
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RolloverModifier.RolloverLabelTemplate">
            <summary>
            Gets or sets the ControlTemplate used for the rollover tooltip
            </summary>
            <value>The rollover label template.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.RolloverModifier.RolloverData">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.ChartDataObject"/> which may be bound to, to provide feedback to the user of rollover updates
            </summary>
            <value>The rollover data.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.RolloverModifier.RolloverLabelTemplateSelector">
            <summary>
            Gets or sets instance of <see cref="T:Abt.Controls.SciChart.DataTemplateSelector"/> which is used by modifier
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.SourceMode">
            <summary>
            Defines constants for different series sources in <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SourceMode.AllSeries">
            <summary>
            The <see cref="T:Abt.Controls.SciChart.RolloverModifier"/> uses All Series as inputs
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SourceMode.SelectedSeries">
            <summary>
            The <see cref="T:Abt.Controls.SciChart.RolloverModifier"/> uses Selected series as inputs
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SourceMode.UnselectedSeries">
            <summary>
            The <see cref="T:Abt.Controls.SciChart.RolloverModifier"/> uses Unselected series as inputs
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.RubberBandXyZoomModifier">
            <summary>
            The <see cref="T:Abt.Controls.SciChart.RubberBandXyZoomModifier"/> provides a mouse drag to zoom into a rectangular region, or horizontal section of the chart.
            Add to a <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RubberBandXyZoomModifier.IsAnimatedProperty">
            <summary>
            Defines the IsAnimated DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RubberBandXyZoomModifier.RubberBandFillProperty">
            <summary>
            Defines the RubberBandFill dependency property
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RubberBandXyZoomModifier.RubberBandStrokeProperty">
            <summary>
            Defines the RubberBandStroke dependency property
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RubberBandXyZoomModifier.RubberBandStrokeDashArrayProperty">
            <summary>
            Defines the RubberBandStrokeDashArray dependency property
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RubberBandXyZoomModifier.IsXAxisOnlyProperty">
            <summary>
            Defines the IsXAxisOnly dependency property
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RubberBandXyZoomModifier.ZoomExtentsYProperty">
            <summary>
            Defines the ZoomExtentsY DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.RubberBandXyZoomModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.RubberBandXyZoomModifier"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.RubberBandXyZoomModifier.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RubberBandXyZoomModifier.OnModifierMouseDown(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RubberBandXyZoomModifier.OnModifierMouseMove(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RubberBandXyZoomModifier.OnModifierMouseUp(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.RubberBandXyZoomModifier.FitYAxisOnZoom">
            <summary>
            Gets or sets a value indicating whether to fit to the Y-Axis on zoom
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RubberBandXyZoomModifier.IsAnimated">
            <summary>
            Gets or sets whether zoom operations should be animated. Default true
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RubberBandXyZoomModifier.IsXAxisOnly">
            <summary>
            Gets or sets whether the RubberBand should zoom the X-Axis only. 
            If true, then the effect will be instead of a rectangle drawn under the mouse, an horizontal section of the 
            entire chart will be selected
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RubberBandXyZoomModifier.ZoomExtentsY">
            <summary>
            If true, zooms to extents on the Y-Axis on each zoom operation. Use in conjuction with <see cref="P:Abt.Controls.SciChart.RubberBandXyZoomModifier.IsXAxisOnly"/> to achieve different zooming effects
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RubberBandXyZoomModifier.RubberBandFill">
            <summary>
            Gets or sets the Fill brush of the recticule drawn on the screen as the user zooms
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RubberBandXyZoomModifier.RubberBandStrokeDashArray">
            <summary>
            Gets or sets the StrokeDashArray, used to set a dashed outline for the rubber band rectangle. 
            See the <see cref="P:System.Windows.Shapes.Shape.StrokeDashArray"/> property for usage
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RubberBandXyZoomModifier.RubberBandStroke">
            <summary>
            Gets or sets the Stroke brush of the recticule drawn on the screen as the user zooms
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RubberBandXyZoomModifier.IsDragging">
            <summary>
            Gets whether the user is currently dragging the mouse
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.GetLegendDataFor">
            <summary>
            Enumeration constants to specify which series to get legend data for
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.GetLegendDataFor.AllSeries">
            <summary>
            Gets and exposes legend data for All Series on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.GetLegendDataFor.AllVisibleSeries">
            <summary>
            Gets and exposes legend data for all Visible series on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.GetLegendDataFor.SelectedSeries">
            <summary>
            Gets and exposes legend data for Selected Series on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.LegendModifier">
            <summary>
            Defines a custom chart modifier to provide info for the <see cref="T:Abt.Controls.SciChart.SciChartLegend"/>
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LegendModifier.LegendDataProperty">
            <summary>
            Defines the LegendData Dependency property
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LegendModifier.GetLegendDataForProperty">
            <summary>
            Defines the GetLegendDataFor Dependency Property 
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.LegendModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.LegendModifier"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.LegendModifier.OnParentSurfaceRendered(Abt.Controls.SciChart.SciChartRenderedMessage)">
            <summary>
            Called when the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> is rendered
            </summary>
            <param name="e">The <see cref="T:Abt.Controls.SciChart.SciChartRenderedMessage"/> which contains the event arg data</param>
        </member>
        <member name="M:Abt.Controls.SciChart.LegendModifier.UpdateLegend">
            <summary>
            Refreshes the legend with up-to-date <see cref="T:Abt.Controls.SciChart.SeriesInfo"/> with series names, latest values
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.LegendModifier.LegendData">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.ChartDataObject"/> which may be bound to
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.LegendModifier.GetLegendDataFor">
            <summary>
            Gets or sets an enumeration constant defining which series to interrogate for the legend data source 
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.SeriesSelectionModifier">
            <summary>
            Provides the ability to select series via a Chart Modifier
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SeriesSelectionModifier.SelectedSeriesProperty">
            <summary>
            Defines the SelectedRenderableSeries DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SeriesSelectionModifier.SelectedSeriesStyleProperty">
            <summary>
            Defines the SelectedSelectedSeriesStyle DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SeriesSelectionModifier.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SeriesSelectionModifier.OnSelectedSeriesChanged(System.Collections.Generic.IEnumerable{Abt.Controls.SciChart.IRenderableSeries},System.Collections.Generic.IEnumerable{Abt.Controls.SciChart.IRenderableSeries})">
            <summary>
            Called when the parent surface SelectedSeries collection changes
            </summary>
            <param name="oldSeries"></param>
            <param name="newSeries"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.SeriesSelectionModifier.OnModifierMouseUp(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="E:Abt.Controls.SciChart.SeriesSelectionModifier.SelectionChanged">
            <summary>
            Event raised when the selection changes
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SeriesSelectionModifier.SelectedSeriesStyle">
            <summary>
            Gets or sets a style for selected series.
            </summary>
            <value>The style of the selected series.</value>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.XAxisDragModifier">
            <summary>
            The <see cref="T:Abt.Controls.SciChart.XAxisDragModifier"/> provides a mouse drag to scale the X-Axis. 
            This behaviour scales the axis in a different direction depending on which half of the axis the user starts the operation in
            Add to a <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.XAxisDragModifier.ClipModeXProperty">
            <summary>
            Defines the ClipToExtentsX Dependency Property 
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.XAxisDragModifier._startPoint">
            <summary>
            Gets the start mouse-point of any drag operation
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.XAxisDragModifier._isSecondHalf">
            <summary>
            If true, the operation began in the second half of the axis
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.XAxisDragModifier._startVisibleRange">
            <summary>
            Gets the Start <see cref="P:Abt.Controls.SciChart.AxisBase.VisibleRange"/> before the operation began
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.XAxisDragModifier.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.XAxisDragModifier.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.XAxisDragModifier.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instance
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.XAxisDragModifier.OnModifierMouseDown(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.XAxisDragModifier.OnModifierMouseMove(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.XAxisDragModifier.OnModifierMouseUp(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.XAxisDragModifier.GetIsSecondHalf(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Gets whether the specified mouse point is within the second (rightmost) half of the Axis bounds
            </summary>
            <param name="mousePoint">The mouse point.</param>
            <param name="axisBounds">The axis bounds.</param>
            <returns>True if the point is within the second half of the axis bounds, else false</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.XAxisDragModifier.PerformRange(System.Windows.Point,System.Windows.Point,System.Boolean)">
            <summary>
            Performs the range operation, taking the start point, the current point and whether the operation started in the first or second half of the axis
            </summary>
            <param name="currentPoint">The current mouse point</param>
            <param name="startPoint">The start mouse point</param>
            <param name="isSecondHalf">If true, the mouse operation started in the second half of the axis</param>
        </member>
        <member name="P:Abt.Controls.SciChart.XAxisDragModifier.ClipModeX">
            <summary>
            Defines how panning behaves when you reach the edge of the X-Axis extents. 
            e.g. ClipMode.ClipAtExtents prevents panning outside of the X-Axis, ClipMode.None allows panning outside
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.XAxisDragModifier.IsDragging">
            <summary>
            Gets a value indicating whether the user is currently dragging the axis
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.YAxisDragModifier">
            <summary>
            The <see cref="T:Abt.Controls.SciChart.YAxisDragModifier"/> provides a mouse drag to scale the Y-Axis. 
            This behaviour scales the axis in a different direction depending on which half of the axis the user starts the operation in
            Add to a <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.YAxisDragModifier.YAxisIdProperty">
            <summary>
            Defines the ExecuteOn DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.YAxisDragModifier.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.YAxisDragModifier.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.YAxisDragModifier.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instance
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.YAxisDragModifier.OnModifierMouseDown(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.YAxisDragModifier.OnModifierMouseMove(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.YAxisDragModifier.OnModifierMouseUp(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.YAxisDragModifier.GetIsTopHalf(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Gets whether the specified mouse point is within the top-most half of the Axis bounds
            </summary>
            <param name="point">The mouse point.</param>
            <param name="axisBounds">The axis bounds.</param>
            <returns>True if the point is within the top-most half of the axis bounds, else false</returns>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.YAxisDragModifier.YAxisId">
            <summary>
            Defines which YAxis to bind the YAxisDragModifier to, matching by string Id
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.YAxisDragModifier.DragMode">
            <summary>
            Gets or sets the DragMode of the <see cref="T:Abt.Controls.SciChart.YAxisDragModifier"/>. This modifier may be used to scale the <see cref="P:Abt.Controls.SciChart.AxisBase.VisibleRange"/> using <see cref="F:Abt.Controls.SciChart.AxisDragModes.AbsoluteScale"/>, 
            scale the <see cref="P:Abt.Controls.SciChart.AxisBase.GrowBy"/> using <see cref="F:Abt.Controls.SciChart.AxisDragModes.RelativeScale"/> (may be used when AutoRange=true), 
            or pan the <see cref="P:Abt.Controls.SciChart.AxisBase.VisibleRange"/> creating a scrolling or vertical pan effect.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.YAxisDragModifier.IsDragging">
            <summary>
            Gets whether the user is currently dragging the Axis
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.CustomYAxisDragModifier">
            <summary>
            OBSOLETE
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ExecuteOn">
            <summary>
            Defines constants for when a <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> operation occurs
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ExecuteOn.MouseLeftButton">
            <summary>
            Execute on MouseRightButton
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ExecuteOn.MouseMiddleButton">
            <summary>
            Execute on MouseRightButton
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ExecuteOn.MouseRightButton">
            <summary>
            Execute on MouseRightButton
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ExecuteOn.MouseDoubleClick">
            <summary>
            Execute on MouseDoubleClick
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ExecuteOn.MouseRightButtonUp">
            <summary>
            Execute on MouseRightButtonUp
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ZoomExtentsModifier">
            <summary>
            Provides zoom to extents, or zoom to specific X and Y VisibleRange on mouse interaction
            </summary>
            <example>
            The following example will create a modifier which zooms to extents on Mouse Double Click
            
            <code>
            ZoomExtentsModifier z = new ZoomExtentsModifier();
            z.ExecuteOn = ExecuteOn.MouseDoubleClick;
            </code>
            </example>
        </member>
        <member name="F:Abt.Controls.SciChart.ZoomExtentsModifier.IsAnimatedProperty">
            <summary>
            Defines the IsAnimated DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ZoomExtentsModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ZoomExtentsModifier"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ZoomExtentsModifier.OnModifierDoubleClick(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ZoomExtentsModifier.OnModifierMouseUp(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.ZoomExtentsModifier.IsAnimated">
            <summary>
            Gets or sets whether zoom operations should be animated. Default true
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ZoomPanModifier">
            <summary>
            The <see cref="T:Abt.Controls.SciChart.ZoomPanModifier"/> provides a mouse drag to pan the X and Y axes.
            Add to a <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ZoomPanModifier.XyDirectionProperty">
            <summary>
            Defines the XyDirection dependency property
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ZoomPanModifier.ClipModeXProperty">
            <summary>
            Defines the ClipToExtentsX Dependency Property 
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ZoomPanModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ZoomPanModifier"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ZoomPanModifier.OnModifierMouseDown(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ZoomPanModifier.OnModifierMouseMove(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ZoomPanModifier.OnModifierMouseUp(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.ZoomPanModifier.XyDirection">
            <summary>
            Defines the direction of the ZoomPanModifier
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ZoomPanModifier.ClipModeX">
            <summary>
            Defines how panning behaves when you reach the edge of the X-Axis extents. 
            e.g. ClipMode.ClipAtExtents prevents panning outside of the X-Axis, ClipMode.None allows panning outside
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ZoomPanModifier.IsDragging">
            <summary>
            Gets whether the user is currently dragging the chart
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.Numerics.ICategoryCoordinateCalculator">
            <summary>
            Defines the interface to a <see cref="T:Abt.Controls.SciChart.CategoryDateTimeAxis"/> specific ICoordinateCalculator, to convert from pixel coordinate to index to data value and back
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1">
            <summary>
            Using pre-computed constants, types which implement ICoordinateCalculator can convert from pixel coordinate to data value and back
            </summary>
            <typeparam name="T">The type of the underlying data to convert</typeparam>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1.GetCoordinate(System.DateTime)">
            <summary>
            Transforms the DateTime data value into a pixel coordinate
            </summary>
            <param name="dataValue">The DateTime data value</param>
            <returns>The pixel coordinate</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1.GetCoordinate(`0)">
            <summary>
            Transforms a data value into a pixel coordinate
            </summary>
            <param name="dataValue">The data value</param>
            <returns>The pixel coordinate</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1.GetDataValue(System.Double)">
            <summary>
            Transforms a pixel coordinate into a data value
            </summary>
            <param name="pixelCoordinate">The pixel coordinate</param>
            <returns>The data value</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1.TranslateBy(System.Double,Abt.Controls.SciChart.DoubleRange)">
            <summary>
            Translates the min and max of the input range by the specified data value. Specific implementations of <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/> such as
            <see cref="T:Abt.Controls.SciChart.Numerics.DoubleCoordinateCalculator"/>, <see cref="T:Abt.Controls.SciChart.Numerics.LogarithmicDoubleCoordinateCalculator"/> and <see cref="T:Abt.Controls.SciChart.Numerics.CategoryCoordinateCalculator"/> will treat this differently
            </summary>
            <param name="pixels">The number of pixels to translate by. InputRange min and max will be translated by this positive or negative amount</param>
            <param name="inputRange">The input <see cref="T:Abt.Controls.SciChart.DoubleRange"/> to translate</param>
            <returns>A new instance of <see cref="T:Abt.Controls.SciChart.DoubleRange"/> with the translation applied</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1.IsCategoryAxisCalculator">
            <summary>
            Gets a value indicating whether this is a category axis coordinate calculator
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.ICategoryCoordinateCalculator.TransformIndexToData(System.Int32)">
            <summary>
            Takes an integer index (or point number) to the underlying data and transforms to the data value on the axis. 
            
            e.g. if the axis is a CategoryDateTimeAxis, accepts index, returns DateTime. 
            
            If the index lies outside of the data-range, a projection is performed
            </summary>
            <param name="index">The index to the underlying data series</param>
            <returns>The data value</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.ICategoryCoordinateCalculator.TransformDataToIndex(System.DateTime)">
            <summary>
            Takes a DateTime data-value and transforms to integer index on the axis
            
            e.g. if the axis is a CategoryDateTimeAxis, accepts DateTime, returns index. 
            
            If the DateTime lies outside of the data-range, a projection is performed
            </summary>
            <param name="dataValue">The data value</param>
            <returns>The index to the underlying data series</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.DateTimeTickCalculator.GetMajorTicks(Abt.Controls.SciChart.IRange{System.DateTime},Abt.Controls.SciChart.IAxisDelta{System.TimeSpan})">
            <summary>
            Given a date tick range with Min, Max, MajorDelta and MinorDelta, return an array of absolute values for major ticks
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.DateTimeTickCalculator.GetMinorTicks(Abt.Controls.SciChart.IRange{System.DateTime},Abt.Controls.SciChart.IAxisDelta{System.TimeSpan})">
            <summary>
            Given a date tick range with Min, Max, MajorDelta and MinorDelta, return an array of absolute values for major ticks
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.NumericTickCalculator.GetDeltaFromRange(System.Double,System.Double,System.Int32,Abt.Controls.SciChart.AxisMode,System.UInt32)">
            <summary>
            Given an absolute Axis Min and Max, returns a TickRange instance containing sensible MinorDelta and MajorDelta values
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.NumericTickCalculator.GetMajorTicks(Abt.Controls.SciChart.IRange{System.Double},Abt.Controls.SciChart.IAxisDelta{System.Double},Abt.Controls.SciChart.AxisMode)">
            <summary>
            Given a double tick range with Min, Max, MajorDelta and MinorDelta, return an array of absolute values for major ticks
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.NumericTickCalculator.GetMinorTicks(Abt.Controls.SciChart.IRange{System.Double},Abt.Controls.SciChart.DoubleAxisDelta)">
            <summary>
            Given a tickRange with Min, Max, MajorDelta and MinorDelta, return an array of absolute values for minor ticks
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.IPointResampler_Old.RequiresReduction(Abt.Controls.SciChart.IndexRange,System.Int32)">
            <summary>
            Returns true if a dataset with the specified index range requires point reduction on the given viewport size
            </summary>
            <param name="pointIndices"></param>
            <param name="viewportWidth"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.IPointResampler_Old.WithMode(Abt.Controls.SciChart.Numerics.ResamplingMode)">
            <summary>
            Sets a new ResamplingMode on the IPointsResampler
            </summary>
            <param name="newMode"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.IPointResampler_Old.ReducePoints(System.Collections.IList,System.Int32)">
            <summary>
            Reduces the input points using the current ResamplingMode and Resolution
            </summary>
            <param name="inputPoints"></param>
            <param name="viewportWidth"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.IPointResampler_Old.ReducePoints(System.Collections.IList,Abt.Controls.SciChart.IndexRange,System.Int32)">
            <summary>
            Reduces the input points using the current ResamplingMode and Resolution
            </summary>
            <param name="inputPoints"></param>
            <param name="pointIndices"></param>
            <param name="viewportWidth"></param>
            <returns></returns>
        </member>
        <member name="P:Abt.Controls.SciChart.Numerics.IPointResampler_Old.Resolution">
            <summary>
            Gets the current resolution. This must be greater than equal to 2 and the higher the number, the larger the reduced datasets
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Numerics.IPointResampler_Old.ResamplingMode">
            <summary>
            Gets the current Resampling Mode.
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.Numerics.ResamplingMode">
            <summary>
            Defines the ResamplingMode used by a <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Abt.Controls.SciChart.Numerics.ResamplingMode.None">
            <summary>
            Do not use resampling when redrawing a series
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.Numerics.ResamplingMode.MinMax">
            <summary>
            Resample by taking the min-max of oversampled data. This results in the most visually accurate resampling, with the most performant rendering
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.Numerics.ResamplingMode.Mid">
            <summary>
            Resample by taking the median point of oversampled data
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.Numerics.ResamplingMode.Max">
            <summary>
            Resample by taking the maximum point of oversampled data
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.Numerics.ResamplingMode.Min">
            <summary>
            Resample by taking the minimum point of oversampled data
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.Numerics.ResamplingMode.Nyquist">
            <summary>
            Resample by taking the minimum data-set to accurately represent the original points without incurring aliasing or other artifacts
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.NiceDoubleScale.NiceNum(System.Double,System.Boolean)">
            <summary>
            Returns a "nice" number approximately equal to the range bounds. 
            Rounds the number if round = true. 
            Takes the ceiling if round = false
            </summary>
            <param name="range"></param>
            <param name="round"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.PointResampler_Old.#ctor(System.Int32,Abt.Controls.SciChart.Numerics.ResamplingMode)">
            <summary>
            Creates a new PointResampler instance
            </summary>
            <param name="resolution">The resolution constant, must be 2 or more. The higher resolution means larger datasets after resampling (which results in cleaner but slower rendering)</param>
            <param name="resamplingMode"></param>
        </member>
        <member name="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculatorFactory">
            <summary>
            Used internally by SciChart. Defines the interface to the coordinate calculator factor, which creates an appropriate coordinate calculator for the <see cref="T:Abt.Controls.SciChart.AxisParams"/> passed in
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.ICoordinateCalculatorFactory.New(Abt.Controls.SciChart.AxisParams)">
            <summary>
            Creates a new <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/>
            </summary>
            <param name="arg">The <see cref="T:Abt.Controls.SciChart.AxisParams"/> instance containing axis data</param>
            <returns>The Coordinate calculator instance</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Numerics.CoordinateCalculatorFactory.New(Abt.Controls.SciChart.AxisParams)">
            <summary>
            Creates a new <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/>
            </summary>
            <param name="arg">The <see cref="T:Abt.Controls.SciChart.AxisParams"/> instance containing axis data</param>
            <returns>
            The Coordinate calculator instance
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Abt.Controls.SciChart.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.Rendering.IBrush2D">
            <summary>
            Defines the interface to a 2D Brush used to paint fills on the <see cref="T:Abt.Controls.SciChart.RenderSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Rendering.IBrush2D.Color">
            <summary>
            Gets the <see cref="P:Abt.Controls.SciChart.Rendering.IBrush2D.Color"/> of the brush. Supports transparency
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Rendering.IBrush2D.ColorCode">
            <summary>
            Gets the integer representation of the Color, used by the renderer
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Rendering.IBrush2D.AlphaBlend">
            <summary>
            Gets whether fills painted with this burhs should be alpha blended or not
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.Rendering.IPen2D">
            <summary>
            Defines the interface to a 2D pen, used to draw lines on the <see cref="T:Abt.Controls.SciChart.RenderSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Rendering.IPen2D.StrokeThickness">
            <summary>
            Gets the stroke thickness
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Rendering.IPen2D.Antialiased">
            <summary>
            Gets if antialiasing should be used
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Rendering.IPen2D.Color">
            <summary>
            Gets the color of the pen. Supports transparency
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Rendering.IPen2D.ColorCode">
            <summary>
            Used internally by the renderer, gets the integer color-code that represents the Pen color
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.ReadWriteMode.ReadOnly">
            <summary>
            On Dispose of a BitmapContext, do not Invalidate
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.ReadWriteMode.ReadWrite">
            <summary>
            On Dispose of a BitmapContext, invalidate the bitmap
            </summary>
        </member>
        <member name="T:System.Windows.Media.Imaging.BitmapContext">
            <summary>
            A disposable cross-platform wrapper around a WriteableBitmap, allowing a common API for Silverlight &quot; WPF with locking &quot; unlocking if necessary
            </summary>
            <remarks>Attempting to put as many preprocessor hacks in this file, to keep the rest of the codebase relatively clean</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.#ctor(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Creates an instance of a BitmapContext, with default mode = ReadWrite
            </summary>
            <param name="writeableBitmap"></param>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.#ctor(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Media.Imaging.ReadWriteMode)">
            <summary>
            Creates an instance of a BitmapContext, with specified ReadWriteMode
            </summary>
            <param name="writeableBitmap"></param>
            <param name="mode"></param>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.BlockCopy(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32)">
            <summary>
            Performs a Copy operation from source Bto destination BitmapContext
            </summary>
            <remarks>Equivalent to calling Buffer.BlockCopy in Silverlight, or native memcpy in WPF</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.BlockCopy(System.Int32[],System.Int32,System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32)">
            <summary>
            Performs a Copy operation from source Array to destination BitmapContext
            </summary>
            <remarks>Equivalent to calling Buffer.BlockCopy in Silverlight, or native memcpy in WPF</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.BlockCopy(System.Byte[],System.Int32,System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32)">
            <summary>
            Performs a Copy operation from source Array to destination BitmapContext
            </summary>
            <remarks>Equivalent to calling Buffer.BlockCopy in Silverlight, or native memcpy in WPF</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.BlockCopy(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Performs a Copy operation from source BitmapContext to destination Array
            </summary>
            <remarks>Equivalent to calling Buffer.BlockCopy in Silverlight, or native memcpy in WPF</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.BlockCopy(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Performs a Copy operation from source BitmapContext to destination Array
            </summary>
            <remarks>Equivalent to calling Buffer.BlockCopy in Silverlight, or native memcpy in WPF</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.Clear">
            <summary>
            Clears the BitmapContext, filling the underlying bitmap with zeros
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.Dispose">
            <summary>
            Disposes the BitmapContext, unlocking it and invalidating if WPF
            </summary>
        </member>
        <member name="T:System.Windows.Media.Imaging.BitmapFactory">
            <summary>
            Cross-platform factory for WriteableBitmaps
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapFactory.New(System.Int32,System.Int32)">
            <summary>
            Creates a new WriteableBitmap of the specified width and height
            </summary>
            <remarks>For WPF the default DPI is 96x96 and PixelFormat is BGRA32</remarks>
            <param name="pixelWidth"></param>
            <param name="pixelHeight"></param>
            <returns></returns>
        </member>
        <member name="T:System.Windows.Media.Imaging.WriteableBitmapExtensions">
            <summary>
            Collection of draw extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of draw extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of blit (copy) extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of interchange extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of draw extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of filter / convolution extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of draw extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of draw spline extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of transformation extension methods for the Silverlight WriteableBitmap class.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.INSIDE">
            <summary>
            Bitfields used to partition the space into 9 regiond
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Clear(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Media.Color)">
            <summary>
            Fills the whole WriteableBitmap with a color.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="color">The color used for filling.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Clear(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Fills the whole WriteableBitmap with an empty color (0).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Clone(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Clones the specified WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <returns>A copy of the WriteableBitmap.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ForEach(System.Windows.Media.Imaging.WriteableBitmap,System.Func{System.Int32,System.Int32,System.Windows.Media.Color})">
            <summary>
            Applies the given function to all the pixels of the bitmap in 
            order to set their color.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="func">The function to apply. With parameters x, y and a color as a result</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ForEach(System.Windows.Media.Imaging.WriteableBitmap,System.Func{System.Int32,System.Int32,System.Windows.Media.Color,System.Windows.Media.Color})">
            <summary>
            Applies the given function to all the pixels of the bitmap in 
            order to set their color.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="func">The function to apply. With parameters x, y, source color and a color as a result</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.GetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the x, y coordinate as integer.  
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The color of the pixel at x, y.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.GetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the x, y coordinate as a Color struct.  
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The color of the pixel at x, y as a Color struct.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.GetBrightness(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Gets the brightness / luminance of the pixel at the x, y coordinate as byte.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The brightness of the pixel at x, y.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the pixel using a precalculated index (faster). 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="index">The coordinate index.</param>
            <param name="r">The red value of the color.</param>
            <param name="g">The green value of the color.</param>
            <param name="b">The blue value of the color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the pixel. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate (row).</param>
            <param name="y">The y coordinate (column).</param>
            <param name="r">The red value of the color.</param>
            <param name="g">The green value of the color.</param>
            <param name="b">The blue value of the color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the pixel including the alpha value and using a precalculated index (faster). 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="index">The coordinate index.</param>
            <param name="a">The alpha value of the color.</param>
            <param name="r">The red value of the color.</param>
            <param name="g">The green value of the color.</param>
            <param name="b">The blue value of the color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the pixel including the alpha value. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate (row).</param>
            <param name="y">The y coordinate (column).</param>
            <param name="a">The alpha value of the color.</param>
            <param name="r">The red value of the color.</param>
            <param name="g">The green value of the color.</param>
            <param name="b">The blue value of the color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Windows.Media.Color)">
            <summary>
            Sets the color of the pixel using a precalculated index (faster). 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="index">The coordinate index.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Sets the color of the pixel. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate (row).</param>
            <param name="y">The y coordinate (column).</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Byte,System.Windows.Media.Color)">
            <summary>
            Sets the color of the pixel using an extra alpha value and a precalculated index (faster). 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="index">The coordinate index.</param>
            <param name="a">The alpha value of the color.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Byte,System.Windows.Media.Color)">
            <summary>
            Sets the color of the pixel using an extra alpha value. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate (row).</param>
            <param name="y">The y coordinate (column).</param>
            <param name="a">The alpha value of the color.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Sets the color of the pixel using a precalculated index (faster).  
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="index">The coordinate index.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the color of the pixel. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate (row).</param>
            <param name="y">The y coordinate (column).</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Blit(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Copies (blits) the pixels from the WriteableBitmap source to the destination WriteableBitmap (this).
            </summary>
            <param name="bmp">The destination WriteableBitmap.</param>
            <param name="destRect">The rectangle that defines the destination region.</param>
            <param name="source">The source WriteableBitmap.</param>
            <param name="sourceRect">The rectangle that will be copied from the source to the destination.</param>
            <param name="BlendMode">The blending mode <see cref="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode"/>.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Blit(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect)">
            <summary>
            Copies (blits) the pixels from the WriteableBitmap source to the destination WriteableBitmap (this).
            </summary>
            <param name="bmp">The destination WriteableBitmap.</param>
            <param name="destRect">The rectangle that defines the destination region.</param>
            <param name="source">The source WriteableBitmap.</param>
            <param name="sourceRect">The rectangle that will be copied from the source to the destination.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Blit(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Point,System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Color,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Copies (blits) the pixels from the WriteableBitmap source to the destination WriteableBitmap (this).
            </summary>
            <param name="bmp">The destination WriteableBitmap.</param>
            <param name="destPosition">The destination position in the destination bitmap.</param>
            <param name="source">The source WriteableBitmap.</param>
            <param name="sourceRect">The rectangle that will be copied from the source to the destination.</param>
            <param name="color">If not Colors.White, will tint the source image. A partially transparent color and the image will be drawn partially transparent.</param>
            <param name="BlendMode">The blending mode <see cref="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode"/>.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Blit(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Color,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Copies (blits) the pixels from the WriteableBitmap source to the destination WriteableBitmap (this).
            </summary>
            <param name="bmp">The destination WriteableBitmap.</param>
            <param name="destRect">The rectangle that defines the destination region.</param>
            <param name="source">The source WriteableBitmap.</param>
            <param name="sourceRect">The rectangle that will be copied from the source to the destination.</param>
            <param name="color">If not Colors.White, will tint the source image. A partially transparent color and the image will be drawn partially transparent. If the BlendMode is ColorKeying, this color will be used as color key to mask all pixels with this value out.</param>
            <param name="BlendMode">The blending mode <see cref="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode"/>.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ToByteArray(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Copies the Pixels from the WriteableBitmap into a ARGB byte array starting at a specific Pixels index.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="offset">The starting Pixels index.</param>
            <param name="count">The number of Pixels to copy, -1 for all</param>
            <returns>The color buffer as byte ARGB values.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ToByteArray(System.Windows.Media.Imaging.WriteableBitmap,System.Int32)">
            <summary>
            Copies the Pixels from the WriteableBitmap into a ARGB byte array.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="count">The number of pixels to copy.</param>
            <returns>The color buffer as byte ARGB values.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ToByteArray(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Copies all the Pixels from the WriteableBitmap into a ARGB byte array.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <returns>The color buffer as byte ARGB values.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromByteArray(System.Windows.Media.Imaging.WriteableBitmap,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies color information from an ARGB byte array into this WriteableBitmap starting at a specific buffer index.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="offset">The starting index in the buffer.</param>
            <param name="count">The number of bytes to copy from the buffer.</param>
            <param name="buffer">The color buffer as byte ARGB values.</param>
            <returns>The WriteableBitmap that was passed as parameter.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromByteArray(System.Windows.Media.Imaging.WriteableBitmap,System.Byte[],System.Int32)">
            <summary>
            Copies color information from an ARGB byte array into this WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="count">The number of bytes to copy from the buffer.</param>
            <param name="buffer">The color buffer as byte ARGB values.</param>
            <returns>The WriteableBitmap that was passed as parameter.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromByteArray(System.Windows.Media.Imaging.WriteableBitmap,System.Byte[])">
            <summary>
            Copies all the color information from an ARGB byte array into this WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="buffer">The color buffer as byte ARGB values.</param>
            <returns>The WriteableBitmap that was passed as parameter.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.WriteTga(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream)">
            <summary>
            Writes the WriteableBitmap as a TGA image to a stream. 
            Used with permission from Nokola: http://nokola.com/blog/post/2010/01/21/Quick-and-Dirty-Output-of-WriteableBitmap-as-TGA-Image.aspx
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="destination">The destination stream.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromResource(System.Windows.Media.Imaging.WriteableBitmap,System.String)">
            <summary>
            Loads an image from the applications resource file and fills this WriteableBitmap with it.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="relativePath">Only the relative path to the resource file. The assembly name is retrieved automatically.</param>
            <returns>The WriteableBitmap that was passed as parameter.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromContent(System.Windows.Media.Imaging.WriteableBitmap,System.String)">
            <summary>
            Loads an image from the applications content and fills this WriteableBitmap with it.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="relativePath">Only the relative path to the content file.</param>
            <returns>The WriteableBitmap that was passed as parameter.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillRectangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a filled rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillRectangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Draws a filled rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color.</param>
            <param name="blendMode">The blend mode.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillEllipse(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillEllipse(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillEllipseCentered(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillEllipseCentered(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillPolygon(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Windows.Media.Color)">
            <summary>
            Draws a filled polygon. Add the first point also at the end of the array if the line should be closed.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points of the polygon in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillPolygon(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Int32,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Draws a filled polygon. Add the first point also at the end of the array if the line should be closed.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points of the polygon in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
            <param name="color">The color for the line.</param>
            <param name="blendMode">The blend mode. Default is Alpha</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillQuad(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a filled quad.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="x4">The x-coordinate of the 4th point.</param>
            <param name="y4">The y-coordinate of the 4th point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillQuad(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a filled quad.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="x4">The x-coordinate of the 4th point.</param>
            <param name="y4">The y-coordinate of the 4th point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillTriangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a filled triangle.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillTriangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a filled triangle.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ComputeBezierPoints(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32)">
            <summary>
            Draws a filled, cubic Beziér spline defined by start, end and two control points.
            </summary>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="cx1">The x-coordinate of the 1st control point.</param>
            <param name="cy1">The y-coordinate of the 1st control point.</param>
            <param name="cx2">The x-coordinate of the 2nd control point.</param>
            <param name="cy2">The y-coordinate of the 2nd control point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color.</param>
            <param name="context">The bitmap context.</param>
            <param name="w">The width of the bitmap.</param>
            <param name="h">The height of the bitmap.</param> 
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillBeziers(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Windows.Media.Color)">
            <summary>
            Draws a series of filled, cubic Beziér splines each defined by start, end and two control points. 
            The ending point of the previous curve is used as starting point for the next. 
            Therfore the inital curve needs four points and the subsequent 3 (2 control and 1 end point).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, cx1, cy1, cx2, cy2, x2, y2, cx3, cx4 ..., xn, yn).</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillBeziers(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Int32)">
            <summary>
            Draws a series of filled, cubic Beziér splines each defined by start, end and two control points. 
            The ending point of the previous curve is used as starting point for the next. 
            Therfore the inital curve needs four points and the subsequent 3 (2 control and 1 end point).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, cx1, cy1, cx2, cy2, x2, y2, cx3, cx4 ..., xn, yn).</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ComputeSegmentPoints(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32)">
            <summary>
            Computes the discrete segment points of a Cardinal spline (cubic) defined by four control points.
            </summary>
            <param name="x1">The x-coordinate of the 1st control point.</param>
            <param name="y1">The y-coordinate of the 1st control point.</param>
            <param name="x2">The x-coordinate of the 2nd control point.</param>
            <param name="y2">The y-coordinate of the 2nd control point.</param>
            <param name="x3">The x-coordinate of the 3rd control point.</param>
            <param name="y3">The y-coordinate of the 3rd control point.</param>
            <param name="x4">The x-coordinate of the 4th control point.</param>
            <param name="y4">The y-coordinate of the 4th control point.</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color.</param>
            <param name="context">The context containing the pixels array.</param>
            <param name="w">The width of the bitmap.</param>
            <param name="h">The height of the bitmap.</param> 
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillCurve(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Windows.Media.Color)">
            <summary>
            Draws a filled Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillCurve(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Int32)">
            <summary>
            Draws a filled Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillCurveClosed(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Windows.Media.Color)">
            <summary>
            Draws a filled, closed Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillCurveClosed(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Int32)">
            <summary>
            Draws a filled, closed Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.KernelGaussianBlur5x5">
            <summary>
             Gaussian blur kernel with the size 5x5
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.KernelGaussianBlur3x3">
            <summary>
             Gaussian blur kernel with the size 3x3
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.KernelSharpen3x3">
            <summary>
             Sharpen kernel with the size 3x3
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Convolute(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[0:,0:])">
            <summary>
            Creates a new filtered WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="kernel">The kernel used for convolution.</param>
            <returns>A new WriteableBitmap that is a filtered version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Convolute(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Creates a new filtered WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="kernel">The kernel used for convolution.</param>
            <param name="kernelFactorSum">The factor used for the kernel summing.</param>
            <param name="kernelOffsetSum">The offset used for the kernel summing.</param>
            <returns>A new WriteableBitmap that is a filtered version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Invert(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Creates a new inverted WriteableBitmap and returns it.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <returns>The new inverted WriteableBitmap.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ComputeOutCode(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Compute the bit code for a point (x, y) using the clip rectangle
            bounded diagonally by (xmin, ymin), and (xmax, ymax)
            ASSUME THAT xmax , xmin , ymax and ymin are global constants.
            </summary>
            <param name="extents">The extents.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.CohenSutherlandLineClip(System.Windows.Rect,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Cohen–Sutherland clipping algorithm clips a line from
            P0 = (x0, y0) to P1 = (x1, y1) against a rectangle with 
            diagonal from (xmin, ymin) to (xmax, ymax).
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Cohen%E2%80%93Sutherland_algorithm for details</remarks>
            <returns>a list of two points in the resulting clipped line, or zero</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.AlphaBlend(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Alpha blends 2 premultiplied colors with each other
            </summary>
            <param name="sa">Source alpha color component</param>
            <param name="sr">Premultiplied source red color component</param>
            <param name="sg">Premultiplied source green color component</param>
            <param name="sb">Premultiplied source blue color component</param>
            <param name="destPixel">Premultiplied destination color</param>
            <returns>Premultiplied blended color value</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawWuLine(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an anti-aliased, alpha blended, colored line by connecting two points using Wu's antialiasing algorithm
            Uses the pixels array and the width directly for best performance.
            </summary>
            <param name="context">An array containing the pixels as int RGBA value.</param>
            <param name="pixelWidth">The width of one scanline in the pixels array.</param>
            <param name="pixelHeight">The height of the bitmap.</param>
            <param name="X0">The x0.</param>
            <param name="Y0">The y0.</param>
            <param name="X1">The x1.</param>
            <param name="Y1">The y1.</param>
            <param name="sa">Alpha color component</param>
            <param name="sr">Premultiplied red color component</param>
            <param name="sg">Premultiplied green color component</param>
            <param name="sb">Premultiplied blue color component</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineBresenham(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a colored line by connecting two points using the Bresenham algorithm.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineBresenham(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a colored line by connecting two points using the Bresenham algorithm.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineDDA(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a colored line by connecting two points using a DDA algorithm (Digital Differential Analyzer).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineDDA(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a colored line by connecting two points using a DDA algorithm (Digital Differential Analyzer).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLine(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a colored line by connecting two points using an optimized DDA.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLine(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a colored line by connecting two points using an optimized DDA.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLine(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a colored line by connecting two points using an optimized DDA. 
            Uses the pixels array and the width directly for best performance.
            </summary>
            <param name="context">A context containing the pixels as int RGBA value.</param>
            <param name="pixelWidth">The width of one scanline in the pixels array.</param>
            <param name="pixelHeight">The height of the bitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineAa(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary> 
            Draws an anti-aliased line, using an optimized version of Gupta-Sproull algorithm 
            From http://nokola.com/blog/post/2010/10/14/Anti-aliased-Lines-And-Optimizing-Code-for-Windows-Phone-7e28093First-Look.aspx
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
            </summary> 
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineAa(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> 
            Draws an anti-aliased line, using an optimized version of Gupta-Sproull algorithm 
            From http://nokola.com/blog/post/2010/10/14/Anti-aliased-Lines-And-Optimizing-Code-for-Windows-Phone-7e28093First-Look.aspx
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
            </summary> 
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineAa(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> 
            Draws an anti-aliased line, using an optimized version of Gupta-Sproull algorithm 
            From http://nokola.com/blog/post/2010/10/14/Anti-aliased-Lines-And-Optimizing-Code-for-Windows-Phone-7e28093First-Look.aspx
            <param name="context">A context containing the pixels as int RGBA value.</param>
            <param name="pixelWidth">The width of one scanline in the pixels array.</param>
            <param name="pixelHeight">The height of the bitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
            </summary> 
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.AlphaBlendNormalOnPremultiplied(System.Int32*,System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary> 
            Blends a specific source color on top of a destination premultiplied color 
            </summary> 
            <param name="pixels">pixels array</param> 
            <param name="index">Index of destination pixel</param> 
            <param name="sa">Source alpha (0..255)</param> 
            <param name="srb">Source non-premultiplied red and blue component in the format 0x00rr00bb</param> 
            <param name="sg">Source green component (0..255)</param> 
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawPolyline(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Windows.Media.Color)">
            <summary>
            Draws a polyline. Add the first point also at the end of the array if the line should be closed.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points of the polyline in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawPolyline(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Int32)">
            <summary>
            Draws a polyline. Add the first point also at the end of the array if the line should be closed.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points of the polyline in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawTriangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawTriangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawQuad(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a quad.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="x4">The x-coordinate of the 4th point.</param>
            <param name="y4">The y-coordinate of the 4th point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawQuad(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a quad.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="x4">The x-coordinate of the 4th point.</param>
            <param name="y4">The y-coordinate of the 4th point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawRectangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawRectangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawEllipse(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawEllipse(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawEllipseCentered(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawEllipseCentered(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawBezier(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a cubic Beziér spline defined by start, end and two control points.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="cx1">The x-coordinate of the 1st control point.</param>
            <param name="cy1">The y-coordinate of the 1st control point.</param>
            <param name="cx2">The x-coordinate of the 2nd control point.</param>
            <param name="cy2">The y-coordinate of the 2nd control point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawBezier(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a cubic Beziér spline defined by start, end and two control points.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="cx1">The x-coordinate of the 1st control point.</param>
            <param name="cy1">The y-coordinate of the 1st control point.</param>
            <param name="cx2">The x-coordinate of the 2nd control point.</param>
            <param name="cy2">The y-coordinate of the 2nd control point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawBeziers(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Windows.Media.Color)">
            <summary>
            Draws a series of cubic Beziér splines each defined by start, end and two control points. 
            The ending point of the previous curve is used as starting point for the next. 
            Therfore the inital curve needs four points and the subsequent 3 (2 control and 1 end point).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, cx1, cy1, cx2, cy2, x2, y2, cx3, cx4 ..., xn, yn).</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawBeziers(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Int32)">
            <summary>
            Draws a series of cubic Beziér splines each defined by start, end and two control points. 
            The ending point of the previous curve is used as starting point for the next. 
            Therfore the inital curve needs four points and the subsequent 3 (2 control and 1 end point).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, cx1, cy1, cx2, cy2, x2, y2, cx3, cx4 ..., xn, yn).</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawCurveSegment(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32)">
            <summary>
            Draws a segment of a Cardinal spline (cubic) defined by four control points.
            </summary>
            <param name="x1">The x-coordinate of the 1st control point.</param>
            <param name="y1">The y-coordinate of the 1st control point.</param>
            <param name="x2">The x-coordinate of the 2nd control point.</param>
            <param name="y2">The y-coordinate of the 2nd control point.</param>
            <param name="x3">The x-coordinate of the 3rd control point.</param>
            <param name="y3">The y-coordinate of the 3rd control point.</param>
            <param name="x4">The x-coordinate of the 4th control point.</param>
            <param name="y4">The y-coordinate of the 4th control point.</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color.</param>
            <param name="context">The context containing the pixels array.</param>
            <param name="w">The width of the bitmap.</param>
            <param name="h">The height of the bitmap.</param> 
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawCurve(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Windows.Media.Color)">
            <summary>
            Draws a Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawCurve(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Int32)">
            <summary>
            Draws a Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawCurveClosed(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Windows.Media.Color)">
            <summary>
            Draws a closed Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawCurveClosed(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Int32)">
            <summary>
            Draws a closed Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Resize(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation)">
            <summary>
            Creates a new resized WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="width">The new desired width.</param>
            <param name="height">The new desired height.</param>
            <param name="interpolation">The interpolation method that should be used.</param>
            <returns>A new WriteableBitmap that is a resized version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Resize(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation)">
            <summary>
            Creates a new resized bitmap.
            </summary>
            <param name="srcContext">The source context.</param>
            <param name="widthSource">The width of the source pixels.</param>
            <param name="heightSource">The height of the source pixels.</param>
            <param name="width">The new desired width.</param>
            <param name="height">The new desired height.</param>
            <param name="interpolation">The interpolation method that should be used.</param>
            <returns>A new bitmap that is a resized version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Rotate(System.Windows.Media.Imaging.WriteableBitmap,System.Int32)">
            <summary>
            Rotates the bitmap in 90° steps clockwise and returns a new rotated WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="angle">The angle in degress the bitmap should be rotated in 90° steps clockwise.</param>
            <returns>A new WriteableBitmap that is a rotated version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.RotateFree(System.Windows.Media.Imaging.WriteableBitmap,System.Double,System.Boolean)">
            <summary>
            Rotates the bitmap in any degree returns a new rotated WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="angle">Arbitrary angle in 360 Degrees (positive = clockwise).</param>
            <param name="crop">if true: keep the size, false: adjust canvas to new size</param>
            <returns>A new WriteableBitmap that is a rotated version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Flip(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Media.Imaging.WriteableBitmapExtensions.FlipMode)">
            <summary>
            Flips (reflects the image) eiter vertical or horizontal.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="flipMode">The flip mode.</param>
            <returns>A new WriteableBitmap that is a flipped version of the input.</returns>
        </member>
        <member name="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode">
            <summary>
            The blending mode.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Alpha">
            <summary>
            Alpha blendiing uses the alpha channel to combine the source and destination. 
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Additive">
            <summary>
            Additive blending adds the colors of the source and the destination.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Subtractive">
            <summary>
            Subtractive blending subtracts the source color from the destination.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Mask">
            <summary>
            Uses the source color as a mask.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Multiply">
            <summary>
            Multiplies the source color with the destination color.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.ColorKeying">
            <summary>
            Ignores the specified Color
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.None">
            <summary>
            No blending just copies the pixels from the source.
            </summary>
        </member>
        <member name="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation">
            <summary>
            The interpolation method.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation.NearestNeighbor">
            <summary>
            The nearest neighbor algorithm simply selects the color of the nearest pixel.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation.Bilinear">
            <summary>
            Linear interpolation in 2D using the average of 3 neighboring pixels.
            </summary>
        </member>
        <member name="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.FlipMode">
            <summary>
            The mode for flipping.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.FlipMode.Vertical">
            <summary>
            Flips the image vertical (around the center of the y-axis).
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.FlipMode.Horizontal">
            <summary>
            Flips the image horizontal (around the center of the x-axis).
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapContextExtensions.GetBitmapContext(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Gets a BitmapContext within which to perform nested IO operations on the bitmap
            </summary>
            <remarks>For WPF the BitmapContext will lock the bitmap. Call Dispose on the context to unlock</remarks>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapContextExtensions.GetBitmapContext(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Media.Imaging.ReadWriteMode)">
            <summary>
            Gets a BitmapContext within which to perform nested IO operations on the bitmap
            </summary>
            <remarks>For WPF the BitmapContext will lock the bitmap. Call Dispose on the context to unlock</remarks>
            <param name="bmp">The writeable bitmap to get a context for</param>
            <param name="mode">The ReadWriteMode. If set to ReadOnly, the bitmap will not be invalidated on dispose of the context, else it will</param>
            <returns></returns>
        </member>
        <member name="T:Abt.Controls.SciChart.Services.IRenderContext2D">
            <summary>
            Defines the interface to a 2D RenderContext, allowing drawing, blitting and creation of pens and brushes on the <see cref="T:Abt.Controls.SciChart.RenderSurface"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Services.IRenderContext2D.CreateBrush(System.Windows.Media.Color,System.Double,System.Boolean)">
            <summary>
            Creates a <see cref="T:Abt.Controls.SciChart.Rendering.IBrush2D"/> valid for the current render pass. Use this to draw rectangles, polygons and shaded areas 
            </summary>
            <param name="color">The color of the brush, supports transparency</param>
            <param name="opacity">The opacity of the brush</param>
            <param name="alphaBlend">If true, use alphablending when shading</param>
            <returns>The <see cref="T:Abt.Controls.SciChart.Rendering.IBrush2D"/> instance</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Services.IRenderContext2D.CreatePen(System.Windows.Media.Color,System.Boolean,System.Int32,System.Double)">
            <summary>
            Creates a <see cref="T:Abt.Controls.SciChart.Rendering.IPen2D"/> valid for the current render pass. Use this to draw outlines, quads and lines
            </summary>
            <param name="color">The color of the pen, supports transparency</param>
            <param name="antiAliasing">If true, use antialiasing</param>
            <param name="strokeThickness">The strokethickness, default=1.0</param>
            <param name="opacity">The opecity of the pen</param>
            <returns>The <see cref="T:Abt.Controls.SciChart.Rendering.IPen2D"/> instance</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Services.IRenderContext2D.Clear">
            <summary>
            Clears the <see cref="T:Abt.Controls.SciChart.RenderSurface"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Services.IRenderContext2D.Blit(System.Windows.Rect,System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect)">
            <summary>
            Blits the source image onto the <see cref="T:Abt.Controls.SciChart.RenderSurface"/>
            </summary>
            <param name="destRect">The destination rectangle</param>
            <param name="srcImage">The source image</param>
            <param name="srcRect">The source rectangle</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Services.IRenderContext2D.FillRectangle(Abt.Controls.SciChart.Rendering.IBrush2D,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a rectangle on the <see cref="T:Abt.Controls.SciChart.RenderSurface"/> using the specified <see cref="T:Abt.Controls.SciChart.Rendering.IBrush2D"/>
            </summary>
            <param name="brush">The brush</param>
            <param name="x1">The x1 coordinate of the rectangle</param>
            <param name="y1">The y1 coordinate of the rectangle</param>
            <param name="x2">The x2 coordinate of the rectangle</param>
            <param name="y2">The y2 coordinate of the rectangle</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Services.IRenderContext2D.FillPolygon(Abt.Controls.SciChart.Rendering.IBrush2D,System.Int32[])">
            <summary>
            Fills a polygon on the <see cref="T:Abt.Controls.SciChart.RenderSurface"/> using the specifie <see cref="T:Abt.Controls.SciChart.Rendering.IBrush2D"/>
            </summary>
            <param name="brush">The brush</param>
            <param name="pointsList">The list of points defining the closed polygon, where X,Y coordinates are in pairs, e.g. element[0]=x0, element[1]=y0, element[2]=x1 etc</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Services.IRenderContext2D.DrawQuad(Abt.Controls.SciChart.Rendering.IPen2D,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a Quad on the <see cref="T:Abt.Controls.SciChart.RenderSurface"/> using the specified <see cref="T:Abt.Controls.SciChart.Rendering.IPen2D"/>
            </summary>
            <param name="pen">The Pen</param>
            <param name="x1">The x1 coordinate</param>
            <param name="y1">The y1 coordinate</param>
            <param name="x2">The x2 coordinate</param>
            <param name="y2">The y2 coordinate</param>
            <param name="x3">The x3 coordinate</param>
            <param name="y3">The y3 coordinate</param>
            <param name="x4">The x4 coordinate</param>
            <param name="y4">The y4 coordinate</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Services.IRenderContext2D.DrawLine(Abt.Controls.SciChart.Rendering.IPen2D,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line on the <see cref="T:Abt.Controls.SciChart.RenderSurface"/> using the specified <see cref="T:Abt.Controls.SciChart.Rendering.IPen2D"/>
            </summary>
            <param name="pen">The pen</param>
            <param name="x1">The x1 coordinate</param>
            <param name="y1">The y1 coordinate</param>
            <param name="x2">The x2 coordinate</param>
            <param name="y2">The y2 coordinate</param>
        </member>
        <member name="P:Abt.Controls.SciChart.Services.IRenderContext2D.ViewportSize">
            <summary>
            Gets the current size of the viewport.
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.RenderPassInfo">
            <summary>
            Defines data for the current render pass
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RenderPassInfo.ViewportSize">
            <summary>
            Gets or sets the current Viewport Size
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RenderPassInfo.RenderableSeries">
            <summary>
            Gets or sets an array of RenderableSeries to draw
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RenderPassInfo.PointSeries">
            <summary>
            Gets or sets an array of <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which provide data
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RenderPassInfo.DataSeries">
            <summary>
            Gets or sets an array of <see cref="T:Abt.Controls.SciChart.IDataSeries"/> which source data
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RenderPassInfo.IndicesRanges">
            <summary>
            Gets or sets an array of <see cref="T:Abt.Controls.SciChart.IntegerRange"/> which provide indices to the source data-series in view
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RenderPassInfo.XCoordinateCalculator">
            <summary>
            Gets or sets the XAxis CoordinateCalculator for this render pass
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RenderPassInfo.YCoordinateCalculators">
            <summary>
            Gets or sets a keyed dictionary of YAxis CoordinateCalculators
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ISciChartRenderer">
            <summary>
            Defines the interface to the <see cref="T:Abt.Controls.SciChart.SciChartRenderer"/>, which handles the render pass on the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ISciChartRenderer.RenderLoop">
            <summary>
            Executes a single render pass
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.SciChartRenderer">
            <summary>
            Handles the render pass on the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartRenderer.#ctor(Abt.Controls.SciChart.SciChartSurface)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.SciChartRenderer"/> class.
            </summary>
            <param name="sciChartSurface">The parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/></param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartRenderer.RenderLoop">
            <summary>
            Executes a single render pass
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartRenderer.OnLayoutSciChart(Abt.Controls.SciChart.ISciChartSurface)">
            <summary>
            Step 1, perform layout, resize components
            </summary>
            <param name="scs"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartRenderer.PrepareRenderData(Abt.Controls.SciChart.ISciChartSurface,System.Windows.Size)">
            <summary>
            Step 2, prepare render data
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartRenderer.OnDrawAxes(Abt.Controls.SciChart.ISciChartSurface,Abt.Controls.SciChart.RenderPassInfo)">
            <summary>
            Step 3, draw axes
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartRenderer.OnDrawSeries(Abt.Controls.SciChart.ISciChartSurface,Abt.Controls.SciChart.RenderPassInfo)">
            <summary>
            Step 4, draw series
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartRenderer.OnDrawAnnotations(Abt.Controls.SciChart.SciChartSurface,Abt.Controls.SciChart.RenderPassInfo)">
            <summary>
            Step 5, draw annotations
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ThemeManager">
            <summary>
            Provides automatic themeing of <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> via the Theme property
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ThemeManager.ThemeProperty">
            <summary>
            Defines the Theme dependency property
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ThemeManager.GetTheme(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the Theme Attached Property
            </summary>
            <param name="d">The dependency object</param>
            <returns>The current Theme</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.ThemeManager.SetTheme(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the Theme Attached property. For a list of All Themes, see the <see cref="P:Abt.Controls.SciChart.ThemeManager.AllThemes"/> property
            </summary>
            <param name="d">The dependency object</param>
            <param name="value">The current theme</param>
        </member>
        <member name="P:Abt.Controls.SciChart.ThemeManager.AllThemes">
            <summary>
            Gets a list of all available themes
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ISciChartLoggerFacade">
            <summary>
            Defines the interface to a logger facade. If you wish to receive debug log messages from SciChart, then set a logger instance via 
            <see cref="M:Abt.Controls.SciChart.Utility.SciChartDebugLogger.SetLogger(Abt.Controls.SciChart.ISciChartLoggerFacade)"/>. Note that logging will dramatically decrease performance, especially in a real-time scenario
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ISciChartLoggerFacade.Log(System.String,System.Object[])">
            <summary>
            Logs the string format message with optional arguments
            </summary>
            <param name="formatString">The formatting string</param>
            <param name="args">Optional arguments to the formatting string</param>
        </member>
        <member name="T:Abt.Controls.SciChart.Utility.SciChartDebugLogger">
            <summary>
            Provides a debug logger which can be used to pipe debug messages from SciChart to your own code, by setting the <see cref="T:Abt.Controls.SciChart.ISciChartLoggerFacade"/> via SetLogger
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.SciChartDebugLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes a line to the <see cref="T:Abt.Controls.SciChart.ISciChartLoggerFacade"/>. By default, the facade instance is null. In this case nothing happens
            </summary>
            <remarks>Logging is performance intensive and will drastically slow down the chart.</remarks>
            <param name="formatString">The format string</param>
            <param name="args">Optional args for the format string</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.SciChartDebugLogger.SetLogger(Abt.Controls.SciChart.ISciChartLoggerFacade)">
            <summary>
            Sets the <see cref="T:Abt.Controls.SciChart.ISciChartLoggerFacade"/> to write to. By default this is null, but after being set, the <see cref="T:Abt.Controls.SciChart.Utility.SciChartDebugLogger"/> will write all output to this instance
            </summary>
            <param name="loggerFacade">The <see cref="T:Abt.Controls.SciChart.ISciChartLoggerFacade"/> instance.</param>
            <remarks>Logging is performance intensive and will drastically slow down the chart. Enable only when necessary</remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.Utility.SciChartDebugLogger.Instance">
            <summary>
            Gets the singleton <see cref="T:Abt.Controls.SciChart.Utility.SciChartDebugLogger"/> instance
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.Utility.Guard">
            <summary>
            Allows assertions to be built with the following syntax: 
            <code>
            Guard.Assert(123).IsLessThan(456);
            </code>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Guard.ArgumentIsRealNumber(System.Double)">
            <summary>
            Asserts that the argument is a real number
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="doubleValue">The double value.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Guard.DateTimeArgumentIsDefined(System.DateTime,System.String)">
            <summary>
            Asserts that the DateTime is defined, i.e. is not <see cref="F:System.DateTime.MinValue"/> or <see cref="F:System.DateTime.MaxValue"/>
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="value">The value.</param>
            <param name="argName">Name of the arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Guard.Assert(System.IComparable,System.String)">
            <summary>
            Builds an assertion in conjunction with <see cref="T:Abt.Controls.SciChart.Utility.GuardConstraint"/>
            </summary>
            <param name="value">The value.</param>
            <param name="argName">Name of the arg.</param>
            <example>
            <code>
            Guard.Assert(123).IsLessThan(456);
            </code>
            </example>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.Utility.GuardConstraint">
            <summary>
            Allows assertions to be built with the following syntax: 
            <code>
            Guard.Assert(123).IsLessThan(456);
            </code>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.GuardConstraint.#ctor(System.IComparable,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.Utility.GuardConstraint"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="argName">Name of the arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.GuardConstraint.IsLessThan(System.IComparable,System.String)">
            <summary>
            Asserts that the current value is less than the specified other value
            </summary>
            <param name="other">The other value.</param>
            <param name="otherArgName">Name of the other arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.GuardConstraint.IsNotEqualTo(System.IComparable,System.String)">
            <summary>
            Asserts that the current value is not equal to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <param name="otherArgName">Name of the other arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.GuardConstraint.IsNotEqualTo(System.IComparable)">
            <summary>
            Asserts that the current value is not equal to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.GuardConstraint.IsLessThanOrEqualTo(System.IComparable,System.String)">
            <summary>
            Asserts that the current value is less than or equal to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <param name="otherArgName">Name of the other arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.GuardConstraint.IsGreaterThanOrEqualTo(System.IComparable)">
            <summary>
            Asserts that the current value is greater than or equal to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.GuardConstraint.IsGreaterThan(System.IComparable)">
            <summary>
            Asserts that the current value is greater to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.Utility.Mouse.IPublishMouseEvents">
            <summary>
            Defines the interface to a class which publishes mouse events. 
            Used in conjunction with <see cref="T:Abt.Controls.SciChart.Utility.Mouse.IReceiveMouseEvents"/> and <see cref="T:Abt.Controls.SciChart.Utility.Mouse.MouseManager"/> 
            to provide cross-platform WPF and Silverlight mouse eventing
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart.Utility.Mouse.IPublishMouseEvents.MouseLeftButtonDown">
            <summary>
            Occurs when the left mouse button is pressed (or when the tip of the stylus touches the tablet) while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart.Utility.Mouse.IPublishMouseEvents.MouseLeftButtonUp">
            <summary>
            Occurs when the left mouse button is released (or the tip of the stylus is removed from the tablet) while the mouse (or the stylus) is over a <see cref="T:System.Windows.UIElement"/> (or while a <see cref="T:System.Windows.UIElement"/> holds mouse capture).
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart.Utility.Mouse.IPublishMouseEvents.MouseRightButtonDown">
            <summary>
            Occurs when the right mouse button is pressed while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart.Utility.Mouse.IPublishMouseEvents.MouseRightButtonUp">
            <summary>
            Occurs when the right mouse button is released while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>. However, this event will only be raised if a caller marks the preceding <see cref="E:System.Windows.UIElement.MouseRightButtonDown"/> event as handled; see Remarks.
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart.Utility.Mouse.IPublishMouseEvents.MouseMove">
            <summary>
            Occurs when the coordinate position of the mouse (or stylus) changes while over a <see cref="T:System.Windows.UIElement"/> (or while a <see cref="T:System.Windows.UIElement"/> holds mouse capture).
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart.Utility.Mouse.IPublishMouseEvents.MouseWheel">
            <summary>
            Occurs when the user rotates the mouse wheel while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>, or the <see cref="T:System.Windows.UIElement"/> has focus.
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart.Utility.Mouse.IPublishMouseEvents.MouseMiddleButtonDown">
            <summary>
            Occurs when the middle mouse button is pressed while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart.Utility.Mouse.IPublishMouseEvents.MouseMiddleButtonUp">
            <summary>
            Occurs when the middle mouse button is released while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>. However, this event will only be raised if a caller marks the preceding <see cref="E:System.Windows.UIElement.MouseRightButtonDown"/> event as handled; see Remarks.
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.Utility.Mouse.MouseDelegates">
            <summary>
            Proxy class to handle mouse-events between a type which implements <see cref="T:Abt.Controls.SciChart.Utility.Mouse.IPublishMouseEvents"/> and <see cref="T:Abt.Controls.SciChart.Utility.Mouse.IReceiveMouseEvents"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Utility.Mouse.MouseDelegates.Target">
            <summary>
            The target element which will receive the notifications
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Utility.Mouse.MouseDelegates.MouseLeftUpDelegate">
            <summary>
            A proxy delegate for Mouse Left Up events
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Utility.Mouse.MouseDelegates.MouseLeftDownDelegate">
            <summary>
            A proxy delegate for Mouse Left Down events
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Utility.Mouse.MouseDelegates.MouseMoveDelegate">
            <summary>
            A proxy delegate for Mouse Move events
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Utility.Mouse.MouseDelegates.MouseRightUpDelegate">
            <summary>
            A proxy delegate for Mouse Right Up events
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Utility.Mouse.MouseDelegates.MouseRightDownDelegate">
            <summary>
            A proxy delegate for Mouse Right Down events
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Utility.Mouse.MouseDelegates.MouseMiddleDownDelegate">
            <summary>
            A proxy delegate for Mouse Middle Down events
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Utility.Mouse.MouseDelegates.MouseMiddleUpDelegate">
            <summary>
            A proxy delegate for Mouse Middle Up events
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Utility.Mouse.MouseDelegates.MouseWheelDelegate">
            <summary>
            A proxy delegate for Mouse Wheel events
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.Utility.Mouse.IMouseManager">
            <summary>
            Defines the interface to the MouseManager, a cross-platform helper class to propagate mouse events in both Silverlight and WPF 
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Mouse.IMouseManager.Subscribe(Abt.Controls.SciChart.Utility.Mouse.IPublishMouseEvents,Abt.Controls.SciChart.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Subscribes to mouse events on the Source, propagating handlers to the Target
            </summary>
            <param name="source">The source of mouse events</param>
            <param name="target">The target to receive mouse event handlers</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Mouse.IMouseManager.Unsubscribe(Abt.Controls.SciChart.Utility.Mouse.IPublishMouseEvents)">
            <summary>
            Unsubscribes the source from mouse events
            </summary>
            <param name="element">The source to unsubscribe</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Mouse.IMouseManager.Unsubscribe(Abt.Controls.SciChart.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Unsubscribes the element from mouse events
            </summary>
            <param name="element">The element to unsubscribe</param>
        </member>
        <member name="T:Abt.Controls.SciChart.Utility.Mouse.MouseManager">
            <summary>
            A cross-platform helper class to propagate mouse events in both Silverlight and WPF 
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.Utility.Mouse.MouseManager.MouseEventGroupProperty">
            <summary>
            Defines the MouseEventGroup Attached Property
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Mouse.MouseManager.SetMouseEventGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the MouseEventGroup Attached Property
            </summary>
            <param name="element">The element.</param>
            <param name="modifierGroup">The modifier group.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Mouse.MouseManager.GetMouseEventGroup(System.Windows.DependencyObject)">
            <summary>
            Gets the MouseEventGroup Attached Property
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Mouse.MouseManager.Subscribe(Abt.Controls.SciChart.Utility.Mouse.IPublishMouseEvents,Abt.Controls.SciChart.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Subscribes to mouse events on the Source, propagating handlers to the Target
            </summary>
            <param name="source">The source of mouse events</param>
            <param name="target">The target to receive mouse event handlers</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Mouse.MouseManager.Unsubscribe(Abt.Controls.SciChart.Utility.Mouse.IPublishMouseEvents)">
            <summary>
            Unsubscribes the source from subscribers
            </summary>
            <param name="source">The source to unsubscribe</param>
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.Mouse.MouseManager.Unsubscribe(Abt.Controls.SciChart.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Unsubscribes the element from mouse events
            </summary>
            <param name="element">The element to unsubscribe</param>
        </member>
        <member name="T:Abt.Controls.SciChart.Utility.Mouse.RenderSynchronizedMouseMove">
            <summary>
            Creates a 'throttled' MouseMove event which ensures that the UI
            rendering is not starved.
            </summary>    
        </member>
        <member name="M:Abt.Controls.SciChart.Utility.NumberUtil.SortedSwap(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Swaps X1,X2 and Y1,Y2 so that the first coordinate pair is always to the left of the second coordinate pair
            </summary>
            <param name="xCoord1"></param>
            <param name="xCoord2"></param>
            <param name="yCoord1"></param>
            <param name="yCoord2"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.Licensing.SciChartSurfaceLicenseProvider.Validate(System.Object)">
            <summary>
            Validates the component
            </summary>
            <param name="parameter">The component to validate</param>
        </member>
        <member name="T:Abt.Controls.SciChart.IServiceContainer">
            <summary>
            Defines the interface to a ServiceContainer used throughout SciChart. For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IServiceContainer.GetService``1">
            <summary>
            Gets the service instance registered by type. For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
            <typeparam name="T">The type of service to get </typeparam>
            <returns>The service instance, unique to this <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> instance</returns>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.ServiceContainer">
            <summary>
            Provides access to services throughout SciChart. ServiceContainers are created one per <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Abt.Controls.SciChart.AxisBase"/>, <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
            <remarks>Available Services include:
            <list type="bullet">
                <item><see cref="T:Abt.Controls.SciChart.Utility.Mouse.IMouseManager"/>, for subscription to mouse events</item>
                <item><see cref="T:Abt.Controls.SciChart.ISciChartRenderer"/>, for handling of the rendering pipeline</item>
                <item>
                    <see cref="T:Abt.Controls.SciChart.IEventAggregator"/>, with event types as follows:
                    <list type="bullet">
                        <item><see cref="T:Abt.Controls.SciChart.InvalidateSciChartMessage"/></item>
                        <item><see cref="T:Abt.Controls.SciChart.ZoomExtentsMessage"/></item>
                        <item><see cref="T:Abt.Controls.SciChart.SciChartResizedMessage"/></item>
                        <item><see cref="T:Abt.Controls.SciChart.SciChartRenderedMessage"/></item>
                    </list>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ServiceContainer.RegisterService``1(``0)">
            <summary>
            Registers the service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ServiceContainer.GetService``1">
            <summary>
            Gets the service instance registered by type. For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
            <typeparam name="T">The type of service to get</typeparam>
            <returns>The service instance, unique to this <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> instance</returns>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.DefaultViewportManager">
            <summary>
            The DefaultViewportManager performs a naive calculation for X and Y Axis VisibleRange. 
            On each render of the parent SciChartSurface, either autorange to fit the data (depending on the Axis.AutoRange property value), 
            or return the original axis range (no change)
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ViewportManagerBase">
            <summary>
            Defines a base class for a ViewportManager, which may be used to control visible range and ranging on a <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IViewportManager">
            <summary>
            Defines the interface to a ViewportManager, which may be used to intercept the X,Y axis ranging during render and invalidate the parent surface
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IViewportManager.OnVisibleRangeChanged(Abt.Controls.SciChart.IAxis)">
            <summary>
            Called when the <see cref="P:Abt.Controls.SciChart.IAxis.VisibleRange"/> changes for an axis. Override in derived types to get a notification of this occurring
            </summary>
            <param name="axis">The <see cref="T:Abt.Controls.SciChart.IAxis"/>instance</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IViewportManager.CalculateNewYAxisRange(Abt.Controls.SciChart.IAxis,Abt.Controls.SciChart.RenderPassInfo)">
            <summary>
            Called by the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> during render to calculate the new YAxis VisibleRange. Override in derived types to return a custom value
            </summary>
            <param name="yAxis">The YAxis to calculate for</param>
            <param name="renderPassInfo">The current <see cref="T:Abt.Controls.SciChart.RenderPassInfo"/> containing render data</param>
            <returns>The new <see cref="T:Abt.Controls.SciChart.IRange"/> VisibleRange for the axis</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IViewportManager.CalculateNewXAxisRange(Abt.Controls.SciChart.IAxis)">
            <summary>
            Called by the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> during render to calculate the new XAxis VisibleRange. Override in derived types to return a custom value
            </summary>
            <param name="xAxis">The XAxis to calculate for</param>
            <returns>The new <see cref="T:Abt.Controls.SciChart.IRange"/> VisibleRange for the axis</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IViewportManager.OnParentSurfaceRendered(Abt.Controls.SciChart.ISciChartSurface)">
            <summary>
            Called when the <see cref="T:Abt.Controls.SciChart.ISciChartSurface"/> is rendered. 
            </summary>
            <param name="sciChartSurface">The SciChartSurface instance</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IViewportManager.InvalidateParentSurface(Abt.Controls.SciChart.RangeMode)">
            <summary>
            May be called to trigger a redraw on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>. See tne <see cref="T:Abt.Controls.SciChart.RangeMode"/> for available options. 
            </summary>
            <param name="rangeMode">Tne <see cref="T:Abt.Controls.SciChart.RangeMode"/> with options for the re-draw</param>
        </member>
        <member name="P:Abt.Controls.SciChart.IViewportManager.Services">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.ServiceContainer"/> which provides access to services throughout SciChart. 
            ServiceContainers are created one per <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Abt.Controls.SciChart.AxisBase"/>, <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ViewportManagerBase.OnVisibleRangeChanged(Abt.Controls.SciChart.IAxis)">
            <summary>
            Called when the <see cref="P:Abt.Controls.SciChart.IAxis.VisibleRange"/> changes for an axis. Override in derived types to get a notification of this occurring
            </summary>
            <param name="axis">The <see cref="T:Abt.Controls.SciChart.IAxis"/>instance</param>
        </member>
        <member name="M:Abt.Controls.SciChart.ViewportManagerBase.CalculateNewXAxisRange(Abt.Controls.SciChart.IAxis)">
            <summary>
            Called by the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> during render to calculate the new XAxis VisibleRange. Override in derived types to return a custom value
            </summary>
            <param name="xAxis"></param>
            <returns>
            The new <see cref="T:Abt.Controls.SciChart.IRange"/> VisibleRange for the axis
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.ViewportManagerBase.OnParentSurfaceRendered(Abt.Controls.SciChart.ISciChartSurface)">
            <summary>
            Called when the <see cref="T:Abt.Controls.SciChart.ISciChartSurface"/> is rendered.
            </summary>
            <param name="sciChartSurface">The SciChartSurface instance</param>
        </member>
        <member name="M:Abt.Controls.SciChart.ViewportManagerBase.CalculateNewYAxisRange(Abt.Controls.SciChart.IAxis,Abt.Controls.SciChart.RenderPassInfo)">
            <summary>
            Called by the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> during render to calculate the new YAxis VisibleRange. Override in derived types to return a custom value
            </summary>
            <param name="yAxis">The YAxis to calculate for</param>
            <param name="renderPassInfo">The current <see cref="T:Abt.Controls.SciChart.RenderPassInfo"/> containing render data</param>
            <returns>
            The new <see cref="T:Abt.Controls.SciChart.IRange"/> VisibleRange for the axis
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.ViewportManagerBase.OnCalculateNewXRange(Abt.Controls.SciChart.IAxis)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> requests the XAxis VisibleRange. 
            
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="xAxis">The XAxis</param>
            <returns>The new VisibleRange for the XAxis</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.ViewportManagerBase.OnCalculateNewYRange(Abt.Controls.SciChart.IAxis,Abt.Controls.SciChart.RenderPassInfo)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> requests a YAxis VisibleRange.
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="yAxis">The YAxis</param>
            <param name="renderPassInfo">The render pass info.</param>
            <returns>
            The new VisibleRange for the YAxis
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.ViewportManagerBase.InvalidateParentSurface(Abt.Controls.SciChart.RangeMode)">
            <summary>
            Triggers a redraw on the parent surface with the specified RangeMode
            </summary>
            <param name="rangeMode">The <see cref="T:Abt.Controls.SciChart.RangeMode"/> specifying how to redraw the parent surface</param>
        </member>
        <member name="M:Abt.Controls.SciChart.ViewportManagerBase.OnInvalidateParentSurface(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:InvalidateParentSurface"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.ViewportManagerBase.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>
            The disposable Update Suspender
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.ViewportManagerBase.ResumeUpdates(Abt.Controls.SciChart.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
            <param name="suspender"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.ViewportManagerBase.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ViewportManagerBase.Services">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.ServiceContainer"/> which provides access to services throughout SciChart. 
            ServiceContainers are created one per <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Abt.Controls.SciChart.AxisBase"/>, <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ViewportManagerBase.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DefaultViewportManager.OnVisibleRangeChanged(Abt.Controls.SciChart.IAxis)">
            <summary>
            Called when the <see cref="P:Abt.Controls.SciChart.IAxis.VisibleRange"/> changes for an axis. Override in derived types to get a notification of this occurring
            </summary>
            <param name="axis">The <see cref="T:Abt.Controls.SciChart.IAxis"/>instance</param>
        </member>
        <member name="M:Abt.Controls.SciChart.DefaultViewportManager.OnParentSurfaceRendered(Abt.Controls.SciChart.ISciChartSurface)">
            <summary>
            Called when the <see cref="T:Abt.Controls.SciChart.ISciChartSurface"/> is rendered.
            </summary>
            <param name="sciChartSurface">The SciChartSurface instance</param>
        </member>
        <member name="M:Abt.Controls.SciChart.DefaultViewportManager.OnCalculateNewXRange(Abt.Controls.SciChart.IAxis)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> requests the XAxis VisibleRange.
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="xAxis">The XAxis</param>
            <returns>
            The new VisibleRange for the XAxis
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DefaultViewportManager.OnCalculateNewYRange(Abt.Controls.SciChart.IAxis,Abt.Controls.SciChart.RenderPassInfo)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> requests a YAxis VisibleRange.
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="yAxis">The YAxis</param>
            <param name="renderPassInfo"></param>
            <returns>
            The new VisibleRange for the YAxis
            </returns>
        </member>
        <member name="T:Abt.Controls.SciChart.Visuals.Annotations.IAnnotationAdorner">
            <summary>
            Defines the interface to an annotation adorner, which may be placed to drag, or resize an annotation
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Visuals.Annotations.IAnnotationAdorner.Initialize">
            <summary>
            Initializes this adorner.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Visuals.Annotations.IAnnotationAdorner.Clear">
            <summary>
            Clears child markers from the adorner layer
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Visuals.Annotations.IAnnotationAdorner.UpdatePositions">
            <summary>
            Causes a refresh to update the positions of the adorner
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Visuals.Annotations.IAnnotationAdorner.AdornedAnnotation">
            <summary>
            Gets the associated annotation that this instance adorns
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Visuals.Annotations.AdornerBase.OnModifierDoubleClick(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Visuals.Annotations.AdornerBase.OnModifierMouseDown(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Visuals.Annotations.AdornerBase.OnModifierMouseMove(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Visuals.Annotations.AdornerBase.OnModifierMouseUp(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.Visuals.Annotations.AdornerBase.OnModifierMouseWheel(Abt.Controls.SciChart.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.Visuals.Annotations.AdornerBase.Services">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.ServiceContainer"/> which provides access to services throughout SciChart. 
            ServiceContainers are created one per <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Abt.Controls.SciChart.AxisBase"/>, <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Visuals.Annotations.AdornerBase.ParentCanvas">
            <summary>
            Gets or sets the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> to perform operations on
            </summary>
            <value>The parent surface.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.Visuals.Annotations.AdornerBase.IsEnabled">
            <summary>
            Gets or sets whether this Adorner is enabled. 
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AnchorPointAnnotation">
            <summary>
            An Anchor-Point annotation is an <see cref="T:Abt.Controls.SciChart.IAnnotation"/> which only has one X1,Y1 point. 
            This annotation may be anchored around the coordinate using various alignmnets. See the <see cref="P:Abt.Controls.SciChart.AnchorPointAnnotation.HorizontalAnchorPoint"/> and <see cref="P:Abt.Controls.SciChart.AnchorPointAnnotation.VerticalAnchorPoint"/> properties
            for more information
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AnnotationBase">
            <summary>
            Provides a base class for annotations to be rendered over the chart
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IAnnotation">
            <summary>
            Defines the interface to an annotation, a custom drawable element over or under the SciChartSurface
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IHitTestable">
            <summary>
            Defines the base interface for a type which can be hit-tested
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.IHitTestable.TranslatePoint(System.Windows.Point,Abt.Controls.SciChart.IHitTestable)">
            <summary>
            Translates the point relative to the other <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="point">The input point relative to this <see cref="T:Abt.Controls.SciChart.IHitTestable"/></param>
            <param name="relativeTo">The other <see cref="T:Abt.Controls.SciChart.IHitTestable"/> to use when transforming the point</param>
            <returns>The transformed Point</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IHitTestable.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="point">The point to test</param>
            <returns>true if the Point is within the bounds</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IHitTestable.GetBoundsRelativeTo(Abt.Controls.SciChart.IHitTestable)">
            <summary>
            Gets the bounds of the current <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element relative to another <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IAnnotation.CaptureMouse">
            <summary>
            Captures the mouse
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IAnnotation.ReleaseMouseCapture">
            <summary>
            Releases mouse capture
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IAnnotation.Update(Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double},Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double})">
            <summary>
            Updates the coordinate calculators and refreshes the annotation position on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="xCoordinateCalculator">The XAxis <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/></param>
            <param name="yCoordinateCalculator">The YAxis <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/></param>
        </member>
        <member name="M:Abt.Controls.SciChart.IAnnotation.OnDetached">
            <summary>
            Called when the Annotation is detached from its parent surface
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IAnnotation.OnAttached">
            <summary>
            Called when the Annotation is attached to parent surface
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IAnnotation.Hide">
            <summary>
            Hides the Annotation by removing adorner markers from the <see cref="P:Abt.Controls.SciChart.IAnnotation.ParentSurface"/> AdornerLayerCanvas
            and setting Visibility to Collapsed
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IAnnotation.Show">
            <summary>
            Shows annotation which being hidden by <see cref="M:Abt.Controls.SciChart.IAnnotation.Hide"/> call
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IAnnotation.MoveAnnotation(System.Double,System.Double)">
            <summary>
            This method is used internally by the <see cref="T:Abt.Controls.SciChart.Visuals.Annotations.AnnotationDragAdorner"/>. Programmatically moves the annotation by an X,Y offset. 
            </summary>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.IAnnotation.SetBasePoint(System.Windows.Point,System.Int32)">
            <summary>
            This method is used in internally by the <see cref="T:Abt.Controls.SciChart.Visuals.Annotations.AnnotationResizeAdorner"/>. Programmatically sets an adorner point position
            </summary>
            <param name="newPoint"></param>
            <param name="index"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.IAnnotation.GetBasePoints">
            <summary>
            This method is used in internally by the <see cref="T:Abt.Controls.SciChart.Visuals.Annotations.AnnotationResizeAdorner"/>. Gets the adorner point positions
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.YAxisId">
            <summary>
            Gets or sets the YAxis Id that this annotation is measured against. See <see cref="P:Abt.Controls.SciChart.AxisBase.Id"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.IsAttached">
            <summary>
            Gets or sets whether the current annotation is attached
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.IsSelected">
            <summary>
            Gets or sets whether the current annotation is selected
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.IsEditable">
            <summary>
            Gets or sets whether you can interact current annotation
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.IsHidden">
            <summary>
            Gets value, indicates whether current annotation was hidden by <see cref="M:Abt.Controls.SciChart.IAnnotation.Hide"/> call
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.YAxis">
            <summary>
            Gets the primary YAxis, this is the first axis in the YAxes collection
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.YAxes">
            <summary>
            Returns the YAxes on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.XAxis">
            <summary>
            Gets the XAxis <see cref="T:Abt.Controls.SciChart.IAxis"/> instance on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.Services">
            <summary>
            Gets or sets a <see cref="T:Abt.Controls.SciChart.IServiceContainer"/> container 
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.X1">
            <summary>
            Gets or sets the X1 Coordinate of the Annotation. 
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the X-Axis such as a DateTime for <see cref="T:Abt.Controls.SciChart.DateTimeAxis"/>, double for <see cref="T:Abt.Controls.SciChart.NumericAxis"/> or integer index for <see cref="T:Abt.Controls.SciChart.CategoryDateTimeAxis"/>.
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the far left of the XAxis and 1.0 is the far right.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.Y1">
            <summary>
            Gets or sets the Y1 Coordinate of the Annotation. 
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the Y-Axis such as a double for <see cref="T:Abt.Controls.SciChart.NumericAxis"/> 
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the bottom of the YAxis and 1.0 is the top
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.X2">
            <summary>
            Gets or sets the X2 Coordinate of the Annotation. 
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the X-Axis such as a DateTime for <see cref="T:Abt.Controls.SciChart.DateTimeAxis"/>, double for <see cref="T:Abt.Controls.SciChart.NumericAxis"/> or integer index for <see cref="T:Abt.Controls.SciChart.CategoryDateTimeAxis"/>.
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the far left of the XAxis and 1.0 is the far right.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.Y2">
            <summary>
            Gets or sets the Y2 Coordinate of the Annotation. 
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the Y-Axis such as a double for <see cref="T:Abt.Controls.SciChart.NumericAxis"/> 
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the bottom of the YAxis and 1.0 is the top
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:Abt.Controls.SciChart.ISciChartSurface"/> that this Annotation belongs to
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.DragDirections">
            <summary>
            Limits the Drag direction when dragging the annotation using the mouse, e.g in the X-Direction, Y-Direction or XyDirection. See the <see cref="T:Abt.Controls.SciChart.XyDirection"/> enumeration for options
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.ResizeDirections">
            <summary>
            Limits the Resize direction when resiaing the annotation using the mouse, e.g in the X-Direction, Y-Direction or XyDirection. See the <see cref="T:Abt.Controls.SciChart.XyDirection"/> enumeration for options
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.IsResizable">
            <summary>
            Gets value, indicates whether current instance is resizable
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnnotation.DataContext">
            <summary>
            Gets or sets the data context
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationBase.YAxisIdProperty">
            <summary>Defines the YAxisId DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationBase.X1Property">
            <summary>Defines the X1 DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationBase.Y1Property">
            <summary>Defines the Y1 DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationBase.X2Property">
            <summary>Defines the X2 DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationBase.Y2Property">
            <summary>Defines the Y2 DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationBase.AnnotationCanvasProperty">
            <summary>Defines the AnnotationCanvas DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationBase.CoordinateModeProperty">
            <summary>Defines the CoordinateMode DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationBase.IsSelectedProperty">
            <summary>Defines the IsSelected DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationBase.IsEditableProperty">
            <summary>Defines the IsEditable DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationBase.DragDirectionsProperty">
            <summary>Defines the DragDirections DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationBase.ResizeDirectionsProperty">
            <summary>Defines the ResizeDirection DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationBase.AnnotationRoot">
            <summary>
            The Root Element of the Annotation to be displayed on the Canvas
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.AnnotationBase"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.GetSelectedCursor">
            <summary>
            Gets the <see cref="T:System.Windows.Input.Cursor"/> to use for the annotation when selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.OnYAxisIdChanged">
            <summary>
            Virtual method to override if you wish to be notified that the <see cref="P:Abt.Controls.SciChart.AnnotationBase.YAxisId"/> has changed
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.FocusInputTextArea">
            <summary>
            Focuses the input text area. Applicable only for Text and label annotations
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.OnAttached">
            <summary>
            Called when the Annotation is attached to parent surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.AttachInteractionHandlersTo(System.Windows.FrameworkElement)">
            <summary>
            Attaches handlers to particular events of passed object
            </summary>
            <param name="source">Mouse events source</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.OnAnnotationMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Contains interaction logic of handling mouse down event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.OnAnnotationMouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Contains interaction logic of handling mouse up event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.OnAnnotationMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Contains interaction logic of handling mouse move event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.OnDetached">
            <summary>
            Called immediately before the Annotation is detached from its parent surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.Refresh">
            <summary>
            Refreshes the annnotation position on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>, without causing a full redraw of the chart
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.Update(Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double},Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double})">
            <summary>
            Updates the coordinate calculators and refreshes the annotation position on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="xCoordinateCalculator">The XAxis <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/></param>
            <param name="yCoordinateCalculator">The YAxis <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/></param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.Hide">
            <summary>
            Hides the Annotation by removing adorner markers from the <see cref="!:ParentSurface.AdornerLayerCanvas"/>
            and setting Visibility to Collapsed
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.Show">
            <summary>
            Shows annotation which being hidden by <see cref="M:Abt.Controls.SciChart.AnnotationBase.Hide"/> call
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.MakeInvisible">
            <summary>
            Called internally by layout system when annotation is out of surface's bounds
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.HideAdornerMarkers">
            <summary>
            Hides adorner markers by calling <see cref="M:Abt.Controls.SciChart.Visuals.Annotations.AdornerBase.Clear"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.GetUsedAdorners``1(System.Windows.Controls.Canvas)">
            <summary>
            Gets a collection of the Adorners currently used on the Annotation, given the Annotation AdornerLayer Canvas
            </summary>
            <typeparam name="T">The type of Adorners to search for</typeparam>
            <param name="adornerLayer">The adorner layer canvas</param>
            <returns>A list of adorners matching type T</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.MakeVisible">
            <summary>
            Called internally by layout system when annotation come into surface's bounds
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.IsInBounds(Abt.Controls.SciChart.AnnotationCoordinates,System.Windows.Controls.Canvas)">
            <summary>
            Performs a simple rectangular bounds-check to see if the X1,X2,Y1,Y2 coordinates passed in are within the Canvas extends
            </summary>
            <param name="coordinates">The normalised AnnotationCoordinates</param>
            <param name="canvas">The canvas to check if the annotation is within bounds</param>
            <returns>True if in bounds</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.PlaceAnnotation(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            Override in derived classes to handle specific placement of the annotation at the given <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/>
            </summary>
            <param name="coordinates">The normalised <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/></param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.GetCanvas(Abt.Controls.SciChart.AnnotationCanvas)">
            <summary>
            Gets the Canvas instance for this annotation
            </summary>
            <param name="annotationCanvas">The <see cref="P:Abt.Controls.SciChart.AnnotationBase.AnnotationCanvas"/> enumeration</param>
            <returns>The canvas instance</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.OnRenderablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependencyProperty changed handler which can be used to refresh the annotation on property changed
            </summary>
            <param name="d">The DependencyObject sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.UpdatePosition(System.Windows.Point,System.Windows.Point)">
            <summary>
            Updates the position and values of the annotation during a drag or resize operation, by setting X1,Y1,X2,Y2 and X,Y pixel coordinates together, 
            from a pixel coordinate input
            </summary>
            <param name="point1">The first input pixel coordinate</param>
            <param name="point2">The second input pixel coordinate</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.FromCoordinate(System.Double,System.Double,Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double},Abt.Controls.SciChart.XyDirection)">
            <summary>
            Converts a pixel coordinate to data-value
            </summary>
            <param name="coord">The pixel coordinate.</param>
            <param name="canvasMeasurement">The size of the canvas in the current dimension (e.g. width or height)</param>
            <param name="coordCalc">The current <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/> valid for the current render pass</param>
            <param name="direction">The direction of the axis (X or Y).</param>
            <returns>
            The datavalue
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.ToCoordinate(System.IComparable,System.Double,Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double},Abt.Controls.SciChart.XyDirection)">
            <summary>
            Converts a data-value to pixel coordinate
            </summary>
            <param name="value">The data-value, e.g. value of X1 or Y1</param>
            <param name="canvasMeasurement">The size of the canvas in the current dimension (e.g. width or height)</param>
            <param name="coordCalc">The current <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/> valid for the current render pass</param>
            <param name="direction">The direction (X or Y Axis).</param>
            <returns>
            The pixel coordinate
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.GetCoordinates(System.Windows.Controls.Canvas,Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double},Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double},System.Boolean)">
            <summary>
            Gets an <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/> struct containing pixel coordinates to place or update the annotation in the current render pass
            </summary>
            <param name="canvas">The canvas the annotation will be placed on</param>
            <param name="xCalc">The current XAxis <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/> to perform data to pixel transformations</param>
            <param name="yCalc">The current YAxis <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/> to perform data to pixel transformations</param>
            <param name="ignoreAnchorOffsets">If true, ignores offsets applied to <see cref="T:Abt.Controls.SciChart.IAnchorPointAnnotation"/> derived types. These are types such as <see cref="T:Abt.Controls.SciChart.TextAnnotation"/> and <see cref="T:Abt.Controls.SciChart.CustomAnnotation"/> which have a single X1,Y1 point and anchor (align) around it</param>
            <returns>The <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/> struct containing pixel coordinates</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.MoveAnnotation(System.Double,System.Double)">
            <summary>
            This method is used internally by the <see cref="T:Abt.Controls.SciChart.Visuals.Annotations.AnnotationDragAdorner"/>. Programmatically moves the annotation by an X,Y offset. 
            </summary>
            <param name="horizOffset">The horizontal offset to move in pixels</param>
            <param name="vertOffset">The vertical offset to move in pxiels</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.MoveAnnotation(System.Double,System.Double,System.Windows.Controls.Canvas,Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double},Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double})">
            <summary>
            This method is used internally by the <see cref="T:Abt.Controls.SciChart.Visuals.Annotations.AnnotationDragAdorner"/>. Programmatically moves the annotation by an X,Y offset.
            </summary>
            <param name="horizOffset">The horizontal offset to move by.</param>
            <param name="vertOffset">The vertical offset to move by.</param>
            <param name="canvas">The canvas to move the annotation on.</param>
            <param name="xCalc">The xAxis <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/> instance.</param>
            <param name="yCalc">The yAxis <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/> instance.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.MoveAnnotationTo(Abt.Controls.SciChart.AnnotationCoordinates,System.Double,System.Double,System.Windows.Controls.Canvas,Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double},Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double})">
            <summary>
            Moves the annotation to.
            </summary>
            <param name="coordinates">The coordinates.</param>
            <param name="horizOffset">The horiz offset.</param>
            <param name="vertOffset">The vert offset.</param>
            <param name="canvas">The canvas.</param>
            <param name="xCalc">The x calc.</param>
            <param name="yCalc">The y calc.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.IsCoordinateValid(System.Double,System.Double)">
            <summary>
            Determines whether the coordinate is valid for placing on the canvas, e.g. is greater than zero and less than <paramref name="canvasMeasurement"/>
            </summary>
            <param name="coord">The coordinate.</param>
            <param name="canvasMeasurement">The canvas dimension in this axis.</param>
            <returns>
              <c>true</c> if coordinate is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.GetBasePoints">
            <summary>
            This method is used in internally by the <see cref="T:Abt.Controls.SciChart.Visuals.Annotations.AnnotationResizeAdorner"/>. Gets the adorner point positions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.GetBasePoints(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            This method is used in internally by the <see cref="T:Abt.Controls.SciChart.Visuals.Annotations.AnnotationResizeAdorner"/>. Gets the adorner point positions
            </summary>
            <param name="coordinates">The previously calculated <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/> in screen pixels.</param>
            <returns>A list of points in screen pixels denoting the Adorner corners</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.SetBasePoint(System.Windows.Point,System.Int32)">
            <summary>
            This method is used in internally by the <see cref="T:Abt.Controls.SciChart.Visuals.Annotations.AnnotationResizeAdorner"/>. Programmatically sets an adorner point position
            </summary>
            <param name="newPoint"></param>
            <param name="index"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.SetBasePoint(System.Windows.Point,System.Int32,System.Windows.Controls.Canvas,Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double},Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double})">
            <summary>
            Called internally to marshal pixel points to X1,Y1,X2,Y2 values. 
            Taking a pixel point (<paramref name="newPoint"/>) and base point <paramref name="index"/>, sets the X,Y data-values. 
            </summary>
            <param name="newPoint">The pixel point</param>
            <param name="index">The base point index, where 0, 1, 2, 3 refer to the four corners of an Annotation</param>
            <param name="canvas">The canvas that this annotation is on</param>
            <param name="xCalc">The current <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/> for the X-Axis</param>
            <param name="yCalc">The current <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/> for the Y-Axis</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.GetPropertiesFromIndex(System.Int32,System.Windows.DependencyProperty@,System.Windows.DependencyProperty@)">
            <summary>
            Used internally to derive the X1Property, Y1Property, X1Property, Y2Property pair for the given index around the annotation..
            
            e.g. index 0 returns X1,Y1
            index 1 returns X2,Y1
            index 2 returns X2,Y2
            index 3 returns X1,Y2
            </summary>
            <param name="index">The index</param>
            <param name="x">The X coordinate dependency property, either X1Property or X2Property</param>
            <param name="y">The Y coordinate dependency property, either Y1Property or Y2Property</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.GetAdornerLayer">
            <summary>
            Gets the Adorner Canvas to place annotation adorners
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.AddAdorners(System.Windows.Controls.Canvas)">
            <summary>
            When overriden in a derived class, places the appropriate adorners on the <see cref="T:Abt.Controls.SciChart.AnnotationBase"/>
            </summary>
            <param name="adornerLayer">The adorner layer</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.RemoveAdorners(System.Windows.Controls.Canvas)">
            <summary>
            Removes all adorners from the <see cref="T:Abt.Controls.SciChart.AnnotationBase"/>
            </summary>
            <param name="adornerLayer">The adorner layer</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.TranslatePoint(System.Windows.Point,Abt.Controls.SciChart.IHitTestable)">
            <summary>
            Translates the point relative to the other <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="point">The input point relative to this <see cref="T:Abt.Controls.SciChart.IHitTestable"/></param>
            <param name="relativeTo">The other <see cref="T:Abt.Controls.SciChart.IHitTestable"/> to use when transforming the point</param>
            <returns>
            The transformed Point
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.GetBoundsRelativeTo(Abt.Controls.SciChart.IHitTestable)">
            <summary>
            Gets the bounds of the current <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element relative to another <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.TrySelectAnnotation">
            <summary>
            Trys to select the annotation. Returns True if the operation was successful
            </summary>
            <returns>True if the operation was successful</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>
            The disposable Update Suspender
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.ResumeUpdates(Abt.Controls.SciChart.IUpdateSuspender)">
            <summary>
            Resumes the updates.
            </summary>
            <param name="updateSuspender">The update suspender.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationBase.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart.AnnotationBase.MouseMiddleButtonDown">
            <summary>
            Occurs when the middle mouse button is pressed while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart.AnnotationBase.MouseMiddleButtonUp">
            <summary>
            Occurs when the middle mouse button is released while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>. However, this event will only be raised if a caller marks the preceding <see cref="E:System.Windows.UIElement.MouseRightButtonDown"/> event as handled; see Remarks.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.CanEditText">
            <summary>
            Gets or sets whether text can be edited on this <see cref="T:Abt.Controls.SciChart.AnnotationBase"/>. 
            Supported by Text or label annotations only
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.IsResizable">
            <summary>
            Gets value, indicates whether current instance is resizable
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.YAxisId">
            <summary>
            Gets or sets the ID of the Y-Axis which this Annotation is measured against
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.DragDirections">
            <summary>
            Limits the Drag direction when dragging the annotation using the mouse, e.g in the X-Direction, Y-Direction or XyDirection. See the <see cref="T:Abt.Controls.SciChart.XyDirection"/> enumeration for options
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.ResizeDirections">
            <summary>
            Limits the Resize direction when resiaing the annotation using the mouse, e.g in the X-Direction, Y-Direction or XyDirection. See the <see cref="T:Abt.Controls.SciChart.XyDirection"/> enumeration for options
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.CoordinateMode">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.AnnotationCoordinateMode"/> to use when placing the annotation. E.g. the default of Absolute requires that X1,Y1 coordinates are data-values. The value
            of Relative requires that X1,Y1 are double values from 0.0 to 1.0
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.AnnotationCanvas">
            <summary>
            Gets or sets the <see cref="P:Abt.Controls.SciChart.AnnotationBase.AnnotationCanvas"/> to place the annotation on. The default is <see cref="F:Abt.Controls.SciChart.AnnotationCanvas.AboveChart"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.IsSelected">
            <summary>
            Gets or sets whether the current annotation is selected. When selected, an Adorner is placed over the annotation to allow dynamic resizing and dragging by the user. 
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.IsEditable">
            <summary>
            Gets or sets whether the current annotation is editable. When editable, the user may click to select and interact with the annotation
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.IsHidden">
            <summary>
            Gets value, indicates whether current annotation was hidden by <see cref="M:Abt.Controls.SciChart.AnnotationBase.Hide"/> call
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.X1">
            <summary>
            Gets or sets the X1 Coordinate of the Annotation. 
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the X-Axis such as a DateTime for <see cref="T:Abt.Controls.SciChart.DateTimeAxis"/>, double for <see cref="T:Abt.Controls.SciChart.NumericAxis"/> or integer index for <see cref="T:Abt.Controls.SciChart.CategoryDateTimeAxis"/>.
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the far left of the XAxis and 1.0 is the far right.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.X2">
            <summary>
            Gets or sets the X2 Coordinate of the Annotation. 
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the X-Axis such as a DateTime for <see cref="T:Abt.Controls.SciChart.DateTimeAxis"/>, double for <see cref="T:Abt.Controls.SciChart.NumericAxis"/> or integer index for <see cref="T:Abt.Controls.SciChart.CategoryDateTimeAxis"/>.
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the far left of the XAxis and 1.0 is the far right.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.Y1">
            <summary>
            Gets or sets the Y1 Coordinate of the Annotation. 
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the Y-Axis such as a double for <see cref="T:Abt.Controls.SciChart.NumericAxis"/> 
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the bottom of the YAxis and 1.0 is the top
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.Y2">
            <summary>
            Gets or sets the Y2 Coordinate of the Annotation. 
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Absolute"/>, this must be a data-value on the Y-Axis such as a double for <see cref="T:Abt.Controls.SciChart.NumericAxis"/> 
            
            For <see cref="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Relative"/>, this must be a double value between 0.0 and 1.0, where 0.0 is the bottom of the YAxis and 1.0 is the top
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.IsAttached">
            <summary>
            Gets or sets whether this Element is attached to a parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <value>
            <c>true</c> if this instance is attached; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.YAxis">
            <summary>
            Gets the primary YAxis, this is the first axis in the YAxes collection
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.AnnotationOverlaySurface">
            <summary>
            Gets the canvas over the Series on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.AnnotationUnderlaySurface">
            <summary>
            Gets the canvas under the Series on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationBase.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IAnchorPointAnnotation">
            <summary>
            Defines the interface to an Anchor-Point annotation, which is an <see cref="T:Abt.Controls.SciChart.IAnnotation"/> which only has one X1,Y1 point. 
            This annotation may be anchored around the coordinate using various alignmnets. See the <see cref="P:Abt.Controls.SciChart.IAnchorPointAnnotation.HorizontalAnchorPoint"/> and <see cref="P:Abt.Controls.SciChart.IAnchorPointAnnotation.VerticalAnchorPoint"/> properties
            for more information
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnchorPointAnnotation.HorizontalAnchorPoint">
            <summary>
            Gets or sets the <see cref="P:Abt.Controls.SciChart.IAnchorPointAnnotation.HorizontalAnchorPoint"/>. 
            
            The value of Left means the X1,Y1 coordinate of the annotation is on the Left horizontally.
            The value of Center means the X1,Y1 coordinate of the annotation is at the center horizontally.
            The value of Right means the X1,Y1 coordinate of the annotation is at the right horizontally.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnchorPointAnnotation.VerticalAnchorPoint">
            <summary>
            Gets or sets the <see cref="P:Abt.Controls.SciChart.IAnchorPointAnnotation.VerticalAnchorPoint"/>. 
            
            The value of Top means the X1,Y1 coordinate of the annotation is on the Top vertically.
            The value of Center means the X1,Y1 coordinate of the annotation is at the center vertically.
            The value of Bottom means the X1,Y1 coordinate of the annotation is at the Bottom vertically.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnchorPointAnnotation.VerticalOffset">
            <summary>
            Gets the computed VerticalOffset in pixels to apply to this annotation when placing
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAnchorPointAnnotation.HorizontalOffset">
            <summary>
            Gets the computed HorizontalOffset in pixels to apply to this annotation when placing
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnchorPointAnnotation.HorizontalAnchorPointProperty">
            <summary>
            Defines the HorizontalAnchorPoint DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnchorPointAnnotation.VerticalAnchorPointProperty">
            <summary>
            Defines the VerticalAnchorPointProperty DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnchorPointAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.AnchorPointAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnchorPointAnnotation.GetSelectedCursor">
            <summary>
            Gets the <see cref="T:System.Windows.Input.Cursor"/> to use for the annotation when selected
            </summary>
            <returns></returns>
        </member>
        <member name="P:Abt.Controls.SciChart.AnchorPointAnnotation.HorizontalAnchorPoint">
            <summary>
            Gets or sets the <see cref="P:Abt.Controls.SciChart.AnchorPointAnnotation.HorizontalAnchorPoint"/>.
            The value of Left means the X1,Y1 coordinate of the annotation is on the Left horizontally.
            The value of Center means the X1,Y1 coordinate of the annotation is at the center horizontally.
            The value of Right means the X1,Y1 coordinate of the annotation is at the right horizontally.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnchorPointAnnotation.VerticalAnchorPoint">
            <summary>
            Gets or sets the <see cref="P:Abt.Controls.SciChart.AnchorPointAnnotation.VerticalAnchorPoint"/>.
            The value of Top means the X1,Y1 coordinate of the annotation is on the Top vertically.
            The value of Center means the X1,Y1 coordinate of the annotation is at the center vertically.
            The value of Bottom means the X1,Y1 coordinate of the annotation is at the Bottom vertically.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnchorPointAnnotation.VerticalOffset">
            <summary>
            Gets the computed VerticalOffset in pixels to apply to this annotation when placing
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnchorPointAnnotation.HorizontalOffset">
            <summary>
            Gets the computed HorizontalOffset in pixels to apply to this annotation when placing
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.LabelPlacement">
            <summary>
            Enumeration constants to define label placement
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LabelPlacement.Right">
            <summary>Places on the right</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LabelPlacement.TopRight">
            <summary>Places at the top right</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LabelPlacement.BottomRight">
            <summary>Places at the bottom right</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LabelPlacement.Bottom">
            <summary>Places at the bottom</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LabelPlacement.Left">
            <summary>Places on the left</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LabelPlacement.TopLeft">
            <summary>Places on the top left</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LabelPlacement.BottomLeft">
            <summary>Places on the bottom left</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LabelPlacement.Top">
            <summary>Places at the top</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LabelPlacement.Axis">
            <summary>Places on the axis</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LabelPlacement.Auto">
            <summary>Automatic Placement (Default)</summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AnnotationLabel">
            <summary>
            Defines an AnnotationLabel which may be used in <see cref="T:Abt.Controls.SciChart.HorizontalLineAnnotation"/> and <see cref="T:Abt.Controls.SciChart.VerticalLineAnnotation"/> instances
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationLabel.TextProperty">
            <summary>Defines the Text DependnecyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationLabel.LabelPlacementProperty">
            <summary>Defines the LabelPlacement DependnecyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationLabel.TextFormattingProperty">
            <summary>Defines the TextFormatting DependnecyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationLabel.LabelStyleProperty">
            <summary>Defines the LabelStyle DependnecyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationLabel.AxisLabelStyleProperty">
            <summary>Defines the AxisLabel DependnecyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationLabel.CornerRadiusProperty">
            <summary>Defines the CornerRadius DependnecyProperty</summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.AnnotationLabel"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationLabel.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />. In simplest terms, this means the method is called just before a UI element displays in an application. For more information, see Remarks.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationLabel.GetAndAssertTemplateChild``1(System.String)">
            <summary>
            Gets the TemplateChild by the specified name and casts to type <typeparamref name="T"/>, asserting that the result is not null
            </summary>
            <typeparam name="T">The Type of the templated part</typeparam>
            <param name="childName">Name of the templated part.</param>
            <returns>The template part instance</returns>
            <exception cref="T:System.InvalidOperationException">Unable to Apply the Control Template. Child is missing or of the wrong type</exception>
        </member>
        <member name="E:Abt.Controls.SciChart.AnnotationLabel.PropertyChanged">
            <summary>
            Raised when a property changes. As part of the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationLabel.IsAxisLabel">
            <summary>
            Returns <value>True</value> if <see cref="P:Abt.Controls.SciChart.AnnotationLabel.LabelPlacement"/> == <value>LabelPlacement.Axis</value>
            or if ParentAnnotation.ResolveAutoPlacement() == <value>LabelPlacement.Axis</value>
            in case when <see cref="P:Abt.Controls.SciChart.AnnotationLabel.LabelPlacement"/> == <value>LabelPlacement.Auto</value>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationLabel.CanEditText">
            <summary>
            Gets or sets whether the text in the label is editable
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationLabel.ParentAnnotation">
            <summary>
            Gets or sets the parent <see cref="T:Abt.Controls.SciChart.LineAnnotationWithLabelsBase"/> that this label is attached to
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationLabel.Text">
            <summary>
            Gets or sets the Text of the label
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationLabel.LabelPlacement">
            <summary>
            Gets or sets the <see cref="P:Abt.Controls.SciChart.AnnotationLabel.LabelPlacement"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationLabel.TextFormatting">
            <summary>
            Gets or sets the TextFormatting to use on the label, when the Text property is bound to a Data-Value. 
            This works in a similar way to the <see cref="T:Abt.Controls.SciChart.AxisBase"/> TextFormatting property
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationLabel.LabelStyle">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Style"/> to apply to the label
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationLabel.AxisLabelStyle">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Style"/> to apply to the Axis Label
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationLabel.CornerRadius">
            <summary>
            Gets or sets the CornerRadius of the Label element
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Visuals.Annotations.IAnnotationResizeAdorner.AdornerMarkers">
            <summary>
            Gets the Adorner Markers placed by this annotation (e.g. grippers to resize, move)
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.Visuals.Annotations.AnnotationResizeAdorner.AdornerMarkers">
            <summary>
            Gets the Adorner Markers placed by this annotation (e.g. grippers to resize, move)
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.CustomAnnotation">
            <summary>
            CustomAnnotation is a ContentControl which can be overlaid on the annotation surfaces. For examples of use, see the Annotations Are Easy and Create Annotations Dynamically examples in the trial download
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.CustomAnnotation.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.
            </summary>
            <param name="oldContent">The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
            <param name="newContent">The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.CustomAnnotation.PlaceAnnotation(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            Override in derived classes to handle specific placement of the annotation at the given <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/>
            </summary>
            <param name="coordinates">The normalised <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/></param>
        </member>
        <member name="M:Abt.Controls.SciChart.CustomAnnotation.GetBasePoints(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            This method is used in internally by the <see cref="T:Abt.Controls.SciChart.Visuals.Annotations.AnnotationResizeAdorner"/>. Gets the adorner point positions
            </summary>
            <param name="coordinates">The previously calculated <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/> in screen pixels.</param>
            <returns>
            A list of points in screen pixels denoting the Adorner corners
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.CustomAnnotation.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="T:Abt.Controls.SciChart.LineAnnotationWithLabelsBase">
            <summary>
            Provides a base class for HorizontalLineAnnotation, VerticalLineAnnotation
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.LineAnnotation">
            <summary>
            Defines a read-only or editable Line annotation, which may be placed on the chart at specific X1,Y1,X2,Y2 coordinates
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.LineAnnotationBase">
            <summary>
            A base class with shared properties for <see cref="T:Abt.Controls.SciChart.LineAnnotation"/>, <see cref="T:Abt.Controls.SciChart.HorizontalLineAnnotation"/> and <see cref="T:Abt.Controls.SciChart.VerticalLineAnnotation"/>
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LineAnnotationBase.StrokeDashArrayProperty">
            <summary>Defines the StrokeDashArray DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LineAnnotationBase.StrokeThicknessProperty">
            <summary>Defines the StrokeThickness DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LineAnnotationBase.StrokeProperty">
            <summary>Defines the Stroke DependencyProperty</summary>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotationBase.GetBasePoints(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            This method is used in internally by the <see cref="T:Abt.Controls.SciChart.Visuals.Annotations.AnnotationResizeAdorner"/>. Gets the adorner point positions
            </summary>
            <param name="coordinates">The previously calculated <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/> in screen pixels.</param>
            <returns>
            A list of points in screen pixels denoting the Adorner corners
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotationBase.GetPropertiesFromIndex(System.Int32,System.Windows.DependencyProperty@,System.Windows.DependencyProperty@)">
            <summary>
            Used internally to derive the X1Property, Y1Property, X1Property, Y2Property pair for the given index around the annotation..
            
            e.g. index 0 returns X1,Y1
            index 1 returns X2,Y1
            index 2 returns X2,Y2
            index 3 returns X1,Y2
            </summary>
            <param name="index">The index</param>
            <param name="x">The X coordinate dependency property, either X1Property or X2Property</param>
            <param name="y">The Y coordinate dependency property, either Y1Property or Y2Property</param>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotationBase.GetSelectedCursor">
            <summary>
            Gets the <see cref="T:System.Windows.Input.Cursor"/> to use for the annotation when selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotationBase.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="P:Abt.Controls.SciChart.LineAnnotationBase.Stroke">
            <summary>
            Gets or sets the Stroke brush of the line
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.LineAnnotationBase.StrokeThickness">
            <summary>
            Gets or sets the StrokeThickness of the line
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.LineAnnotationBase.StrokeDashArray">
            <summary>
            Gets or sets the StrokeDashArray of the line
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.LineAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotation.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotation.PlaceAnnotation(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            Override in derived classes to handle specific placement of the annotation at the given <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/>
            </summary>
            <param name="coordinates">The normalised <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/></param>
        </member>
        <member name="F:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.ShowLabelProperty">
            <summary>
            Defines the ShowLabel Property
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.DefaultLabelValueProperty">
            <summary>
            Defines the DefaultLabelValue Property
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.LabelPlacementProperty">
            <summary>
            Defines the LabelPlacement Property
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.LabelValueProperty">
            <summary>
            Defines the LabelValue Property
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.LabelTextFormattingProperty">
            <summary>
            Defines the LabelTextFormatting Property
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.AnnotationLabelsProperty">
            <summary>
            Defines the AnnotationLabels Property
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.LineAnnotationWithLabelsBase"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.AddLabels(System.Collections.Generic.IEnumerable{Abt.Controls.SciChart.AnnotationLabel})">
            <summary>
            Adds a collection of <see cref="T:Abt.Controls.SciChart.AnnotationLabel"/> instances to the <see cref="T:Abt.Controls.SciChart.LineAnnotationWithLabelsBase"/>
            </summary>
            <param name="labels">The collection of labels to add</param>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.RemoveLabels(System.Collections.Generic.IEnumerable{Abt.Controls.SciChart.AnnotationLabel})">
            <summary>
            Removes a collection of <see cref="T:Abt.Controls.SciChart.AnnotationLabel"/> instances to the <see cref="T:Abt.Controls.SciChart.LineAnnotationWithLabelsBase"/>
            </summary>
            <param name="labels">The collection of labels to remove</param>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.Attach(Abt.Controls.SciChart.AnnotationLabel)">
            <summary>
            Called internally to attach an <see cref="T:Abt.Controls.SciChart.AnnotationLabel"/> to the current instance
            </summary>
            <param name="label">The AnnotationLabel to attach</param>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.MakeInvisible">
            <summary>
            Hides current instance of <see cref="T:Abt.Controls.SciChart.LineAnnotationWithLabelsBase"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.MakeVisible">
            <summary>
            Hides current instance of <see cref="T:Abt.Controls.SciChart.LineAnnotationWithLabelsBase"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.AddLabel">
            <summary>
            Adds new label to <see cref="P:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.AnnotationLabels"/>
            </summary>
            <returns>Label which has been created</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.InvalidateLabel(Abt.Controls.SciChart.AnnotationLabel)">
            <summary>
            Invalidates annotation label
            </summary>
            <param name="annotationLabel">Label to invalidate</param>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.Detach(Abt.Controls.SciChart.AnnotationLabel)">
            <summary>
            Detaches the <see cref="T:Abt.Controls.SciChart.AnnotationLabel"/> from the current <see cref="T:Abt.Controls.SciChart.LineAnnotationWithLabelsBase"/>
            </summary>
            <param name="label">The label to detach</param>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.ApplyPlacement(Abt.Controls.SciChart.AnnotationLabel,Abt.Controls.SciChart.LabelPlacement)">
            <summary>
            Positions the <see cref="T:Abt.Controls.SciChart.AnnotationLabel"/> using the value of the <see cref="P:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.LabelPlacement"/> enum
            </summary>
            <param name="label">The label to place</param>
            <param name="placement">Placement arguments</param>
        </member>
        <member name="M:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.GetSelectedCursor">
            <summary>
            Gets the <see cref="T:System.Windows.Input.Cursor"/> to use for the annotation when selected
            </summary>
            <returns></returns>
        </member>
        <member name="P:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.DefaultLabelValue">
            <summary>
            Gets or sets value which labels will be bound to
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.AnnotationLabels">
            <summary>
            Gets or sets a collection of annotation labels
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.ShowLabel">
            <summary>
            Gets or sets value, indicating whether show the default label or not
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.LabelPlacement">
            <summary>
            Gets or sets placement for the default label
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.LabelValue">
            <summary>
            Gets or sets a value for the default label
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.LineAnnotationWithLabelsBase.LabelTextFormatting">
            <summary>
            Gets or sets formatting string which is applied to all annotation labels
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.HorizontalAnchorPoint">
            <summary>
            Enumeration constants used by <see cref="T:Abt.Controls.SciChart.IAnchorPointAnnotation"/> to define horizontal alignment around the X1,Y1 coordinates
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.HorizontalAnchorPoint.Left">
            <summary>
            Align Left
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.HorizontalAnchorPoint.Center">
            <summary>
            Align Center
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.HorizontalAnchorPoint.Right">
            <summary>
            Align Right
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.LineArrowAnnotation">
            <summary>
            The LineArrowAnnotation provides a Line with X1,Y1,X2,Y2 coordinates and an arrow head at the tip. 
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LineArrowAnnotation.HeadLengthProperty">
            <summary>
            Defines the HeadLength DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LineArrowAnnotation.HeadWidthProperty">
            <summary>
            Defines the HeadWidth DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.LineArrowAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.LineArrowAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.LineArrowAnnotation.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.LineArrowAnnotation.PlaceAnnotation(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            Override in derived classes to handle specific placement of the annotation at the given <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/>
            </summary>
            <param name="coordinates">The normalised <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/></param>
        </member>
        <member name="M:Abt.Controls.SciChart.LineArrowAnnotation.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="P:Abt.Controls.SciChart.LineArrowAnnotation.HeadLength">
            <summary>
            Gets or sets the Head Length in pixels. Change this along with <see cref="P:Abt.Controls.SciChart.LineArrowAnnotation.HeadWidth"/> to make the line-arrow head larger or smaller
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.LineArrowAnnotation.HeadWidth">
            <summary>
            Gets or sets the Head Length in pixels. Change this along with <see cref="P:Abt.Controls.SciChart.LineArrowAnnotation.HeadLength"/> to make the line-arrow head larger or smaller
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AxisMarkerAnnotation">
            <summary>
            The AxisMarkerAnnotation provides an axis label which is data-bound to its Y-value. Used to place a marker on the Y-Axis it can give feedback about the latest value of a series, or 
            important points in a series. 
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisMarkerAnnotation.FormattedValueProperty">
            <summary>
            Defines the FormattedValue DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisMarkerAnnotation.MarkerPointWidthProperty">
            <summary>
            Defines the MarkerPointWidth DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisMarkerAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.AxisMarkerAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisMarkerAnnotation.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisMarkerAnnotation.GetSelectedCursor">
            <summary>
            Gets the <see cref="T:System.Windows.Input.Cursor"/> to use for the annotation when selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisMarkerAnnotation.IsInBounds(Abt.Controls.SciChart.AnnotationCoordinates,System.Windows.Controls.Canvas)">
            <summary>
            Performs a simple rectangular bounds-check to see if the X1,X2,Y1,Y2 coordinates passed in are within the Canvas extends
            </summary>
            <param name="coordinates">The normalised AnnotationCoordinates</param>
            <param name="canvas">The canvas to check if the annotation is within bounds</param>
            <returns>
            True if in bounds
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisMarkerAnnotation.PlaceAnnotation(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            Override in derived classes to handle specific placement of the annotation at the given <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/>
            </summary>
            <param name="coordinates">The normalised <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/></param>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisMarkerAnnotation.GetBasePoints(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            This method is used in internally by the <see cref="T:Abt.Controls.SciChart.Visuals.Annotations.AnnotationResizeAdorner"/>. Gets the adorner point positions
            </summary>
            <param name="coordinates">The previously calculated <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/> in screen pixels.</param>
            <returns>
            A list of points in screen pixels denoting the Adorner corners
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisMarkerAnnotation.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisMarkerAnnotation.FormattedValue">
            <summary>
            Gets or sets the Formatted Value of the Axis Marker. By default this is data-bound to Y1
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisMarkerAnnotation.MarkerPointWidth">
            <summary>
            Gets or sets the Marker tip width, this is the width of the point of the marker in pixels. Default value is 7. 
            Change this property if the marker looks squashed!
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.BoxAnnotation">
            <summary>
            Defines a rectangle or box annotation, which may be placed on the chart at specific X1,Y1,X2,Y2 coordinates
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.BoxAnnotation.CornerRadiusProperty">
            <summary>
            Defines the CornerRadius DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.BoxAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.BoxAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.BoxAnnotation.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.BoxAnnotation.GetSelectedCursor">
            <summary>
            Gets the <see cref="T:System.Windows.Input.Cursor"/> to use for the annotation when selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.BoxAnnotation.PlaceAnnotation(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            Override in derived classes to handle specific placement of the annotation at the given <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/>
            </summary>
            <param name="coordinates">The normalised <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/></param>
        </member>
        <member name="M:Abt.Controls.SciChart.BoxAnnotation.GetBasePoints(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            This method is used in internally by the <see cref="T:Abt.Controls.SciChart.Visuals.Annotations.AnnotationResizeAdorner"/>. Gets the adorner point positions
            </summary>
            <param name="coordinates">The previously calculated <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/> in screen pixels.</param>
            <returns>
            A list of points in screen pixels denoting the Adorner corners
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.BoxAnnotation.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="P:Abt.Controls.SciChart.BoxAnnotation.CornerRadius">
            <summary>
            Gets or sets the CornerRadius of the box
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.HorizontalLineAnnotation">
            <summary>
            A class for <see cref="T:Abt.Controls.SciChart.HorizontalLineAnnotation"/>
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.HorizontalLineAnnotation.HorizontalAlignmentProperty">
            <summary>
            Defines the HorizontalAlignment Property
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.HorizontalLineAnnotation.#ctor">
            <summary>
            Creates new instance of <see cref="T:Abt.Controls.SciChart.HorizontalLineAnnotation"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.HorizontalLineAnnotation.IsInBounds(Abt.Controls.SciChart.AnnotationCoordinates,System.Windows.Controls.Canvas)">
            <summary>
            Performs a simple rectangular bounds-check to see if the X1,X2,Y1,Y2 coordinates passed in are within the Canvas extends
            </summary>
            <param name="coordinates">The normalised AnnotationCoordinates</param>
            <param name="canvas">The canvas to check if the annotation is within bounds</param>
            <returns>
            True if in bounds
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.HorizontalLineAnnotation.PlaceAnnotation(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            Override in derived classes to handle specific placement of the annotation at the given <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/>
            </summary>
            <param name="coordinates">The normalised <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/></param>
        </member>
        <member name="M:Abt.Controls.SciChart.HorizontalLineAnnotation.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.HorizontalLineAnnotation.GetBasePoints(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            This method is used in internally by the <see cref="T:Abt.Controls.SciChart.Visuals.Annotations.AnnotationResizeAdorner"/>. Gets the adorner point positions
            </summary>
            <param name="coordinates">The previously calculated <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/> in screen pixels.</param>
            <returns>
            A list of points in screen pixels denoting the Adorner corners
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.HorizontalLineAnnotation.GetPropertiesFromIndex(System.Int32,System.Windows.DependencyProperty@,System.Windows.DependencyProperty@)">
            <summary>
            Used internally to derive the X1Property, Y1Property, X1Property, Y2Property pair for the given index around the annotation..
            e.g. index 0 returns X1,Y1
            index 1 returns X2,Y1
            index 2 returns X2,Y2
            index 3 returns X1,Y2
            </summary>
            <param name="index">The index</param>
            <param name="X"></param>
            <param name="Y"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.HorizontalLineAnnotation.OnYAxisIdChanged">
            <summary>
            Virtual method to override if you wish to be notified that the YAxisId has changed
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.HorizontalLineAnnotation.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="P:Abt.Controls.SciChart.HorizontalLineAnnotation.HorizontalAlignment">
            <summary>
            Gets or sets docking of <see cref="T:Abt.Controls.SciChart.HorizontalLineAnnotation"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.TextAnnotation">
            <summary>
            Defines a Text annotation, which may be used to place read-only labels or read-write Textboxes on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.TextAnnotation.CornerRadiusProperty">
            <summary>Defines the CornerRadius DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.TextAnnotation.TextProperty">
            <summary>Defines the Text DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.TextAnnotation.TextAlignmentProperty">
            <summary>Defines the TextAlignment DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.TextAnnotation.TextStretchProperty">
            <summary>Defines the TextStretch DependencyProperty</summary>
        </member>
        <member name="M:Abt.Controls.SciChart.TextAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.TextAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.TextAnnotation.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.TextAnnotation.PlaceAnnotation(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            Override in derived classes to handle specific placement of the annotation at the given <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/>
            </summary>
            <param name="coordinates">The normalised <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/></param>
        </member>
        <member name="M:Abt.Controls.SciChart.TextAnnotation.GetBasePoints(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            This method is used in internally by the <see cref="T:Abt.Controls.SciChart.Visuals.Annotations.AnnotationResizeAdorner"/>. Gets the adorner point positions
            </summary>
            <param name="coordinates">The previously calculated <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/> in screen pixels.</param>
            <returns>
            A list of points in screen pixels denoting the Adorner corners
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.TextAnnotation.FocusInputTextArea">
            <summary>
            Focuses the text input area on the <see cref="T:Abt.Controls.SciChart.TextAnnotation"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.TextAnnotation.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="P:Abt.Controls.SciChart.TextAnnotation.CornerRadius">
            <summary>
            Gets or sets the CornerRadius of the TextAnnotation
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.TextAnnotation.TextAlignment">
            <summary>
            Gets or sets the <see cref="P:Abt.Controls.SciChart.TextAnnotation.TextAlignment"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.TextAnnotation.TextStretch">
            <summary>
            Gets or sets how Text stretches to fill its container. Applicable if the X1,Y1,X2,Y2 properties are all set, else text will be uniform
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.TextAnnotation.Text">
            <summary>
            Gets or sets the Text of the TextAnnotation
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AnnotationCanvas">
            <summary>
            Enumeration constants to define the Annotation Canvas that an <see cref="T:Abt.Controls.SciChart.IAnnotation"/> is placed on
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationCanvas.AboveChart">
            <summary>
            The annotation is placed above the chart
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationCanvas.BelowChart">
            <summary>
            The annotation is placed below the chart
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationCanvas.YAxis">
            <summary>
            The annotation is placed on the YAxis
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AnnotationCoordinateMode">
            <summary>
            Enumeration constants to define the Coordinate mode used to place an annotation
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Absolute">
            <summary>
            Absolute, requires that coordinates X1,Y1,X2,Y2 are data-values
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationCoordinateMode.Relative">
            <summary>
            Relative, requires that coordinates X1,Y1,X2,Y2 are double values between 0.0 and 1.0
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationCoordinateMode.RelativeX">
            <summary>
            RelativeX, requires that coordinates X1,X2 are double values between 0.0 and 1.0, whereas Y1,Y2 are data-values
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationCoordinateMode.RelativeY">
            <summary>
            RelativeY, requires that coordinates Y1,Y2 are double values between 0.0 and 1.0, whereas X1,X2 are data-values
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AnnotationCoordinates">
            <summary>
            Used internally by the Annotation API. Struct to hold transformed coordinates for placement of an annotation on the chart
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationCoordinates.X1Coord">
            <summary>Gets or sets the X1 coordinate</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationCoordinates.X2Coord">
            <summary>Gets or sets the X2 coordinate</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationCoordinates.Y1Coord">
            <summary>Gets or sets the Y1 coordinate</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AnnotationCoordinates.Y2Coord">
            <summary>Gets or sets the Y2 coordinate</summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AnnotationCollection">
            <summary>
            Contains a collection of <see cref="T:Abt.Controls.SciChart.IAnnotation"/> derived types, which allow custom drawing elements 
            over or under the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.AnnotationCollection"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationCollection.#ctor(System.Collections.Generic.IEnumerable{Abt.Controls.SciChart.IAnnotation})">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.AnnotationCollection"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationCollection.SubscribeSurfaceEvents(Abt.Controls.SciChart.ISciChartSurface)">
            <summary>
            Subscribes the AnnotationCollection to events on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>. 
            Should be called internally by the Annotations API when attaching to a surface. 
            </summary>
            <param name="parentSurface">The parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/></param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationCollection.UnsubscribeSurfaceEvents(Abt.Controls.SciChart.ISciChartSurface)">
            <summary>
            Unsubscribes the AnnotationCollection to events on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>. 
            Should be called internally by the Annotations API when detaching from a surface. 
            </summary>
            <param name="parentSurface">The parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/></param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationCollection.DeselectAll">
            <summary>
            Deselects all annotations in the AnnotationCollection
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationCollection.ClearItems">
            <summary>
            Clears all Annotations from the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationCollection.RefreshPositions(Abt.Controls.SciChart.RenderPassInfo)">
            <summary>
            Refreshes positions of all annotations within the collection
            </summary>
            <param name="rpi"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.AnnotationCollection.TrySelectAnnotation(Abt.Controls.SciChart.IAnnotation)">
            <summary>
            Gets attempt to select annotation, and returns whether attempt was successful or not
            </summary>
            <param name="annotationBase">Annotation <see cref="T:Abt.Controls.SciChart.IAnnotation"/> for selection</param>
            <returns></returns>
        </member>
        <member name="P:Abt.Controls.SciChart.AnnotationCollection.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> to perform operations on 
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.VerticalAnchorPoint">
            <summary>
            Enumeration constants used by <see cref="T:Abt.Controls.SciChart.IAnchorPointAnnotation"/> to define vertical alignment around the X1,Y1 coordinates
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.VerticalAnchorPoint.Top">
            <summary>
            Align Top
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.VerticalAnchorPoint.Center">
            <summary>
            Align Center
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.VerticalAnchorPoint.Bottom">
            <summary>
            Align Bottom
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.VerticalLineAnnotation">
            <summary>
            A class for <see cref="T:Abt.Controls.SciChart.VerticalLineAnnotation"/>
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.VerticalLineAnnotation.VerticalAlignmentProperty">
            <summary>
            Defines the VerticalAlignment Property
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.VerticalLineAnnotation.LabelsOrientationProperty">
            <summary>
            Defines the LabelDirection Property
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.VerticalLineAnnotation.#ctor">
            <summary>
            Creates new instance of <see cref="T:Abt.Controls.SciChart.VerticalLineAnnotation"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.VerticalLineAnnotation.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.VerticalLineAnnotation.IsInBounds(Abt.Controls.SciChart.AnnotationCoordinates,System.Windows.Controls.Canvas)">
            <summary>
            Performs a simple rectangular bounds-check to see if the X1,X2,Y1,Y2 coordinates passed in are within the Canvas extends
            </summary>
            <param name="coordinates">The normalised AnnotationCoordinates</param>
            <param name="canvas">The canvas to check if the annotation is within bounds</param>
            <returns>
            True if in bounds
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.VerticalLineAnnotation.PlaceAnnotation(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            Override in derived classes to handle specific placement of the annotation at the given <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/>
            </summary>
            <param name="coordinates">The normalised <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/></param>
        </member>
        <member name="M:Abt.Controls.SciChart.VerticalLineAnnotation.Attach(Abt.Controls.SciChart.AnnotationLabel)">
            <summary>
            Called internally to attach an <see cref="T:Abt.Controls.SciChart.AnnotationLabel"/> to the current instance
            </summary>
            <param name="label">The AnnotationLabel to attach</param>
        </member>
        <member name="M:Abt.Controls.SciChart.VerticalLineAnnotation.ApplyPlacement(Abt.Controls.SciChart.AnnotationLabel,Abt.Controls.SciChart.LabelPlacement)">
            <summary>
            Positions the <see cref="T:Abt.Controls.SciChart.AnnotationLabel"/> using the value of the <see cref="T:Abt.Controls.SciChart.LabelPlacement"/> enum
            </summary>
            <param name="label">The label to place</param>
            <param name="placement">Placement arguments</param>
        </member>
        <member name="M:Abt.Controls.SciChart.VerticalLineAnnotation.GetSelectedCursor">
            <summary>
            Gets the <see cref="T:System.Windows.Input.Cursor"/> to use for the annotation when selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.VerticalLineAnnotation.GetBasePoints(Abt.Controls.SciChart.AnnotationCoordinates)">
            <summary>
            This method is used in internally by the <see cref="T:Abt.Controls.SciChart.Visuals.Annotations.AnnotationResizeAdorner"/>. Gets the adorner point positions
            </summary>
            <param name="coordinates">The previously calculated <see cref="T:Abt.Controls.SciChart.AnnotationCoordinates"/> in screen pixels.</param>
            <returns>
            A list of points in screen pixels denoting the Adorner corners
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.VerticalLineAnnotation.GetPropertiesFromIndex(System.Int32,System.Windows.DependencyProperty@,System.Windows.DependencyProperty@)">
            <summary>
            Used internally to derive the X1Property, Y1Property, X1Property, Y2Property pair for the given index around the annotation..
            
            e.g. index 0 returns X1,Y1
            index 1 returns X2,Y1
            index 2 returns X2,Y2
            index 3 returns X1,Y2
            </summary>
            <param name="index">The index</param>
            <param name="x">The X coordinate dependency property, either X1Property or X2Property</param>
            <param name="y">The Y coordinate dependency property, either Y1Property or Y2Property</param>
        </member>
        <member name="P:Abt.Controls.SciChart.VerticalLineAnnotation.LabelsOrientation">
            <summary>
            Gets or sets value, indicating whether labels will be placed vertically or horizontally
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.VerticalLineAnnotation.VerticalAlignment">
            <summary>
            Gets or sets docking of <see cref="T:Abt.Controls.SciChart.VerticalLineAnnotation"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AxisAlignment">
            <summary>
            Enumeration constants to define the alignment of an axis
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisAlignment.Right">
            <summary>
            Axis is on the Right-side of the chart surface
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisAlignment.Left">
            <summary>
            Axis is on the Left-side of the chart surface
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AxisArea">
            <summary>
            Provides a container for Axis within the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>. Styled by control template
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.AxisArea"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.AxisBase">
            <summary>
            Provides base functionality for Axes throughout SciChart. Derived types include <see cref="T:Abt.Controls.SciChart.NumericAxis"/>, which supports any 
            numeric value, <see cref="T:Abt.Controls.SciChart.DateTimeAxis"/>, which supports Date values. Axes may be styled, see the <see href="http://www.scichart.com/tutorials">tutorials</see> for more details
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IAxis">
            <summary>
            Defines the base interface to an Axis used throughout Scichart
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IInvalidatableElement">
            <summary>
            Types which implement IInvalidatableElement can be invalidated (redrawn)
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IInvalidatableElement.InvalidateElement">
            <summary>
            Asynchronously requests that the element redraws itself plus children. 
            Will be ignored if the element is ISuspendable and currently IsSuspended (within a SuspendUpdates/ResumeUpdates call)
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.GetCurrentCoordinateCalculator">
            <summary>
            Gets the current <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/> for this Axis, based on current Visible Range and axis type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.CaptureMouse">
            <summary>
            Captures the mouse for this Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.ReleaseMouseCapture">
            <summary>
            Releases the mouse for this Axis
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.SetMouseCursor(System.Windows.Input.Cursor)">
            <summary>
            Sets the cursor for this Axis
            </summary>
            <param name="cursor">The Cursor instance</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.HitTest(System.Windows.Point)">
            <summary>
            Performs a HitTest on this axis. Given the input mouse point, returns an AxisInfo struct containing the Value and FormattedValue closest to that point
            </summary>
            <param name="atPoint">The mouse x,y point</param>
            <returns>The AxisInfo struct containing the value and formatted value closest to the mouse point</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.GetPointRange">
            <summary>
            Gets the integer indices of the X-Data array that are currently in range. 
            </summary>
            <example>If the input X-data is 0...100 in steps of 1, the VisibleRange is 10, 30 then the PointRange will be 10, 30</example>
            <returns>The indices to the X-Data that are currently in range</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.CalculateYRange(Abt.Controls.SciChart.RenderPassInfo)">
            <summary>
            Gets the aligned VisibleRange of the axis, with optional ZoomToFit flag. 
            If ZoomToFit is true, it will return the DataRange plus any GrowBy applied to the axis
            </summary>
            <returns>The VisibleRange of the axis</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.GetMaximumRange">
            <summary>
            Gets the maximum range of the axis, based on the data-range of all series
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.ScrollXRange(System.Int32)">
            <summary>
            Translates the VisibleRange of the XAxis by the specified number of datapoints
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws if the axis is not an XAxis</exception>
            <param name="deltaX"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.GetCoordinate(System.IComparable)">
            <summary>
            Given the Data Value, returns the x or y pixel coordinate at that value on the Axis
            </summary>
            <example>
            Given an axis with a VisibleRange of 1..10 and height of 100, a value of 7 passed in to GetCoordinate would return 70 pixels
            </example>
            <param name="value">The DataValue as input</param>
            <returns>The pixel coordinate on this Axis corresponding to the input DataValue</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.OnArrangeAxis">
            <summary>
            Called internally to arrange and measure the axis, before a render pass
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.OnBeginRenderPass">
            <summary>
            Called internally immediately before a render pass begins
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.ScrollTo(Abt.Controls.SciChart.IRange,System.Double)">
            <summary>
            From the starting <see cref="T:Abt.Controls.SciChart.IRange"/>, scrolls to a new range by the specified number of pixels
            </summary>
            <param name="startVisibleRange">The start visible range</param>
            <param name="pixelsToScroll">Scroll N pixels from the start visible range</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.ScrollToWithLimit(Abt.Controls.SciChart.IRange,System.Double,Abt.Controls.SciChart.IRange)">
            <summary>
            From the starting <see cref="T:Abt.Controls.SciChart.IRange"/>, scrolls to a new range by the specified number of pixels, with the specified range limit
            </summary>
            <param name="startVisibleRange">The start visible range</param>
            <param name="pixelsToScroll">Scroll N pixels from the start visible range</param>
            <param name="rangeLimit">The range limit.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.AssertDataType(System.Type)">
            <summary>
            Asserts the type passed in is supported by the current axis implementation
            </summary>
            <param name="dataType"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.FormatText(System.IComparable,System.String)">
            <summary>
            String formats the text, using the <see cref="P:Abt.Controls.SciChart.AxisBase.TextFormatting"/> property as a formatting string
            </summary>
            <param name="value">The data value to format</param>
            /// <param name="format">A composite format string</param>
            <returns>The string formatted data value</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.IsValidRange(Abt.Controls.SciChart.IRange)">
            <summary>
            Checks whether <paramref name="range"/> is valid visible range for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IAxis.AnimateVisibleRangeTo(Abt.Controls.SciChart.IRange,System.TimeSpan)">
            <summary>
            Animates the VisibleRange of the current axis to the end-range, with the specified duration
            </summary>
            <param name="range">The range to animate to</param>
            <param name="duration">The duration to animate</param>
        </member>
        <member name="E:Abt.Controls.SciChart.IAxis.VisibleRangeChanged">
            <summary>
            Raised when the VisibleRange is changed
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.Id">
            <summary>
            Gets or sets the string Id of this axis. Used to associated <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> and <see cref="T:Abt.Controls.SciChart.YAxisDragModifier"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.AnimatedVisibleRange">
            <summary>
            Gets or sets the animated VisibleRange of the Axis. When this property is set, the axis animates the VisibleRange to the new value
            </summary>
            <value>The visible range.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.VisibleRange">
            <summary>
            Gets or sets the VisibleRange of the Axis. In the case of XAxis, this will cause an align to X-Axis operation to take place
            </summary>
            <remarks>Setting the VisibleRange will cause the axis to redraw</remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.DataRange">
            <summary>
            Gets the DataRange (full extents of the data) of the Axis
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.DataSet">
            <summary>
            Gets the DataSeriesSet that this axis draws data from
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.Width">
            <summary>
            Gets the Rendered Width of the axis
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.Height">
            <summary>
            Gets the Rendered Height of the axis
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.GrowBy">
            <summary>
            Gets or sets the GrowBy Factor. e.g. GrowBy(0.1, 0.2) will increase the axis extents by 10% (min) and 20% (max) outside of the data range
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.MinorDelta">
            <summary>
            Gets or sets the Minor Delta
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.MajorDelta">
            <summary>
            Gets or sets the Major Delta
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.Services">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.ServiceContainer"/> which provides access to services throughout SciChart. 
            ServiceContainers are created one per <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Abt.Controls.SciChart.AxisBase"/>, <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.ParentSurface">
            <summary>
            Gets or sets the ParentSurface that this Axis is associated with
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.Orientation">
            <summary>
            Gets or sets the Axis Orientation, e.g. Horizontal (XAxis) or Vertical (YAxis)
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.MajorLineStroke">
            <summary>
            Gets or sets the Major Line Stroke for this axis
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.MinorLineStroke">
            <summary>
            Gets or sets the Minoe Line Stroke for this axis
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.MajorTickLineStyle">
            <summary>
            Gets or sets the Major Tick Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all major ticks on this axis
            </summary>
            <remarks>
            The depth of the tick is defined by the <see cref="P:System.Windows.Shapes.Line.Y2"/> and <see cref="P:System.Windows.Shapes.Line.X2"/> properties. For instance, setting
            Y2 and X2 to 6 will result in Major ticks being 6 pixels in size, whether on the X or Y axis
            </remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.MinorTickLineStyle">
            <summary>
            Gets or sets the Minor Tick Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all major ticks on this axis
            </summary>
            <remarks>
            The depth of the tick is defined by the <see cref="P:System.Windows.Shapes.Line.Y2"/> and <see cref="P:System.Windows.Shapes.Line.X2"/> properties. For instance, setting
            Y2 and X2 to 3 will result in Minor ticks being 6 pixels in size, whether on the X or Y axis
            </remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.MajorGridLineStyle">
            <summary>
            Gets or sets the Major Grid Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all major gridlines drawn by this axis
            </summary>        
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.MinorGridLineStyle">
            <summary>
            Gets or sets the Minor Grid Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all minor gridlines drawn by this axis
            </summary>        
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.AutoRange">
            <summary>
            Gets or sets whether this Axis should AutoRange. Default is False
            </summary>
            <value>If <c>true</c>, the axis should scale to fit the data, else <c>false</c>.</value>
            <remarks>GrowBy is applied when the axis scales to fit</remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.TextFormatting">
            <summary>
            Gets or sets the Text Formatting String for Axis Tick Labels on this axis
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.CursorTextFormatting">
            <summary>
            Gets or sets the Text Formatting String for Labels on this cursor
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.LabelFormatter">
            <summary>
            Gets or sets a <see cref="T:Abt.Controls.SciChart.ILabelFormatter"/> instance, which may be used to programmatically override the formatting of text and cursor labels. 
            For examples, see the <see cref="T:Abt.Controls.SciChart.DefaultLabelFormatter"/> and <see cref="T:Abt.Controls.SciChart.TradeChartAxisLabelFormatter"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.IsXAxis">
            <summary>
            Gets whether this axis is an X-Axis or not
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.HasValidVisibleRange">
            <summary>
            Gets whether the VisibleRange is valid, e.g. is not null, is not NaN and the difference between Max and Min is not zero
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.AxisTitle">
            <summary>
            Gets or sets the Axis Title
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.TickTextBrush">
            <summary>
            Gets or sets the tick text brush applied to text labels
            </summary>
            <value>The tick text brush</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.AutoAlignVisibleRange">
            <summary>
            Gets or sets whether to auto-align the visible range to the data when it is set. Note that this property only applies to the X-Axis. 
            The default value is True. Whenever the <see cref="P:Abt.Controls.SciChart.IAxis.VisibleRange"/> is set on the X-Axis, the Min and Max values will be aligned to data values in the <see cref="P:Abt.Controls.SciChart.IDataSeries.XValues"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.DrawMinorTicks">
            <summary>
            If True, draws Minor Tick Lines, else skips this step
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.DrawMajorTicks">
            <summary>
            If True, draws Major Tick Lines, else skips this step
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.DrawMajorGridLines">
            <summary>
            If True, draws Major Grid Lines, else skips this step
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.DrawMinorGridLines">
            <summary>
            If True, draws Minor Grid Lines, else skips this step
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment characteristics that are applied to a <see cref="T:System.Windows.FrameworkElement"/> when it is composed in a layout parent, such as a panel or items control.
            </summary>
            
            <returns>
            A horizontal alignment setting, as a value of the enumeration. The default is <see cref="F:System.Windows.HorizontalAlignment.Stretch"/>.
            </returns>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment characteristics that are applied to a <see cref="T:System.Windows.FrameworkElement"/> when it is composed in a parent object such as a panel or items control.
            </summary>
            
            <returns>
            A vertical alignment setting. The default is <see cref="F:System.Windows.VerticalAlignment.Stretch"/>.
            </returns>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.AxisMode">
            <summary>
            Gets or sets the <see cref="P:Abt.Controls.SciChart.IAxis.AxisMode"/>, e.g. Linear or Logarithmic, that this Axis operates in
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.AxisAlignment">
            <summary>
            Gets or sets the <see cref="P:Abt.Controls.SciChart.IAxis.AxisAlignment"/> for this Axis. Default is Right.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.IsCategoryAxis">
            <summary>
            Gets a value indicating whether this instance is a category axis.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.IsPrimaryAxis">
            <summary>
            Gets or sets whether current Axis is the main one in axis collection. This is the axis which is responsible for drawing grid lines on the <see cref="T:Abt.Controls.SciChart.GridLinesPanel"/> and by default, 
            is the first axis in the collection
            </summary>
            <remarks>Primary axis determines grid coordinates</remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.ModifierAxisCanvas">
            <summary>
            Gets the modifier axis canvas, which is used by the CursorModifier to overlay cursor labels and by AxisMarkerAnnotations
            </summary>        
        </member>
        <member name="P:Abt.Controls.SciChart.IAxis.Visibility">
            <summary>
            Gets or sets the visibility of the Axis
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.DefaultAxisId">
            <summary>
            The Default Axis Id for new Axes
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.MinDistanceToBounds">
            <summary>
            Defines the minimum distance to the edge of the chart to cull axis labels
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.MinDistanceBetweenLabels">
            <summary>Gets the Minimum distance between labels in pixels, before labels are culled</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.XAxisLabelTopIndent">
            <summary>Gets the Label indent on the X-Axis</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.IsPrimaryAxisProperty">
            <summary>
            Defines the IsPrimaryAxis DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.AxisModeProperty">
            <summary>
            Defines the AxisMode DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.AutoRangeProperty">
            <summary>
            Defines the AutoRange DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.MajorDeltaProperty">
            <summary>
            Defines the MajorDelta DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.MinorDeltaProperty">
            <summary>
            Defines the MinorDelta DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.MinorsPerMajorProperty">
            <summary>
            Defines the MinorDelta DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.GrowByProperty">
            <summary>
            Defines the GrowBy DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.VisibleRangeProperty">
            <summary>
            Defines the VisibleRange DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.AnimatedVisibleRangeProperty">
            <summary>
            Defines the Animated VisibleRange DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.VisibleRangePointProperty">
            <summary>
            Defines the VisibleRangePoint DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.DataRangeProperty">
            <summary>
            Defines the DataRange DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.AutoAlignVisibleRangeProperty">
            <summary>
            Defines the AutoAlignVisibleRange DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.OrientationProperty">
            <summary>
            Defines the Orientation DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.AxisAlignmentProperty">
            <summary>
            Defines the AxisAlignment DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.IdProperty">
            <summary>
            Defines the Id DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.FlipCoordinatesProperty">
            <summary>
            Defines the FlipCoordinates DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.LabelFormatterProperty">
            <summary>
            Defines the LabelFormatter DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.TextFormattingProperty">
            <summary>
            Defines the TextFormatting DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.CursorTextFormattingProperty">
            <summary>
            Defines the CursorTextFormatting DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.AxisTitleProperty">
            <summary>
            Defines the AxisTitle DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.TitleFontWeightProperty">
            <summary>
            Defines the TitleFontWeight DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.TitleFontSizeProperty">
            <summary>
            Defines the TitleFontWeight DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.TickTextBrushProperty">
            <summary>
            Defines the TickTextBrush DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.StrokeThicknessProperty">
            <summary>
            Defines the StrokeThickness DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.MajorTickLineStyleProperty">
            <summary>
            Defines the MajorTickLineStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.MinorTickLineStyleProperty">
            <summary>
            Defines the MinorTickLineStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.DrawMajorTicksProperty">
            <summary>
            Defines the DrawMajorTicks DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.DrawMinorTicksProperty">
            <summary>
            Defines the DrawMinorTicks DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.DrawLabelsProperty">
            <summary>
            Defines the DrawLabels DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.MajorGridLineStyleProperty">
            <summary>
            Defines the MajorGridLineStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.MinorGridLineStyleProperty">
            <summary>
            Defines the MinorGridLineStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.DrawMajorGridLinesProperty">
            <summary>
            Defines the DrawMajorGridLines DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.DrawMinorGridLinesProperty">
            <summary>
            Defines the DrawMinorGridLines DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.MaxAutoTicksProperty">
            <summary>
            Defines the MaxAutoTicks DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.AutoTicksProperty">
            <summary>
            Defines the AutoTicks DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase.LastLabelSize">
            <summary>
            Gets the last label size, used when culling labels that are too close togther
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisBase._currentCoordinateCalculator">
            <summary>
            The current CoordinateCalculator for this render pass
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.AxisBase"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.CalculateYRange(Abt.Controls.SciChart.RenderPassInfo)">
            <summary>
            Gets the aligned VisibleRange of the axis, with optional ZoomToFit flag.
            If ZoomToFit is true, it will return the DataRange plus any GrowBy applied to the axis
            </summary>
            <param name="renderPassInfo">Struct containing data for the current render pass</param>
            <returns>The VisibleRange of the axis</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.GetMaximumRange">
            <summary>
            Gets the Maximum Range of the axis, which is equal to the DataRange including any GrowBy factor applied
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.ScrollTo(Abt.Controls.SciChart.IRange,System.Double)">
            <summary>
            From the starting <see cref="T:Abt.Controls.SciChart.IRange"/>, scrolls to a new range by the specified number of pixels
            </summary>
            <param name="startVisibleRange">The start visible range</param>
            <param name="pixelsToScroll">Scroll N pixels from the start visible range</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.ScrollToWithLimit(Abt.Controls.SciChart.IRange,System.Double,Abt.Controls.SciChart.IRange)">
            <summary>
            From the starting <see cref="T:Abt.Controls.SciChart.IRange"/>, scrolls to a new range by the specified number of pixels, with the specified range limit
            </summary>
            <param name="startVisibleRange">The start visible range</param>
            <param name="pixelsToScroll">Scroll N pixels from the start visible range</param>
            <param name="rangeLimit">The range limit.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.ScrollXRange(System.Int32)">
            <summary>
            Translates the VisibleRange of the XAxis by the specified number of datapoints
            </summary>
            <param name="deltaX">The delta X.</param>
            <exception cref="T:System.InvalidOperationException">Throws if the axis is not an XAxis</exception>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.GetCurrentCoordinateCalculator">
            <summary>
            Gets the current <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/> for this Axis, based on current Visible Range and axis type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.GetAxisParams">
            <summary>
            Gets an <see cref="T:Abt.Controls.SciChart.AxisParams"/> struct with info about the current axis setup
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.ResumeUpdates(Abt.Controls.SciChart.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>The disposable Update Suspender</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.SetMouseCursor(System.Windows.Input.Cursor)">
            <summary>
            Sets the cursor for this Axis
            </summary>
            <param name="cursor">The Cursor instance</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.HitTest(System.Windows.Point)">
            <summary>
            Performs a hit test on the Axis, returning the Data Value at the specific x or y pixel coordinate. This operation is the opposite of <see cref="M:Abt.Controls.SciChart.AxisBase.GetCoordinate(System.IComparable)"/>
            </summary>
            <remarks>If the Axis is an XAxis, the coordinate passed in is an X-pixel. If the axis is a Y Axis, the coordinate is a Y-pixel</remarks>
            <param name="atPoint">The pixel coordinate on this Axis corresponding to the input DataValue</param>
            <returns>An <see cref="T:Abt.Controls.SciChart.AxisInfo"/> struct containing the datavalue and formatted data value at this coordinate</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.GetCoordinate(System.IComparable)">
            <summary>
            Given the Data Value, returns the x or y pixel coordinate at that value on the Axis. This operation is the opposite of <see cref="M:Abt.Controls.SciChart.AxisBase.HitTest(System.Windows.Point)"/>
            </summary>
            <remarks>If the Axis is an XAxis, the coordinate returned is an X-pixel. If the axis is a Y Axis, the coordinate returned is a Y-pixel</remarks>
            <param name="value">The DataValue as input</param>
            <returns>The pixel coordinate on this Axis corresponding to the input DataValue</returns>
            <example>
            Given an axis with a VisibleRange of 1..10 and height of 100, a value of 7 passed in to GetCoordinate would return 70 pixels
              </example>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.TranslatePoint(System.Windows.Point,Abt.Controls.SciChart.IHitTestable)">
            <summary>
            Translates the point relative to the other hittestable element
            </summary>
            <param name="point">The point.</param>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current HitTestable element
            </summary>
            <param name="point">The point to test</param>
            <returns>true if the Point is within the bounds</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.GetBoundsRelativeTo(Abt.Controls.SciChart.IHitTestable)">
            <summary>
            Gets the bounds of the current HitTestable element relative to another HitTestable element
            </summary>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.OnDrawAxis(Abt.Controls.SciChart.AxisBase.TickCoordinates)">
            <summary>
            Called when the axis should redraw itself. 
            </summary>
            <param name="tickCoords"> </param>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.Clear">
            <summary>
            Clears axis labels, ticks and gridlines off this axis
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.FormatText(System.IComparable,System.String)">
            <summary>
            String formats the text, using the <see cref="P:Abt.Controls.SciChart.AxisBase.TextFormatting"/> property as a formatting string
            </summary>
            <param name="value">The data value to format</param>
            <param name="format">A composite format string</param>
            <returns>The string formatted data value</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.FormatCursorText(System.IComparable,System.String)">
            <summary>
            String formats text for the cursor, using the <see cref="P:Abt.Controls.SciChart.AxisBase.CursorTextFormatting"/> property as a formatting string
            </summary>
            <param name="value">The data value to format</param>
            <param name="format">A composite format string</param>
            <returns>The string formatted data value</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.CalculateDelta">
            <summary>
            Calcuates the delta's for use in this render pass
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.DrawTicks(System.Windows.Controls.Canvas,System.Windows.Size,Abt.Controls.SciChart.AxisBase.TickCoordinates)">
            <summary>
            Draws the ticks and gridlines during a render pass
            </summary>
            <param name="canvas">The canvas to draw ticks on.</param>
            <param name="panelSize">Size of the panel to draw on.</param>
            <param name="tickCoords">The tick coords containing all coordinates for ticks and gridlines.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.MeasureTicks">
            <summary>
            Measures the size required to draw tick marks on the axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.MeasureLongestTickText">
            <summary>
            Measures the size required to draw the longest tick label on the axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.DrawTick(System.Windows.Controls.Canvas,System.Windows.Style,Abt.Controls.SciChart.XyDirection,System.Int32)">
            <summary>
            Draws a single tick on the axis, using the specified Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), <see cref="T:Abt.Controls.SciChart.XyDirection"/> and integer coordinate.
            </summary>
            <param name="canvas">The canvas to draw on.</param>
            <param name="tickStyle">The Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>) to apply to the tick line</param>
            <param name="direction">The X or Y direction to draw the tick</param>
            <param name="atPoint">The integer coordinate to draw at. If direction is <see cref="F:Abt.Controls.SciChart.XyDirection.XDirection"/>, the coodinate is an X-coordinate, else it is a Y-coordinate</param>
            <remarks>
            If direction is <see cref="F:Abt.Controls.SciChart.XyDirection.XDirection"/>, the coodinate is an X-coordinate, else it is a Y-coordinate
            </remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.DrawGridLine(System.Int32,System.Windows.Style,Abt.Controls.SciChart.XyDirection,System.Int32)">
            <summary>
            Draws a single grid line on the <see cref="P:Abt.Controls.SciChart.AxisBase.GridLinesPanel"/>, using the specified Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), <see cref="T:Abt.Controls.SciChart.XyDirection"/> and integer coordinate.
            </summary>
            <remarks>If direction is <see cref="F:Abt.Controls.SciChart.XyDirection.XDirection"/>, the coodinate is an X-coordinate, else it is a Y-coordinate</remarks>
            <param name="lineId">ID for the line</param>
            <param name="lineStyle">The Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>) to apply to the grid line</param>
            <param name="direction">The X or Y direction to draw the  </param>
            <param name="atPoint">The integer coordinate to draw at. If direction is <see cref="F:Abt.Controls.SciChart.XyDirection.XDirection"/>, the coodinate is an X-coordinate, else it is a Y-coordinate</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.OnVisibleRangeChanged(Abt.Controls.SciChart.VisibleRangeChangedEventArgs)">
            <summary>
            Raises the VisibleRangeChanged event
            </summary>
            <param name="args">The <see cref="T:Abt.Controls.SciChart.VisibleRangeChangedEventArgs"/> containing event data</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.AlignVisibleRange(Abt.Controls.SciChart.IRange)">
            <summary>
            Aligns the visible range to the data and sets on the VisibleRange proprety. Used for category axis types
            </summary>
            <param name="newVisibleRange">The visible range to align</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.InvalidateParent(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Provides a DependencyProperty callback which invalidates the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.GetMaxAutoTicks">
            <summary>
            Calculates max auto ticks amount, which is >= 1
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.OnArrangeAxis">
            <summary>
            Called internally to arrange and measure the axis, before a render pass
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.MeasureAxisCanvas">
            <summary>
            Performs a fast measure of the axis, using tick size, single label size showing the maximum value formatted
            </summary>
            <returns>The size of the axis</returns>   
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.OnBeginRenderPass">
            <summary>
            Called internally immediately before a render pass begins
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.InvalidateElement">
            <summary>
            Asynchronously requests that the element redraws itself plus children.
            Will be ignored if the element is ISuspendable and currently IsSuspended (within a SuspendUpdates/ResumeUpdates call)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.CalculateTicks">
            <summary>
            Overridden by derived types, called internal to calculate MinorTicks, MajorTicks before Axis drawing
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.GetTickCoordinates(System.Double[],System.Double[])">
            <summary>
            Converts arrays of major and minor ticks (data values) into <see cref="T:Abt.Controls.SciChart.AxisBase.TickCoordinates"/> structure containing pixel coordinates
            </summary>
            <param name="minorTicks">The minor ticks, cast to double</param>
            <param name="majorTicks">The major ticks, cast to double</param>
            <returns>The <see cref="T:Abt.Controls.SciChart.AxisBase.TickCoordinates"/> structure containing pixel coordinates</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.IsInBounds(System.Int32)">
            <summary>
            Checks whether GridLinesPanel contains passed coordinate
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.DrawGridLines(Abt.Controls.SciChart.AxisBase.TickCoordinates)">
            <summary>
            Called internal to draw gridlines before Axis drawing
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.GetPointRange">
            <summary>
            Gets the integer indices of the X-Data array that are currently in range.
            </summary>
            <returns>
            The indices to the X-Data that are currently in range
            </returns>
            <example>If the input X-data is 0...100 in steps of 1, the VisibleRange is 10, 30 then the PointRange will be 10, 30</example>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.AssertRangeType(Abt.Controls.SciChart.IRange)">
            <summary>
            Asserts the <see cref="T:Abt.Controls.SciChart.IRange"/> is of the correct type for this axis
            </summary>
            <param name="range">The range to assert</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.AssertDataType(System.Type)">
            <summary>
            Asserts the type passed in is supported by the current axis implementation
            </summary>
            <param name="dataType"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.IsValidRange(Abt.Controls.SciChart.IRange)">
            <summary>
            Checks whether <paramref name="range"/> is valid visible range for this axis
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.AnimateVisibleRangeTo(Abt.Controls.SciChart.IRange,System.TimeSpan)">
            <summary>
            Animates the visible range of the axis to the destination VisibleRange, over the specified Duration. 
            Also see <see cref="P:Abt.Controls.SciChart.AxisBase.AnimatedVisibleRange"/> property which has a default duration of 500ms
            </summary>
            <param name="to">The end range</param>
            <param name="duration">The duration of the animation.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.IsOfValidType(Abt.Controls.SciChart.IRange)">
            <summary>
            Checks whether <paramref name="range"/> is of valid type for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Abt.Controls.SciChart.AxisBase.PropertyChanged"/> event, as part of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="E:Abt.Controls.SciChart.AxisBase.Arranged">
            <summary>
            Event raised immediately after the <see cref="T:Abt.Controls.SciChart.AxisBase"/> measures itself
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart.AxisBase.VisibleRangeChanged">
            <summary>
            Raised when the VisibleRange is changed
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.IsXAxis">
            <summary>
            Gets whether the current axis is an X-Axis or not
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.IsPrimaryAxis">
            <summary>
            Gets or sets whether current Axis is the main one in axis collection
            </summary>
            <remarks>Primary axis determinate coordinate grid</remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.AutoAlignVisibleRange">
            <summary>
            Gets or sets whether to auto-align the visible range to the data when it is set. Note that this property only applies to the X-Axis.
            The default value is True. Whenever the <see cref="P:Abt.Controls.SciChart.AxisBase.VisibleRange"/> is set on the X-Axis, the Min and Max values will be aligned to data values in the <see cref="P:Abt.Controls.SciChart.IDataSeries.XValues"/>
            </summary>
            <value><c>true</c> if [auto align visible range]; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.HasValidVisibleRange">
            <summary>
            Gets whether the VisibleRange is valid, e.g. is not null, is not NaN and the difference between Max and Min is not zero
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.Abt#Controls#SciChart#IAxis#Width">
            <summary>
            Gets or sets the width of the element.
            </summary>
            <returns>The width of the element, in device-independent units (1/96th inch per unit). The default value is <see cref="F:System.Double.NaN"/>. This value must be equal to or greater than 0.0. See Remarks for upper bound information.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.Abt#Controls#SciChart#IAxis#Height">
            <summary>
            Gets or sets the suggested height of the element.
            </summary>
            <returns>The height of the element, in device-independent units (1/96th inch per unit). The default value is <see cref="F:System.Double.NaN"/>. This value must be equal to or greater than 0.0. See Remarks for upper bound information.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.ParentSurface">
            <summary>
            Gets or sets the ParentSurface that this Axis is associated with
            </summary>
            <value>The parent surface.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.Services">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.ServiceContainer"/> which provides access to services throughout SciChart. 
            ServiceContainers are created one per <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Abt.Controls.SciChart.AxisBase"/>, <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.DataSet">
            <summary>
            Gets the DataSeriesSet that this axis draws data from
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.AxisTitle">
            <summary>
            Gets or sets the Axis Title
            </summary>
            <value>The axis title.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.TitleFontWeight">
            <summary>
            Gets or sets the Axis Title Font Weight
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.TitleFontSize">
            <summary>
            Gets or sets the Axis Title Font Size
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.TextFormatting">
            <summary>
            Gets or sets the Text Formatting String for Tick Labels on this axis
            </summary>
            <value>The text formatting.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.CursorTextFormatting">
            <summary>
            Gets or sets the Text Formatting String for Labels on this cursor
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.LabelFormatter">
            <summary>
            Gets or sets a <see cref="T:Abt.Controls.SciChart.ILabelFormatter"/> instance, which may be used to programmatically override the formatting of text and cursor labels. 
            For examples, see the <see cref="T:Abt.Controls.SciChart.DefaultLabelFormatter"/> and <see cref="T:Abt.Controls.SciChart.TradeChartAxisLabelFormatter"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.AxisMode">
            <summary>
            Gets or sets the <see cref="P:Abt.Controls.SciChart.AxisBase.AxisMode"/>, e.g. Linear or Logarithmic, that this Axis operates in
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.AutoRange">
            <summary>
            Gets or sets whether this Axis should AutoRange. Default is False
            </summary>
            <value>If <c>true</c>, the axis should scale to fit the data, else <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.GrowBy">
            <summary>
            Gets or sets the GrowBy Factor. e.g. GrowBy(0.1, 0.2) will increase the axis extents by 10% (min) and 20% (max) outside of the data range
            </summary>
            <value>The grow by factor as a DoubleRange.</value>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.FlipCoordinates">
            <summary>
            Gets or sets a flag indicating whether to flip the tick and pixel coordinate generation for this axis, causing the axis ticks to decrement and chart to be flipped in the axis direction
            </summary>
            <value>
              If <c>true</c> reverses the ticks and coordinates for the axis.
            </value>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.MajorDelta">
            <summary>
            Gets or sets the Major Delta
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.MinorsPerMajor">
            <summary>
            Gets or sets the number of Minor Delta ticks per Major Tick
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.MaxAutoTicks">
            <summary>
            Gets or sets the max ticks.
            </summary>
            <value>The max ticks.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.AutoTicks">
            <summary>
            Gets or sets value, that indicates whether calculate ticks automatically. Default is True.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.MinorDelta">
            <summary>
            Gets or sets the Minor Delta
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.TickTextBrush">
            <summary>
            Gets or sets the tick text brush applied to text labels
            </summary>
            <value>The tick text brush</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.MajorLineStroke">
            <summary>
            Gets or sets the Major Line Stroke for this axis
            </summary>
            <value>The major line stroke.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.MinorLineStroke">
            <summary>
            Gets or sets the Minoe Line Stroke for this axis
            </summary>
            <value>The minor line stroke.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.MajorTickLineStyle">
            <summary>
            Gets or sets the Major Tick Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all major ticks on this axis
            </summary>
            <value>The major tick line style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.MinorTickLineStyle">
            <summary>
            Gets or sets the Minor Tick Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all major ticks on this axis
            </summary>
            <value>The minor tick line style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.MajorGridLineStyle">
            <summary>
            Gets or sets the Major Grid Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all major gridlines drawn by this axis
            </summary>
            <value>The major grid line style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.MinorGridLineStyle">
            <summary>
            Gets or sets the Minor Grid Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all minor gridlines drawn by this axis
            </summary>
            <value>The minor grid line style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.DrawMinorTicks">
            <summary>
            If True, draws Minor Tick Lines, else skips this step
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.DrawLabels">
            <summary>
            If True, draw labels for each major tick on the Axis, else skips this step
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.DrawMajorTicks">
            <summary>
            If True, draws Major Tick Lines, else skips this step
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.DrawMajorGridLines">
            <summary>
            If True, draws Major Grid Lines, else skips this step
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.DrawMinorGridLines">
            <summary>
            If True, draws Minor Grid Lines, else skips this step
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.Orientation">
            <summary>
            Gets or sets the Axis Orientation, e.g. Horizontal (XAxis) or Vertical (YAxis)
            </summary>
            <value>The orientation.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.AxisAlignment">
            <summary>
            Gets or sets the <see cref="P:Abt.Controls.SciChart.AxisBase.AxisAlignment"/> for this Axis. Default is Right.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.Id">
            <summary>
            Gets or sets the string Id of this axis. Used to associated <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> and <see cref="T:Abt.Controls.SciChart.YAxisDragModifier"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <value>The stroke thickness.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.ModifierAxisCanvas">
            <summary>
            Gets the ModifierAxisCanvas, which may be used to overlay markers on the canvas
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.GridLinesPanel">
            <summary>
            Get the <see cref="P:Abt.Controls.SciChart.AxisBase.GridLinesPanel"/> instance off the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.IsCategoryAxis">
            <summary>
            Gets a value indicating whether this instance is a category axis.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.AnimatedVisibleRange">
            <summary>
            Gets or sets the animated VisibleRange of the Axis. 
            When this property is set, the axis animates the VisibleRange to the new value over a duration of 500ms
            </summary>
            <value>The visible range.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.VisibleRange">
            <summary>
            Gets or sets the VisibleRange of the Axis. 
            </summary>
            <value>The visible range.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisBase.DataRange">
            <summary>
            Gets the DataRange (full extents of the data) of the Axis. NOTE: Do not set this in code - this is used internally by SciChart
            </summary>
            <value>The data range.</value>
            <remarks></remarks>
        </member>
        <member name="E:Abt.Controls.SciChart.AxisBase.PropertyChanged">
            <summary>
            Raised when properties are changed
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AxisBase.TickCoordinates">
            <summary>
            A structure contaning tick coordinates. Used internally when drawing tick marks and grid lines
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AxisMode">
            <summary>
            Defines constants for how Axes behave
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisMode.Linear">
            <summary>
            The Axis is a Linear Axis
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisMode.Logarithmic">
            <summary>
            The Axis is a Logarithmic Axis
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AxisParams">
            <summary>
            Defines constants for the current axis setup for this render pass
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisParams.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisParams.Equals(Abt.Controls.SciChart.AxisParams)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.AxisParams.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Abt.Controls.SciChart.CategoryDateTimeAxis">
            <summary>
            Provides a DateTime axis with category XAxis implementation, 
            used for financial charts (stock charts)
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ICategoryAxis">
            <summary>
            Defines the interface to a category axis, which treats X-data as linearly increasing regardless of value
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ICategoryAxis.OnBeginRenderPass(Abt.Controls.SciChart.IPointSeries)">
            <summary>
            Called at the start of a render pass, passing in the root <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which will define the categories
            </summary>
            <param name="firstPointSeries">the root <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which will define the categories</param>
        </member>
        <member name="M:Abt.Controls.SciChart.ICategoryAxis.ToDateRange(Abt.Controls.SciChart.IndexRange)">
            <summary>
            Converts the CategoryDateTimeAxis's <see cref="P:Abt.Controls.SciChart.AxisBase.VisibleRange"/> of type <see cref="T:Abt.Controls.SciChart.IndexRange"/> to a <see cref="T:Abt.Controls.SciChart.DateRange"/> of concrete date-values.
            Note: If either index is outside of the range of data on the axis, the date values will be inteporlated.
            </summary>
            <param name="visibleRange">The input <see cref="T:Abt.Controls.SciChart.IndexRange"/></param>
            <returns>The <see cref="T:Abt.Controls.SciChart.DateRange"/> with transformed dates that correspond to input indices</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.ICategoryAxis.CurrentDatapointWidth">
            <summary>
            Gets the current data-point width in pixels
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.CategoryDateTimeAxis.BarTimeFrameProperty">
            <summary>
            Defines the BarTimeFrame DependencyProperty. A default value of -1 allows the <see cref="T:Abt.Controls.SciChart.CategoryDateTimeAxis"/> to estimate the timeframe
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.CategoryDateTimeAxis.SubDayTextFormattingProperty">
            <summary>
            Defines the SubDayTextFormatting DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.CategoryDateTimeAxis"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.CalculateYRange(Abt.Controls.SciChart.RenderPassInfo)">
            <summary>
            Calculates the zoom-to-fit Y-Range of the axis, accounting for the data that
            is in the viewport and applying any GrowBy margin        
            </summary>
            <param name="renderPassInfo">Struct containing data for the current render pass</param>
            <returns>
            The VisibleRange of the axis
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.GetMaximumRange">
            <summary>
            Gets the Maximum Range of the axis, which is equal to the DataRange including any GrowBy factor applied
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.AssertDataType(System.Type)">
            <summary>
            Asserts the type passed in is supported by the current axis implementation
            </summary>
            <param name="dataType"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.OnArrangeAxis">
            <summary>
            Called internally to arrange and measure the axis, before a render pass
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.MeasureAxisCanvas">
            <summary>
            Performs a fast measure of the axis, using tick size, single label size showing the maximum value formatted
            </summary>
            <returns>The size of the axis</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.MeasureLongestTickText">
            <summary>
            Measures the size required to draw the longest tick label on the axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.CalculateTicks">
            <summary>
            Overridden by derived types, called internal to calculate MinorTicks, MajorTicks before Axis drawing
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.CalculateDelta">
            <summary>
            Calcuates the delta's for use in this render pass
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.GetCoordinate(System.IComparable)">
            <summary>
            Given the Data Value, returns the x or y pixel coordinate at that value on the Axis. This operation is the opposite of <see cref="M:Abt.Controls.SciChart.AxisBase.HitTest(System.Windows.Point)"/>
            </summary>
            <param name="value">The DataValue as input</param>
            <returns>
            The pixel coordinate on this Axis corresponding to the input DataValue
            </returns>
            <example>
            Given an axis with a VisibleRange of 1..10 and height of 100, a value of 7 passed in to GetCoordinate would return 70 pixels
              </example>
            <remarks>
            If the Axis is an XAxis, the coordinate returned is an X-pixel. If the axis is a Y Axis, the coordinate returned is a Y-pixel
            </remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.AssertRangeType(Abt.Controls.SciChart.IRange)">
            <summary>
            Asserts the <see cref="T:Abt.Controls.SciChart.IRange"/> is of the correct type for this axis
            </summary>
            <param name="range">The range to assert</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.IsOfValidType(Abt.Controls.SciChart.IRange)">
            <summary>
            Checks whether <paramref name="range" /> is of valid type for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.IsValidRange(Abt.Controls.SciChart.IRange)">
            <summary>
            Checks whether <paramref name="range" /> is valid visible range for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.HitTest(System.Windows.Point)">
            <summary>
            Performs a hit test on the Axis, returning the Data Value at the specific x or y pixel coordinate. This operation is the opposite of <see cref="M:Abt.Controls.SciChart.AxisBase.GetCoordinate(System.IComparable)"/>
            </summary>
            <param name="atPoint">The pixel coordinate on this Axis corresponding to the input DataValue</param>
            <returns>An <see cref="T:Abt.Controls.SciChart.AxisInfo"/> struct containing the datavalue and formatted data value at this coordinate</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.FormatText(System.IComparable,System.String)">
            <summary>
            String formats the text, using the <see cref="P:Abt.Controls.SciChart.AxisBase.TextFormatting"/> property as a formatting string
            </summary>
            <param name="value">The data value to format</param>
            <param name="format">A composite format string</param>
            <returns>
            The string formatted data value
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.FormatCursorText(System.IComparable,System.String)">
            <summary>
            String formats text for the cursor, using the <see cref="P:Abt.Controls.SciChart.AxisBase.CursorTextFormatting"/> property as a formatting string
            </summary>
            <param name="value">The data value to format</param>
            <param name="cursorFormat">A composite format string</param>
            <returns>The string formatted data value</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.GetAxisParams">
            <summary>
            Gets an <see cref="T:Abt.Controls.SciChart.AxisParams"/> struct with info about the current axis setup
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.OnBeginRenderPass(Abt.Controls.SciChart.IPointSeries)">
            <summary>
            Called at the start of a render pass, passing in the root <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which will define the categories
            </summary>
            <param name="firstPointSeries">the root <see cref="T:Abt.Controls.SciChart.IPointSeries"/> which will define the categories</param>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.ScrollToWithLimit(Abt.Controls.SciChart.IRange,System.Double,Abt.Controls.SciChart.IRange)">
            <summary>
            From the starting <see cref="T:Abt.Controls.SciChart.IRange"/>, scrolls to a new range by the specified number of pixels, with the specified range limit
            </summary>
            <param name="startVisibleRange">The start visible range</param>
            <param name="pixelsToScroll">Scroll N pixels from the start visible range</param>
            <param name="rangeLimit">The range limit.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.OnVisibleRangeChanged(Abt.Controls.SciChart.VisibleRangeChangedEventArgs)">
            <summary>
            Raises the VisibleRangeChanged event
            </summary>
            <param name="args">The <see cref="T:Abt.Controls.SciChart.VisibleRangeChangedEventArgs"/> containing event data</param>
        </member>
        <member name="M:Abt.Controls.SciChart.CategoryDateTimeAxis.ToDateRange(Abt.Controls.SciChart.IndexRange)">
            <summary>
            Converts the CategoryDateTimeAxis's <see cref="P:Abt.Controls.SciChart.AxisBase.VisibleRange"/> of type <see cref="T:Abt.Controls.SciChart.IndexRange"/> to a <see cref="T:Abt.Controls.SciChart.DateRange"/> of concrete date-values.
            Note: If either index is outside of the range of data on the axis, the date values will be inteporlated.
            </summary>
            <param name="visibleRange">The input <see cref="T:Abt.Controls.SciChart.IndexRange"/></param>
            <returns>The <see cref="T:Abt.Controls.SciChart.DateRange"/> with transformed dates that correspond to input indices</returns>
        </member>
        <member name="P:Abt.Controls.SciChart.CategoryDateTimeAxis.SubDayTextFormatting">
            <summary>
            Gets or sets the Text Formatting String used for Axis Tick Labels when the range of the axis is sub-day
            </summary>
            <value>The text formatting.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.CategoryDateTimeAxis.BarTimeFrame">
            <summary>
            Gets or sets the Bar Time Frame in seconds. This is the number of seconds that each data-point represents on the <see cref="T:Abt.Controls.SciChart.CategoryDateTimeAxis"/> and is required for proper rendering. 
            A default value of -1 allows the <see cref="T:Abt.Controls.SciChart.CategoryDateTimeAxis"/> to estimate the timeframe
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.CategoryDateTimeAxis.DataRange">
            <summary>
            Gets the DataRange (full extents of the data) of the Axis. 
            In the case of the CategoryDateTimeAxis this is measured in data-points (or bars)
            </summary>
            <value>The data range.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.CategoryDateTimeAxis.CurrentDatapointWidth">
            <summary>
            Gets the current data-point width, which is the width of one data-point in pixels on the category axis
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.CategoryDateTimeAxis.IsCategoryAxis">
            <summary>
            Gets a value indicating whether this instance is category axis.
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ILabelFormatter">
            <summary>
            Interface to define a LabelFormatter. The LabelFormatter may be set or data-bound to the <see cref="P:Abt.Controls.SciChart.AxisBase.LabelFormatter"/> property, allowing
            programmatic overriding of axis labels. 
            
            Create a class which implements <see cref="T:Abt.Controls.SciChart.ILabelFormatter"/> and return string values from the <see cref="M:Abt.Controls.SciChart.ILabelFormatter.FormatLabel(System.IComparable)"/> and <see cref="M:Abt.Controls.SciChart.ILabelFormatter.FormatCursorLabel(System.IComparable)"/> methods
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ILabelFormatter.Init(Abt.Controls.SciChart.IAxis)">
            <summary>
            Called when the label formatted is initialized as it is attached to the parent axis, with the parent axis instance
            </summary>
            <param name="parentAxis">The parent <see cref="T:Abt.Controls.SciChart.IAxis"/> instance</param>
        </member>
        <member name="M:Abt.Controls.SciChart.ILabelFormatter.OnBeginAxisDraw">
            <summary>
            Called at the start of an axis render pass, before any labels are formatted for the current draw operation
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ILabelFormatter.FormatLabel(System.IComparable)">
            <summary>
            Formats a label for the axis from the specified data-value passed in 
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>The formatted label string</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.ILabelFormatter.FormatCursorLabel(System.IComparable)">
            <summary>
            Formats a label for the cursor, from the specified data-value passed in 
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>The formatted cursor label string</returns>
        </member>
        <member name="T:Abt.Controls.SciChart.DefaultLabelFormatter">
            <summary>
            The DefaultLabelFormatter is a pass-through which uses the <see cref="P:Abt.Controls.SciChart.AxisBase.TextFormatting"/> and <see cref="P:Abt.Controls.SciChart.AxisBase.CursorTextFormatting"/> properties
            to format axis and cursor label texts
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DefaultLabelFormatter.Init(Abt.Controls.SciChart.IAxis)">
            <summary>
            Called when the label formatted is initialized, with the parent axis instance
            </summary>
            <param name="parentAxis">The parent <see cref="T:Abt.Controls.SciChart.IAxis"/> instance</param>
        </member>
        <member name="M:Abt.Controls.SciChart.DefaultLabelFormatter.OnBeginAxisDraw">
            <summary>
            Called at the start of an axis render pass, before any labels are formatted for the current draw operation
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DefaultLabelFormatter.FormatCursorLabel(System.IComparable)">
            <summary>
            Formats a label for the cursor, from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted cursor label string
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DefaultLabelFormatter.FormatLabel(System.IComparable)">
            <summary>
            Formats a label for the axis from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted label string
            </returns>
        </member>
        <member name="T:Abt.Controls.SciChart.DateTimeLabelFormatter">
            <summary>
            The DateTimeLabelFormatter is a pass-through which uses the <see cref="P:Abt.Controls.SciChart.AxisBase.TextFormatting"/> and <see cref="P:Abt.Controls.SciChart.AxisBase.CursorTextFormatting"/> properties
            to format axis and cursor label texts. It also uses the <see cref="P:Abt.Controls.SciChart.DateTimeAxis.SubDayTextFormatting"/> property to alter text-formatting when the date-range 
            switches to intra-day
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeLabelFormatter.Init(Abt.Controls.SciChart.IAxis)">
            <summary>
            Called when the label formatted is initialized, with the parent axis instance
            </summary>
            <param name="parentAxis">The parent <see cref="T:Abt.Controls.SciChart.IAxis"/> instance</param>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeLabelFormatter.OnBeginAxisDraw">
            <summary>
            Called at the start of an axis render pass, before any labels are formatted for the current draw operation
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeLabelFormatter.FormatCursorLabel(System.IComparable)">
            <summary>
            Formats a label for the cursor, from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted cursor label string
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeLabelFormatter.FormatLabel(System.IComparable)">
            <summary>
            Formats a label for the axis from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted label string
            </returns>
            <exception cref="T:System.InvalidOperationException">The DateTimeLabelFormatter is only valid on instances of DateTimeAxis</exception>
        </member>
        <member name="T:Abt.Controls.SciChart.TradeChartAxisLabelFormatter">
            <summary>
            A LabelFormatter instance to use on stock charts. Designed to be used with the <see cref="T:Abt.Controls.SciChart.CategoryDateTimeAxis"/> and applied by default on the <see cref="T:Abt.Controls.SciChart.SciStockChart"/> control
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.TradeChartAxisLabelFormatter.Init(Abt.Controls.SciChart.IAxis)">
            <summary>
            Called when the label formatted is initialized, with the parent axis instance
            </summary>
            <param name="parentAxis">The parent <see cref="T:Abt.Controls.SciChart.IAxis"/> instance</param>
            <exception cref="T:System.InvalidOperationException">The TradeChartAxisLabelFormatter is only valid on instances of CategoryDateTimeAxis</exception>
        </member>
        <member name="M:Abt.Controls.SciChart.TradeChartAxisLabelFormatter.OnBeginAxisDraw">
            <summary>
            Called at the start of an axis render pass, before any labels are formatted for the current draw operation
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.TradeChartAxisLabelFormatter.FormatCursorLabel(System.IComparable)">
            <summary>
            Formats a label for the cursor, from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted cursor label string
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.TradeChartAxisLabelFormatter.FormatLabel(System.IComparable)">
            <summary>
            Formats a label for the axis from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted label string
            </returns>
        </member>
        <member name="T:Abt.Controls.SciChart.TickLabel">
            <summary>
            Provides 
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.TickLabel.TextProperty">
            <summary>
            Defines the Text DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.TickLabel.TextAlignmentProperty">
            <summary>
            Defines the TextAlignment DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.TickLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.TickLabel"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.TickLabel.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>. In simplest terms, this means the method is called just before a UI element displays in an application. For more information, see Remarks.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.TickLabel.Text">
            <summary>
            Gets or sets the text of the tick label
            </summary>
            <value>The text.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.TickLabel.TextAlignment">
            <summary>
            Gets or sets the text alignment of the tick label
            </summary>
            <value>The text alignment.</value>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.DateTimeAxis">
            <summary>
            Provides a Linear DateTime Axis, capable of rendering DateTime ticks
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DateTimeAxis.MajorDeltaTimeSpanProperty">
            <summary>
            Defines the MajorDeltaTimeSpan DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DateTimeAxis.MinorDeltaTimeSpanProperty">
            <summary>
            Defines the MinorDeltaTimeSpan DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.DateTimeAxis.SubDayTextFormattingProperty">
            <summary>
            Defines the SubDayTextFormatting DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.DateTimeAxis"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeAxis.CalculateYRange(Abt.Controls.SciChart.RenderPassInfo)">
            <summary>
            Calculates the zoom-to-fit Y-Range of the axis, accounting for the data that
            is in the viewport and applying any GrowBy margin        
            </summary>
            <param name="renderPassInfo">Struct containing data for the current render pass</param>
            <returns>
            The VisibleRange of the axis
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeAxis.GetMaximumRange">
            <summary>
            Gets the Maximum Range of the axis, which is equal to the DataRange including any GrowBy factor applied
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeAxis.AssertDataType(System.Type)">
            <summary>
            Asserts the type passed in is supported by the current axis implementation
            </summary>
            <param name="dataType"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeAxis.FormatText(System.IComparable,System.String)">
            <summary>
            String formats the text, using the <see cref="P:Abt.Controls.SciChart.AxisBase.TextFormatting"/> property as a formatting string
            </summary>
            <param name="value">The data value to format</param>
            /// <param name="format">A composite format string</param>
            <returns>The string formatted data value</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeAxis.FormatCursorText(System.IComparable,System.String)">
            <summary>
            String formats text for the cursor, using the <see cref="P:Abt.Controls.SciChart.AxisBase.CursorTextFormatting"/> property as a formatting string
            </summary>
            <param name="value">The data value to format</param>
            <param name="cursorFormat">A composite format string</param>
            <returns>The string formatted data value</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeAxis.CalculateDelta">
            <summary>
            Calcuates the delta's for use in this render pass
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeAxis.OnArrangeAxis">
            <summary>
            Called internally to arrange and measure the axis, before a render pass
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeAxis.MeasureAxisCanvas">
            <summary>
            Performs a fast measure of the axis, using tick size, single label size showing the maximum value formatted
            </summary>
            <returns>The size of the axis</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeAxis.MeasureLongestTickText">
            <summary>
            Measures the size required to draw the longest tick label on the axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeAxis.CalculateTicks">
            <summary>
            Overridden by derived types, called internal to calculate MinorTicks, MajorTicks before Axis drawing
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeAxis.AssertRangeType(Abt.Controls.SciChart.IRange)">
            <summary>
            Asserts the <see cref="T:Abt.Controls.SciChart.IRange"/> is of the correct type for this axis
            </summary>
            <param name="range">The range to assert</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeAxis.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeAxis.IsOfValidType(Abt.Controls.SciChart.IRange)">
            <summary>
            Checks whether <paramref name="range" /> is of valid type for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.DateTimeAxis.HitTest(System.Windows.Point)">
            <summary>
            Performs a hit test on the Axis, returning the Data Value at the specific x or y pixel coordinate. This operation is the opposite of <see cref="M:Abt.Controls.SciChart.AxisBase.GetCoordinate(System.IComparable)"/>
            </summary>
            <param name="atPoint">The pixel coordinate on this Axis corresponding to the input DataValue</param>
            <returns>An <see cref="T:Abt.Controls.SciChart.AxisInfo"/> struct containing the datavalue and formatted data value at this coordinate</returns>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DateTimeAxis.Abt#Controls#SciChart#IAxis#MinorDelta">
            <summary>
            Gets or sets the minor delta.
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DateTimeAxis.Abt#Controls#SciChart#IAxis#MajorDelta">
            <summary>
            Gets or sets the major delta.
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DateTimeAxis.DataRange">
            <summary>
            Gets the DataRange (full extents of the data) of the Axis
            </summary>
            <value>The data range.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DateTimeAxis.MajorDelta">
            <summary>
            Gets or sets the major delta.
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DateTimeAxis.MinorDelta">
            <summary>
            Gets or sets the minor delta.
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.DateTimeAxis.SubDayTextFormatting">
            <summary>
            Gets or sets the Text Formatting String used for Axis Tick Labels when the range of the axis is sub-day
            </summary>
            <value>The text formatting.</value>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.NumericAxis">
            <summary>
            Provides a Numeric Linear Axis, capable of rendering double, floating point, integer types
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.NumericAxis.ScientificNotationProperty">
            <summary>
            Defines the ScientificNotation DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.NumericAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.NumericAxis"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.NumericAxis.HitTest(System.Windows.Point)">
            <summary>
            Performs a hit test on the Axis, returning the Data Value at the specific x or y pixel coordinate. This operation is the opposite of <see cref="M:Abt.Controls.SciChart.AxisBase.GetCoordinate(System.IComparable)"/>
            </summary>
            <param name="atPoint">The pixel coordinate on this Axis corresponding to the input DataValue</param>
            <returns>An <see cref="T:Abt.Controls.SciChart.AxisInfo"/> struct containing the datavalue and formatted data value at this coordinate</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.NumericAxis.CalculateDelta">
            <summary>
            Calcuates the delta's for use in this render pass
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.NumericAxis.MeasureLongestTickText">
            <summary>
            Measures the size required to draw the longest tick label on the axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.NumericAxis.CalculateTicks">
            <summary>
            Overridden by derived types, called internal to calculate MinorTicks, MajorTicks before Axis drawing
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.NumericAxis.CalculateYRange(Abt.Controls.SciChart.RenderPassInfo)">
            <summary>
            Gets the aligned VisibleRange of the axis, with optional ZoomToFit flag.
            If ZoomToFit is true, it will return the DataRange plus any GrowBy applied to the axis
            </summary>
            <param name="renderPassInfo">Struct containing data for the current render pass</param>
            <returns>
            The VisibleRange of the axis
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.NumericAxis.GetMaximumRange">
            <summary>
            Gets the Maximum Range of the axis, which is equal to the DataRange including any GrowBy factor applied
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.NumericAxis.AssertDataType(System.Type)">
            <summary>
            Asserts the type passed in is supported by the current axis implementation
            </summary>
            <param name="dataType"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Abt.Controls.SciChart.NumericAxis.FormatText(System.IComparable,System.String)">
            <summary>
            Formats the value to tick label text for use on this axis. Uses the <see cref="P:Abt.Controls.SciChart.AxisBase.TextFormatting"/> property 
            </summary>
            <param name="value">The value to format.</param>
            /// <param name="format">A composite format string</param>
            <returns>The string formatted value</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.NumericAxis.FormatCursorText(System.IComparable,System.String)">
            <summary>
            String formats text for the cursor, using the <see cref="P:Abt.Controls.SciChart.AxisBase.CursorTextFormatting"/> property as a formatting string
            </summary>
            <param name="value">The data value to format</param>
            <param name="cursorFormat">A composite format string</param>
            <returns>The string formatted data value</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.NumericAxis.AssertRangeType(Abt.Controls.SciChart.IRange)">
            <summary>
            Asserts the <see cref="T:Abt.Controls.SciChart.IRange"/> is of the correct type for this axis
            </summary>
            <param name="range">The range to assert</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Abt.Controls.SciChart.NumericAxis.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.NumericAxis.IsOfValidType(Abt.Controls.SciChart.IRange)">
            <summary>
            Checks whether <paramref name="range" /> is of valid type for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="P:Abt.Controls.SciChart.NumericAxis.MajorDelta">
            <summary>
            Gets or sets the major delta.
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.NumericAxis.MinorDelta">
            <summary>
            Gets or sets the minor delta.
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.NumericAxis.DataRange">
            <summary>
            Gets the DataRange (full extents of the data) of the Axis
            </summary>
            <value>The data range.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.NumericAxis.ScientificNotation">
            <summary>
            Gets or sets used number format
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.GridLinesPanel">
            <summary>
            Provides two <see cref="T:System.Windows.Controls.Canvas"/> instances to draw horizontal and vertical gridlines behind the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IGridLinesPanel">
            <summary>
            Defines the interface to the <see cref="T:Abt.Controls.SciChart.GridLinesPanel"/>, a canvas control which displays grid lines behind the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IGridLinesPanel.Clear(Abt.Controls.SciChart.XyDirection)">
            <summary>
            Clears the grid lines in a specific direction
            </summary>
            <param name="xyDirection">The <see cref="T:Abt.Controls.SciChart.XyDirection"/> to clear in, e.g. <see cref="F:Abt.Controls.SciChart.XyDirection.XDirection"/> clears the X-Axis gridlines</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IGridLinesPanel.AddLine(Abt.Controls.SciChart.XyDirection,System.Windows.Shapes.Line)">
            <summary>
            Adds a line to the panel in the specific <see cref="T:Abt.Controls.SciChart.XyDirection"/>
            </summary>
            <param name="xyDirection">The <see cref="T:Abt.Controls.SciChart.XyDirection"/> to clear in, e.g. <see cref="F:Abt.Controls.SciChart.XyDirection.XDirection"/> adds an X-Axis gridline</param>
            <param name="line">The line to add</param>
        </member>
        <member name="M:Abt.Controls.SciChart.IGridLinesPanel.GenerateElement(System.Int32,Abt.Controls.SciChart.XyDirection,System.Windows.Style)">
            <summary>
            Generates and adds a <see cref="T:System.Windows.Shapes.Line"/> element to the <see cref="T:Abt.Controls.SciChart.GridLinesPanel"/>. Applies the direction and style to the line as 
            well as Id so they may be re-used (pooled)
            </summary>
            <param name="lineId">The line Id</param>
            <param name="xyDirection">The direction, X or Y</param>
            <param name="lineStyle">The style to apply to the line</param>
            <returns>The <see cref="T:System.Windows.Shapes.Line"/> instance, which has been added to the <see cref="T:Abt.Controls.SciChart.GridLinesPanel"/></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IGridLinesPanel.RemoveElementsAfter(Abt.Controls.SciChart.XyDirection,System.Int32)">
            <summary>
            Removes all <see cref="T:System.Windows.Shapes.Line"/> instances after the specified index. This method is used when re-drawing the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> 
            when the number of lines has reduced from one redraw to the next. 
            </summary>
            <param name="xyDirection">The direction to clear, X or Y</param>
            <param name="index">The index to remove after (inclusive)</param>
        </member>
        <member name="P:Abt.Controls.SciChart.IGridLinesPanel.Width">
            <summary>
            Gets the width of the panel in pixels
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IGridLinesPanel.Height">
            <summary>
            Gets the height of the panel in pixels
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IGridLinesPanel.BorderThickness">
            <summary>
            Gets the thickness of any border applied to the panel
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.GridLinesPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.GridLinesPanel"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.GridLinesPanel.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.GridLinesPanel.Clear(Abt.Controls.SciChart.XyDirection)">
            <summary>
            Clears the grid lines in a specific direction
            </summary>
            <param name="xyDirection">The <see cref="T:Abt.Controls.SciChart.XyDirection"/> to clear in, e.g. <see cref="F:Abt.Controls.SciChart.XyDirection.XDirection"/> clears the X-Axis gridlines</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.GridLinesPanel.AddLine(Abt.Controls.SciChart.XyDirection,System.Windows.Shapes.Line)">
            <summary>
            Adds a line to the panel in the specific <see cref="T:Abt.Controls.SciChart.XyDirection"/>
            </summary>
            <param name="xyDirection">The <see cref="T:Abt.Controls.SciChart.XyDirection"/> to clear in, e.g. <see cref="F:Abt.Controls.SciChart.XyDirection.XDirection"/> adds an X-Axis gridline</param>
            <param name="line">The line to add</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.GridLinesPanel.GenerateElement(System.Int32,Abt.Controls.SciChart.XyDirection,System.Windows.Style)">
            <summary>
            Generates and adds a <see cref="T:System.Windows.Shapes.Line"/> element to the <see cref="T:Abt.Controls.SciChart.GridLinesPanel"/>. Applies the direction and style to the line as 
            well as Id so they may be re-used (pooled)
            </summary>
            <param name="lineId">The line Id</param>
            <param name="xyDirection">The direction, X or Y</param>
            <param name="lineStyle">The style to apply to the line</param>
            <returns>The <see cref="T:System.Windows.Shapes.Line"/> instance, which has been added to the <see cref="T:Abt.Controls.SciChart.GridLinesPanel"/></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.GridLinesPanel.RemoveElementsAfter(Abt.Controls.SciChart.XyDirection,System.Int32)">
            <summary>
            Removes all <see cref="T:System.Windows.Shapes.Line"/> instances after the specified index. This method is used when re-drawing the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> 
            when the number of lines has reduced from one redraw to the next. 
            </summary>
            <param name="xyDirection">The direction to clear, X or Y</param>
            <param name="index">The index to remove after (inclusive)</param>
        </member>
        <member name="P:Abt.Controls.SciChart.GridLinesPanel.EventAggregator">
            <summary>
            Sets the event aggregator instance used throughout SciChart
            </summary>
            <value>The event aggregator instance.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.GridLinesPanel.Abt#Controls#SciChart#IGridLinesPanel#Width">
            <summary>
            Gets the width of the panel in pixels
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.GridLinesPanel.Abt#Controls#SciChart#IGridLinesPanel#Height">
            <summary>
            Gets the height of the panel in pixels
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.XyDirection">
            <summary>
            Defines constants for X or Y direction, used by <see cref="T:Abt.Controls.SciChart.GridLinesPanel"/> to specify creation of X or Y grid line
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.XyDirection.XDirection">
            <summary>
            Refers to the X-Axis Direction
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.XyDirection.YDirection">
            <summary>
            Refers to the Y-Axis Direction
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.XyDirection.XYDirection">
            <summary>
            Refers to both X and Y Axis Direction
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ActionType">
            <summary>
            Defines constants for Pan or Zoom actions, used by <see cref="T:Abt.Controls.SciChart.MouseWheelZoomModifier"/> to specify required action 
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ActionType.Pan">
            <summary>
            Refers to pan action
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ActionType.Zoom">
            <summary>
            Refers to zoom action
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ScientificNotation">
            <summary>
            Defines constants for scientific or engineering notation on <see cref="T:Abt.Controls.SciChart.NumericAxis"/>. For instance, 
            using None gives default tick labels, whereas using Normalized gives a scientific notation with superscript
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ScientificNotation.None">
            <summary>
            Default tick labelling, e.g. 10000
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ScientificNotation.Normalized">
            <summary>
            Normalized (Scientific) tick labelling, e.g. 1x10^4 with superscript
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ScientificNotation.E">
            <summary>
            Engineering tick labelling, e.g. 1E+4 without superscript
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ClipMode">
            <summary>
            Defines constants for behavior of the ZoomPanModifier. 
             - ClipMode.None means you can pan right off the edge of the data into uncharted space. 
             - ClipMode.StretchAtExtents causes a zooming (stretch) action when you reach the edge of the data. 
             - ClipAtExtents forces the panning operation to stop suddenly at the extents of the data
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ClipMode.None">
            <summary>
            ClipMode.None means you can pan right off the edge of the data into uncharted space. 
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ClipMode.StretchAtExtents">
            <summary>
            ClipMode.StretchAtExtents causes a zooming (stretch) action when you reach the edge of the data. 
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ClipMode.ClipAtMin">
            <summary>
            ClipAtMin forces the panning operation to stop suddenly at the minimum of the data, but expand at the maximum
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ClipMode.ClipAtExtents">
            <summary>
            ClipAtExtents forces the panning operation to stop suddenly at the extents of the data
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AxisDragModes">
            <summary>
            Defines Enumeration Constants for modes of operation of the <see cref="T:Abt.Controls.SciChart.YAxisDragModifier"/>
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisDragModes.AbsoluteScale">
            <summary>
            Abosolute Scale mode: the dragging scales the YAxis VisibleRange property directly. This may only be used when YAxis.AutoRange=false
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisDragModes.RelativeScale">
            <summary>
            Relative mode: the dragging scales the YAxis VisibleRange indirectly, via the GrowBy property. This may be used when YAxis.AutoRange=true
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.AxisDragModes.Pan">
            <summary>
            Pan mode: the dragging pans the YAxis VisibleRange, allowing a vertical scroll. This may only be used with YAxis.AutoRange=false
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IChartModifierSurface">
            <summary>
            Defines the base interface to the Canvas that <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instances interact with
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IChartModifierSurface.Clear">
            <summary>
            Clears all children off the <see cref="T:Abt.Controls.SciChart.IChartModifierSurface"/> 
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IChartModifierSurface.CaptureMouse">
            <summary>
            Captures the mouse on the <see cref="T:Abt.Controls.SciChart.IChartModifierSurface"/> canvas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IChartModifierSurface.ReleaseMouseCapture">
            <summary>
            Releases the mouse capture on the <see cref="T:Abt.Controls.SciChart.IChartModifierSurface"/> canvas
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IChartModifierSurface.ClipToBounds">
            <summary>
            Gets or sets whether UIElements added to the ModifierSurface should clip to bounds or not
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IChartModifierSurface.Children">
            <summary>
            Gets the collection of UIElement children drawn on the canvas
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IChartModifierSurface.Width">
            <summary>
            Gets the rendered width of the <see cref="T:Abt.Controls.SciChart.IChartModifierSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IChartModifierSurface.Height">
            <summary>
            Gets the rendered height of the <see cref="T:Abt.Controls.SciChart.IChartModifierSurface"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.ChartModifierSurface">
            <summary>
            Defines the ChartModifierSurface, which acts as an overlay <see cref="T:System.Windows.Controls.Canvas"/> on top of the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> for drawing annotations, 
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.ChartModifierSurface.ClipToBoundsProperty">
            <summary>
            Defines the ClipToBounds DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ChartModifierSurface"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierSurface.Clear">
            <summary>
            Clears all children off the <see cref="T:Abt.Controls.SciChart.IChartModifierSurface"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierSurface.TranslatePoint(System.Windows.Point,Abt.Controls.SciChart.IHitTestable)">
            <summary>
            Translates the point relative to the other <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="point">The input point relative to this <see cref="T:Abt.Controls.SciChart.IHitTestable"/></param>
            <param name="relativeTo">The other <see cref="T:Abt.Controls.SciChart.IHitTestable"/> to use when transforming the point</param>
            <returns>The transformed Point</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierSurface.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="point">The point to test</param>
            <returns>true if the Point is within the bounds</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ChartModifierSurface.GetBoundsRelativeTo(Abt.Controls.SciChart.IHitTestable)">
            <summary>
            Gets the bounds of the current <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element relative to another <see cref="T:Abt.Controls.SciChart.IHitTestable"/> element
            </summary>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartModifierSurface.ClipToBounds">
            <summary>
            Gets or sets whether UIElements added to the ModifierSurface should clip to bounds or not
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartModifierSurface.Abt#Controls#SciChart#IChartModifierSurface#Width">
            <summary>
            Gets the rendered width of the <see cref="T:Abt.Controls.SciChart.IChartModifierSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartModifierSurface.Abt#Controls#SciChart#IChartModifierSurface#Height">
            <summary>
            Gets the rendered height of the <see cref="T:Abt.Controls.SciChart.IChartModifierSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ChartModifierSurface.Children">
            <summary>
            Gets the collection of UIElement children drawn on the canvas over the top of the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.RangeSelectionChangedEventArgs">
            <summary>
            Event arguments for the Range slider RangeSelectionChanged event
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.RangeSelectionChangedEventArgs.#ctor(System.IComparable,System.IComparable)">
            <summary>
            sets the range start and range stop for the event args
            </summary>
            <param name="newRangeStart">The new range start set</param>
            <param name="newRangeStop">The new range stop set</param>
        </member>
        <member name="M:Abt.Controls.SciChart.RangeSelectionChangedEventArgs.#ctor(Abt.Controls.SciChart.IRange)">
            <summary>
            sets the range start and range stop for the event args
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RangeSelectionChangedEventArgs.SelectedRange">
            <summary>
            sets the range for the event args
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.VisibleRangeChangedEventArgs">
            <summary>
            Event Args used by the <see cref="E:Abt.Controls.SciChart.AxisBase.VisibleRangeChanged"/> event
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.VisibleRangeChangedEventArgs.#ctor(Abt.Controls.SciChart.IRange,Abt.Controls.SciChart.IRange)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.VisibleRangeChangedEventArgs"/> class.
            </summary>
            <param name="oldRange">The old range.</param>
            <param name="newRange">The new range.</param>
        </member>
        <member name="P:Abt.Controls.SciChart.VisibleRangeChangedEventArgs.OldVisibleRange">
            <summary>
            Gets the old <see cref="P:Abt.Controls.SciChart.IAxis.VisibleRange"/> before the operation
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.VisibleRangeChangedEventArgs.NewVisibleRange">
            <summary>
            Gets the new <see cref="P:Abt.Controls.SciChart.IAxis.VisibleRange"/> before the operation
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IRenderSurface">
            <summary>
            Defines the interface to a <see cref="T:Abt.Controls.SciChart.RenderSurface"/>, which is the high-performance viewport for SciChart
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IRenderSurface.Clear">
            <summary>
            Clears the viewport
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IRenderSurface.GetBitmapContext">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Imaging.BitmapContext"/> struct to begin drawing
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IRenderSurface.Invalidate">
            <summary>
            Causes the <see cref="T:Abt.Controls.SciChart.RenderSurface"/> to invalidate and push updates to the WPF or Silverlight Rendering pipeline
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IRenderSurface.RecreateWriteableBitmap">
            <summary>
            Recreates the WriteableBitmap used by the Viewport
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IRenderSurface.ContainsSeries(Abt.Controls.SciChart.IRenderableSeries)">
            <summary>
            Returns True if the <see cref="T:Abt.Controls.SciChart.IRenderSurface"/> contains the <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> instance
            </summary>
            <param name="renderableSeries">the <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> instance</param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IRenderSurface.AddSeries(Abt.Controls.SciChart.IRenderableSeries)">
            <summary>
            Adds the <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> instance to the <see cref="T:Abt.Controls.SciChart.IRenderSurface"/>
            </summary>
            <param name="renderableSeries"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.IRenderSurface.RemoveSeries(Abt.Controls.SciChart.IRenderableSeries)">
            <summary>
            Removes the <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> from the <see cref="T:Abt.Controls.SciChart.IRenderSurface"/>
            </summary>
            <param name="renderableSeries"></param>
        </member>
        <member name="M:Abt.Controls.SciChart.IRenderSurface.ClearSeries">
            <summary>
            Clears all <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> on the <see cref="T:Abt.Controls.SciChart.IRenderSurface"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IRenderSurface.GetRenderContext">
            <summary>
            Creates an <see cref="T:Abt.Controls.SciChart.Services.IRenderContext2D"/> instance to perform drawing operations. Note this is only valid for the current render pass
            </summary>
            <returns></returns>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderSurface.Services">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.IServiceContainer"/> instance 
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderSurface.ActualWidth">
            <summary>
            Gets the Actual Width of the <see cref="T:Abt.Controls.SciChart.RenderSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderSurface.ActualHeight">
            <summary>
            Sets the Actual Width of the <see cref="T:Abt.Controls.SciChart.RenderSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderSurface.NeedsResizing">
            <summary>
            Returns True if the <see cref="T:Abt.Controls.SciChart.RenderSurface"/> size has changed and the viewport needs resizing
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderSurface.IsSizeValidForDrawing">
            <summary>
            Returns true if the <see cref="T:Abt.Controls.SciChart.RenderSurface"/> size is valid for drawing
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IMainGrid">
            <summary>
            Defines the interface to the Maingrid, a root grid which hosts the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.MainGrid">
            <summary>
            Defines the Maingrid, a root grid which hosts the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.MainGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.MainGrid"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.MainGrid.TranslatePoint(System.Windows.Point,Abt.Controls.SciChart.IHitTestable)">
            <summary>
            Translates the point relative to the other hittestable element
            </summary>
            <param name="point">The point.</param>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.MainGrid.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current HitTestable element
            </summary>
            <param name="point">The point to test</param>
            <returns>true if the Point is within the bounds</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.MainGrid.GetBoundsRelativeTo(Abt.Controls.SciChart.IHitTestable)">
            <summary>
            Gets the bounds of the current HitTestable element relative to another HitTestable element
            </summary>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="E:Abt.Controls.SciChart.MainGrid.MouseMiddleButtonDown">
            <summary>
            Occurs when the middle mouse button is pressed while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart.MainGrid.MouseMiddleButtonUp">
            <summary>
            Occurs when the middle mouse button is released while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>. However, this event will only be raised if a caller marks the preceding <see cref="E:System.Windows.UIElement.MouseRightButtonDown"/> event as handled; see Remarks.
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.RenderSurface">
            <summary>
            Provides a high-performance viewport for <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> instances to be drawn
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RenderSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.RenderSurface"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RenderSurface.Invalidate">
            <summary>
            Causes the <see cref="T:Abt.Controls.SciChart.RenderSurface"/> to invalidate and push updates to the WPF or Silverlight Rendering pipeline
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RenderSurface.RecreateWriteableBitmap">
            <summary>
            Recreates the WriteableBitmap used by the Viewport
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RenderSurface.Clear">
            <summary>
            Clears the viewport
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RenderSurface.ContainsSeries(Abt.Controls.SciChart.IRenderableSeries)">
            <summary>
            Returns True if the <see cref="T:Abt.Controls.SciChart.IRenderSurface"/> contains the <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> instance
            </summary>
            <param name="renderableSeries">the <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> instance</param>
            <returns><c>true</c> if the specified renderable series contains series; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RenderSurface.AddSeries(Abt.Controls.SciChart.IRenderableSeries)">
            <summary>
            Adds the <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> instance to the <see cref="T:Abt.Controls.SciChart.IRenderSurface"/>
            </summary>
            <param name="renderableSeries">The renderable series.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RenderSurface.RemoveSeries(Abt.Controls.SciChart.IRenderableSeries)">
            <summary>
            Removes the <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> from the <see cref="T:Abt.Controls.SciChart.IRenderSurface"/>
            </summary>
            <param name="renderableSeries">The renderable series.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RenderSurface.ClearSeries">
            <summary>
            Clears all <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> on the <see cref="T:Abt.Controls.SciChart.IRenderSurface"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.RenderSurface.GetRenderContext">
            <summary>
            Creates an <see cref="T:Abt.Controls.SciChart.Services.IRenderContext2D"/> instance to perform drawing operations. Note this is only valid for the current render pass
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.RenderSurface.GetBitmapContext">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Imaging.BitmapContext"/> struct to begin drawing
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.RenderSurface.Services">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.IServiceContainer"/> instance
            </summary>
            <value>The services.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.RenderSurface.NeedsResizing">
            <summary>
            Returns True if the <see cref="T:Abt.Controls.SciChart.RenderSurface"/> size has changed and the viewport needs resizing
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.RenderSurface.IsSizeValidForDrawing">
            <summary>
            Returns true if the <see cref="T:Abt.Controls.SciChart.RenderSurface"/> size is valid for drawing
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.ISciChartSurface">
            <summary>
            Defines the interface to the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>, which contains a single <see cref="T:Abt.Controls.SciChart.IRenderSurface"/> viewport 
            for rendering multiple <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/>, X and Y <see cref="T:Abt.Controls.SciChart.IAxis"/> instances, and a <see cref="T:Abt.Controls.SciChart.IDataSeriesSet"/> data source
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ISciChartSurface.ClearSeries">
            <summary>
            Removes all DataSeries from the SciChart
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ISciChartSurface.ZoomExtents">
            <summary>
            Zooms the chart to the extents of the data, plus any X or Y Grow By fraction set on the X and Y Axes
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ISciChartSurface.SetMouseCursor(System.Windows.Input.Cursor)">
            <summary>
            Sets a Cursor on the SciChartSurface
            </summary>
            <param name="cursor">The new Cursor</param>
        </member>
        <member name="M:Abt.Controls.SciChart.ISciChartSurface.ZoomExtentsY">
            <summary>
            Zooms the chart to the extents of the data in the Y-Direction, accounting for the current data in view in the X-direction
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ISciChartSurface.OnArrangeSciChart">
            <summary>
            Preparations for a render pass, called internally, returns the viewport size
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.ISciChartSurface.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current HitTestable element
            </summary>
            <param name="point">The point to test</param>
            <returns>true if the Point is within the bounds</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ISciChartSurface.GetBoundsRelativeTo(Abt.Controls.SciChart.IHitTestable)">
            <summary>
            Gets the bounds of the current HitTestable element relative to another HitTestable element
            </summary>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ISciChartSurface.TranslatePoint(System.Windows.Point,Abt.Controls.SciChart.IHitTestable)">
            <summary>
            Translates the point relative to the other hittestable element
            </summary>
            <param name="point">The point.</param>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.ISciChartSurface.AnimateZoomExtents(System.TimeSpan)">
            <summary>
            Zooms to extents with the specified animation duration
            </summary>
            <param name="duration">The duration of animation when zooming to extents</param>
        </member>
        <member name="M:Abt.Controls.SciChart.ISciChartSurface.GetWindowedYRange(Abt.Controls.SciChart.IAxis,Abt.Controls.SciChart.IRange)">
            <summary>
            Equivalent of calling YAxis.GetMaximumRange() however returns the max range only for that axis (by the data-series on it)
            </summary>
            <param name="yAxis"></param>
            <param name="xRange"></param>
            <returns></returns>
        </member>
        <member name="E:Abt.Controls.SciChart.ISciChartSurface.Rendered">
            <summary>
            Event raised at the end of a single render pass
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.DataSet">
            <summary>
            Gets or sets the DataSeries that this SciChartSurface binds to
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.ChartModifier">
            <summary>
            Gets or sets the current ChartModifier, which alters the behaviour of the chart
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.ModifierSurface">
            <summary>
            Gets the ModifierSurface, which is used to draw primitives for the Chart ModifiersC:\Andrew Sandbox\SciChart\trunk\src\SciChart\Abt.Controls.SciChart\Properties\AssemblyInfo.cs
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.Annotations">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.AnnotationCollection"/> which provides renderable annotations over the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.XAxis">
            <summary>
            Gets or sets the XAxis control on the SciChartSurface
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.YAxis">
            <summary>
            Gets or sets the primary YAxis control on the SciChartSurface (default side=Right)
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.YAxes">
            <summary>
            Gets the collection of Y-Axis <see cref="T:Abt.Controls.SciChart.IAxis"/> that this SciChartSurface measures against
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.GridLinesPanel">
            <summary>
            Gets the GridLinesPanel where gridlines are drawn
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.RenderableSeries">
            <summary>
            Gets the collection of RenderableSeries that this SciChartSurface draws.        
            </summary>
            <remarks>The IndexOf RenderableSeries maps 1:1 to index of DataSeries in the dataset. 
            If a RenderableSeries.IsEnabled=false, then this series is skipped when evaluating the series to draw</remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.SelectedRenderableSeries">
            <summary>
            Gets the collection of RenderableSeries that are selected.
            </summary>
            <value>The renderable series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.Services">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.ServiceContainer"/> which provides access to services throughout SciChart. 
            ServiceContainers are created one per <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Abt.Controls.SciChart.AxisBase"/>, <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.RootGrid">
            <summary>
            Gets the Root Grid that hosts the SciChart RenderSurface, GridLinesPanel, X-Axis and Y-Axes (Left and right)
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.ViewportManager">
            <summary>
            Gets or sets the current ViewportManager, which alters the behaviour of the viewport (X,Y range) when the chart is rendered
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.AnnotationOverlaySurface">
            <summary>
            Gets the Annotation Canvas over the chart
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.AnnotationUnderlaySurface">
            <summary>
            Gets the Annotation Canvas under the chart
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.AdornerLayerCanvas">
            <summary>
            Gets the Adorner Layer over the chart
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.LicenseDaysRemaining">
            <summary>
            Gets the number of license days remaining
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.SeriesSource">
            <summary>
            The SeriesSource property allows data-binding to a collection of <see cref="T:Abt.Controls.SciChart.IChartSeriesViewModel"/> instances, 
            for pairing of <see cref="T:Abt.Controls.SciChart.DataSeries`2"/> with <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.ISciChartSurface.RenderSurface">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.IRenderSurface"/> which this <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> draws on
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.SciChartLegend">
            <summary>
            Provides a Legend control to display series color and name
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartLegend.LegendDataProperty">
            <summary>
            Defines the LegendData Dependency property
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartLegend.ShowVisibilityCheckboxesProperty">
            <summary>
            Defines the ShowVisibilityCheckboxes DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartLegend.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.SciChartLegend"/> class.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartLegend.LegendData">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.ChartDataObject"/> which provides SeriesInfo property
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartLegend.ShowVisibilityCheckboxes">
            <summary>
            Gets or sets whether a column of checkboxes bound to the Visibility of series is shown
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.SciChartOverview">
            <summary>
            A slider that provides the a range
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartOverview.NonSelectedRangeColorProperty">
            <summary>
            Provides the NonSelectedRangeColor for non selected range
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartOverview.SeriesColorProperty">
            <summary>
            Provides the SeriesColor for IRenderableSeries
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartOverview.AreaColorProperty">
            <summary>
            Provides the AreaColor for FastMountainRenderableSeries
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartOverview.DataSeriesIndexProperty">
            <summary>
            Provides the DataSeriesIndex for IRenderableSeries
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartOverview.ParentSurfaceProperty">
            <summary>
            Provides the ParentSurface which this overview control is associated with
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartOverview.SelectedRangeProperty">
            <summary>
            Selected range of the range slider
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartOverview.SelectedRangePointProperty">
            <summary>
            Defines the SelectedRangePoint DependencyProperty, used internally for animations
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartOverview.RangeStartSelectedProperty">
            <summary>
            The min value of the selected range of the range slider
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartOverview.RangeStopSelectedProperty">
            <summary>
            The max value of the selected range of the range slider
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartOverview.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartOverview.OnRangeSelectionChanged(Abt.Controls.SciChart.RangeSelectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Abt.Controls.SciChart.SciChartOverview.RangeSelectionChanged"/> event
            </summary>
            <param name="e">The <see cref="T:Abt.Controls.SciChart.RangeSelectionChangedEventArgs"/> containing the event data</param>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartOverview.OnApplyTemplate">
            <summary>
            Overide to get the visuals from the control template
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartOverview.InvalidateElement">
            <summary>
            Asynchronously requests that the element redraws itself plus children.
            Will be ignored if the element is ISuspendable and currently IsSuspended (within a SuspendUpdates/ResumeUpdates call)
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartOverview.AnimateSelectedRangeTo(Abt.Controls.SciChart.IRange,System.TimeSpan)">
            <summary>
            Animates the SelectedRange property from its current start position to the destination over the specified duration. 
            Use this to get a smooth animated effect from one position to the next
            </summary>
            <param name="to"></param>
            <param name="duration"></param>
        </member>
        <member name="E:Abt.Controls.SciChart.SciChartOverview.RangeSelectionChanged">
            <summary>
            Event raised whenever the selected range is changed
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartOverview.NonSelectedRangeColor">
            <summary>
            Gets or sets the color of the non selected range.
            </summary>
            <value>
            The color of the non selected range.
            </value>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartOverview.SeriesColor">
            <summary>
            Gets or sets the SeriesColor.
            </summary>
            <value>The color of the series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartOverview.AreaColor">
            <summary>
            Gets or sets the Area Color for the <see cref="T:Abt.Controls.SciChart.FastMountainRenderableSeries"/>. The mountain chart outline is specified by <see cref="P:Abt.Controls.SciChart.BaseRenderableSeries.SeriesColor"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartOverview.DataSeriesIndex">
            <summary>
            Gets or sets the DataSeriesIndex used to draw the background chart
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartOverview.SelectedRange">
            <summary>
            Selected range of the range slider
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartOverview.ParentSurface">
            <summary>
            Gets or sets the ParentSurface which this overview control is bound to
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartOverview.RangeStopSelected">
            <summary>
            The max value of the selected range of the range slider
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartOverview.RangeStartSelected">
            <summary>
            The min value of the selected range of the range slider
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.AxisInfo">
            <summary>
            Provides information on an axis hit test operation, see <see cref="M:Abt.Controls.SciChart.AxisBase.HitTest(System.Windows.Point)"/> for more information
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisInfo.AxisTitle">
            <summary>
            Gets or sets the current Axis Title
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisInfo.AxisAlignment">
            <summary>
            Gets or sets the current Axis alignment
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisInfo.DataValue">
            <summary>
            Gets or sets the DataValue at the axis hit test point
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisInfo.AxisFormattedDataValue">
            <summary>
            Gets or sets a Formatted data value using the Axis.FormatText method
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisInfo.AxisOrientation">
            <summary>
            Gets or sets the current orientation, X, or Y
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.AxisInfo.CursorFormattedDataValue">
            <summary>
            Gets or sets a Cursor Formatted data value, using the Axis.FormatText method
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.BaseRenderableSeries">
            <summary>
            Defines the Base class for all RenderableSeries within SciChart
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IRenderableSeries">
            <summary>
            Defines the interface to all RenderableSeries within SciChart
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IDrawable">
            <summary>
            Defines the base interface for an object that can be drawn
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IDrawable.OnDraw(Abt.Controls.SciChart.Services.IRenderContext2D,Abt.Controls.SciChart.IRenderPassData)">
            <summary>
            Called when the instance is drawn
            </summary>
            <param name="renderContext">The <see cref="T:Abt.Controls.SciChart.Services.IRenderContext2D"/> used for drawing</param>
            <param name="renderPassData">Contains arguments and parameters for this render pass</param>
        </member>
        <member name="P:Abt.Controls.SciChart.IDrawable.Width">
            <summary>
            Gets or sets the width of the <see cref="T:Abt.Controls.SciChart.IDrawable"/> in pixels
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IDrawable.Height">
            <summary>
            Gets or sets the height of the <see cref="T:Abt.Controls.SciChart.IDrawable"/> in pixels
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IRenderableSeries.HitTest(System.Windows.Point,System.Boolean)">
            <summary>
            Performs a hit-test at the specific mouse point (X,Y coordinate on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>),
            returning a <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </summary>
            <param name="rawPoint">The mouse point on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/></param>
            <param name="interpolate">If true, use interpolation to perform a hit-test between data-points, or on the area if a <see cref="T:Abt.Controls.SciChart.FastMountainRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.FastColumnRenderableSeries"/> or <see cref="T:Abt.Controls.SciChart.FastCandlestickRenderableSeries"/></param>
            <returns>
            A <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </returns>
        </member>
        <member name="E:Abt.Controls.SciChart.IRenderableSeries.SelectionChanged">
            <summary>
            Event raised whenever IsSelected property changed
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderableSeries.Services">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.ServiceContainer"/> which provides access to services throughout SciChart. 
            ServiceContainers are created one per <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Abt.Controls.SciChart.AxisBase"/>, <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderableSeries.IsVisible">
            <summary>
            Gets or sets whether the series is visible when drawn
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderableSeries.AntiAliasing">
            <summary>
            Gets or sets whether this series uses AntiAliasing when drawn
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderableSeries.ResamplingMode">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.Numerics.ResamplingMode"/> used when drawing this series
            </summary>
            <remarks>
            <list type="bullet">
                <item>
                    None: Do not use resampling when redrawing a series
                </item>
                    MinMax: Resample by taking the min-max of oversampled data. This results in the most visually accurate resampling, with the most performant rendering
                <item>
                    Mid: Resample by taking the median point of oversampled data
                </item>
                <item>
                    Max: Resample by taking the maximum point of oversampled data
                </item>
                <item>
                    Min: Resample by taking the minimum point of oversampled data
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderableSeries.DataSeries">
            <summary>
            Gets or sets the DataSeries associated with this series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderableSeries.XAxis">
            <summary>
            Gets or sets the XAxis that this <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> is associated with
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderableSeries.SeriesColor">
            <summary>
            Gets or sets the SeriesColor. 
            </summary>
            <remarks>This is used by each series type in different ways. For instance:
            <list type="bullet">
                <item>
                    <see cref="T:Abt.Controls.SciChart.FastLineRenderableSeries"/> and <see cref="T:Abt.Controls.SciChart.FastImpulseRenderableSeries"/> uses the SeriesColor to draw the line series
                </item>
                <item>
                    <see cref="T:Abt.Controls.SciChart.FastMountainRenderableSeries"/> uses the SeriesColor to draw the line over the filled area
                </item>
                <item>
                    <see cref="T:Abt.Controls.SciChart.FastBandRenderableSeries"/> uses the SeriesColor to draw the first line of the pair
                </item>
                <item>
                    <see cref="T:Abt.Controls.SciChart.FastColumnRenderableSeries"/> uses this property to draw the outline of the columns
                </item>
                <item>
                    <see cref="T:Abt.Controls.SciChart.FastCandlestickRenderableSeries"/> and <see cref="T:Abt.Controls.SciChart.XyScatterRenderableSeries"/> all ignore this property
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderableSeries.SelectedSeriesStyle">
            <summary>
            Gets or sets style for selected series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderableSeries.IsSelected">
            <summary>
            Gets or sets value, indicates whether this <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> is selected
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderableSeries.RolloverMarker">
            <summary>
            Gets a cached Framework Element which is used as a Rollover Marker. 
            This is generated from a ControlTemplate in xaml via the <see cref="F:Abt.Controls.SciChart.BaseRenderableSeries.RolloverMarkerTemplateProperty"/> DependencyProperty
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderableSeries.YAxisId">
            <summary>
            Gets or sets the ID of the Y-Axis which this renderable series is measured against
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderableSeries.CurrentRenderPassData">
            <summary>
            Gets or sets the RenderPassData instance used for this render pass
            </summary>
            <value>The render data.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderableSeries.DataSeriesIndex">
            <summary>
            Gets or sets the Index to the <see cref="T:Abt.Controls.SciChart.IDataSeriesSet"/> which this renderable series draws its data from
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderableSeries.PaletteProvider">
            <summary>
            Gets or Sets an optional <see cref="T:Abt.Controls.SciChart.IPaletteProvider"/> instance, which may be used to override specific data-point colors during rendering. 
            For more details, see the <see cref="T:Abt.Controls.SciChart.IPaletteProvider"/> documentation
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderableSeries.StrokeThickness">
            <summary>
            Gets or sets the StrokeThickness in pixels for this series 
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.BaseRenderableSeries.StrokeThicknessProperty">
            <summary>
            Defines the StrokeThickness DependencyProperty 
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.BaseRenderableSeries.IsSelectedProperty">
            <summary>
            Defines the IsSelected DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.BaseRenderableSeries.DataSeriesIndexProperty">
            <summary>
            Defines the DataSeriesIndex DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.BaseRenderableSeries.DataSeriesProperty">
            <summary>
            Defines the DataSeries DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.BaseRenderableSeries.IsVisibleProperty">
            <summary>
            Defines the IsVisible DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.BaseRenderableSeries.SeriesColorProperty">
            <summary>
            Defines the SeriesColor DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.BaseRenderableSeries.SelectedSeriesStyleProperty">
            <summary>
            Defines the SelectedSelectedSeriesStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.BaseRenderableSeries.ResamplingModeProperty">
            <summary>
            Defines the ResamplingMode DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.BaseRenderableSeries.AntiAliasingProperty">
            <summary>
            Defines the AntiAliasing DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.BaseRenderableSeries.PointMarkerTemplateProperty">
            <summary>
            Defines the PointMarkerTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.BaseRenderableSeries.RolloverMarkerTemplateProperty">
            <summary>
            Defines the RolloverMarkerTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.BaseRenderableSeries.YAxisIdProperty">
            <summary>
            Defines the AxisAlignment DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.BaseRenderableSeries.PaletteProviderProperty">
            <summary>
            Defines the PaletteProvider DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.BaseRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.BaseRenderableSeries.OnInvalidateParentSurface">
            <summary>
            Raises the <see cref="T:Abt.Controls.SciChart.InvalidateSciChartMessage"/> which causes the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> to invalidate
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.BaseRenderableSeries.OnSeriesColorChanged">
            <summary>
            Called when the <see cref="P:Abt.Controls.SciChart.BaseRenderableSeries.SeriesColor"/> dependency property changes. Allows derived types to do caching 
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.BaseRenderableSeries.AssertDataPointType``1(System.String)">
            <summary>
            Used internally by the renderer. Asserts that the input data-type is of the correct format for the current <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>
            </summary>
            <typeparam name="TSeriesPoint">The type of the series point.</typeparam>
            <param name="dataSeriesType">Type of the data series.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Abt.Controls.SciChart.BaseRenderableSeries.Abt#Controls#SciChart#IDrawable#OnDraw(Abt.Controls.SciChart.Services.IRenderContext2D,Abt.Controls.SciChart.IRenderPassData)">
            <summary>
            Called when the instance is drawn
            </summary>
            <param name="renderContext">The <see cref="T:Abt.Controls.SciChart.Services.IRenderContext2D"/> used for drawing</param>
            <param name="renderPassData">The current render pass data</param>
        </member>
        <member name="M:Abt.Controls.SciChart.BaseRenderableSeries.GetDatapointWidth(Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double},Abt.Controls.SciChart.IPointSeries,System.Double)">
            <summary>
            Gets the width of data-points, used to compute column and OHLC bar widths
            </summary>
            <param name="xCoordinateCalculator">The current x coordinate calculator.</param>
            <param name="pointSeries">The current <see cref="T:Abt.Controls.SciChart.IPointSeries"/> being rendered.</param>
            <param name="widthFraction">The width fraction from 0.0 to 1.0, where 0.0 is infinitey small, 0.5 takes up half the available width and 1.0 means a data-point is the full width between points</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">widthFraction should be between 0.0 and 1.0 inclusive;widthFraction</exception>
        </member>
        <member name="M:Abt.Controls.SciChart.BaseRenderableSeries.HitTest(System.Windows.Point,System.Boolean)">
            <summary>
            Performs a hit-test at the specific mouse point (X,Y coordinate on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>),
            returning a <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </summary>
            <param name="rawPoint">The mouse point on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/></param>
            <param name="interpolate">If true, use interpolation to perform a hit-test between data-points, or on the area if a <see cref="T:Abt.Controls.SciChart.FastMountainRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.FastColumnRenderableSeries"/> or <see cref="T:Abt.Controls.SciChart.FastCandlestickRenderableSeries"/></param>
            <returns>
            A <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.BaseRenderableSeries.OnResamplingModeChanged">
            <summary>
            Called when resampling mode changes
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.BaseRenderableSeries.InterpolatePoint(System.Windows.Point,Abt.Controls.SciChart.HitTestInfo)">
            <summary>
            Interpolation function called by <see cref="M:Abt.Controls.SciChart.BaseRenderableSeries.HitTest(System.Windows.Point,System.Boolean)"/> when the inpolate flag is true
            </summary>
            <param name="rawPoint">Mouse point</param>
            <param name="nearestHitResult">Non-interpolated <see cref="T:Abt.Controls.SciChart.HitTestInfo"/></param>
            <returns>Intepolated <see cref="T:Abt.Controls.SciChart.HitTestInfo"/></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.BaseRenderableSeries.NearestHitResult(System.Windows.Point)">
            <summary>
            Called by <see cref="M:Abt.Controls.SciChart.BaseRenderableSeries.HitTest(System.Windows.Point,System.Boolean)"/> to get the nearest (non-interpolated) <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> to the mouse point
            </summary>
            <param name="rawPoint">The mouse point</param>
            <returns>The <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> result</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.BaseRenderableSeries.OnInvalidateParentSurface(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            When called, invalidates the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
            <param name="d">The DependencyObject that raised the event.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.BaseRenderableSeries.CreateFromTemplate(System.Windows.Controls.ControlTemplate)">
            <summary>
            Returns new instance of <see cref="T:Abt.Controls.SciChart.PointMarker"/>, which was created from the <paramref name="template"/>
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.BaseRenderableSeries.CreateRolloverMarker">
            <summary>
            Creates a RolloverMarker from the RolloverMarkerTemplate property
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart.BaseRenderableSeries.SelectionChanged">
            <summary>
            Event raised whenever IsSelected property changed
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.Services">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.ServiceContainer"/> which provides access to services throughout SciChart. 
            ServiceContainers are created one per <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Abt.Controls.SciChart.AxisBase"/>, <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.IsVisible">
            <summary>
            Gets or sets whether the series is visible when drawn
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.StrokeThickness">
            <summary>
            Gets or sets the StrokeThickness of the line. 
            </summary>
            <remarks>
            Note that increasing stroke thickness from 1 will have a detrimental effect on performance
            </remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.ResamplingResolution">
            <summary>
            Gets or sets the resampling resolution. The default is 2, which results in Nyquist resampling. Lower values are not permitted. Higher values result in potentially more visually accurate rendering, but at the expense of performance
            </summary>
            <value>The resampling resolution.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.PaletteProvider">
            <summary>
            Gets or Sets an optional <see cref="T:Abt.Controls.SciChart.IPaletteProvider"/> instance, which may be used to override specific data-point colors during rendering.
            For more details, see the <see cref="T:Abt.Controls.SciChart.IPaletteProvider"/> documentation
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.RolloverMarker">
            <summary>
            Gets a cached Framework Element which is used as a Rollover Marker.
            This is generated from a ControlTemplate in xaml via the <see cref="F:Abt.Controls.SciChart.BaseRenderableSeries.RolloverMarkerTemplateProperty"/> DependencyProperty
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.PointMarkerTemplate">
            <summary>
            Gets or sets the PointMarker ControlTemplate, which defines the point-marker Visual to be rendered on each datapoint of the series
            </summary>
            <remarks>The ControlTemplate is used to template the visuals only for a blank control, creating a new instance per <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>. 
            the resulting FrameworkElement is cached to bitmap and drawn on each redraw of the series, so any triggers, mouse interactions on the ControlTemplate will be lost</remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.RolloverMarkerTemplate">
            <summary>
            Gets or sets the RolloverMarker ControlTemplate, which defines the Visual to be rendered on the series when the <see cref="T:Abt.Controls.SciChart.RolloverModifier"/> is enabled and the user moves the mouse.
            </summary>
            <remarks>The ControlTemplate is used to template the visuals only for a blank control, creating a new instance per <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.YAxisId">
            <summary>
            Gets or sets the ID of the Y-Axis which this renderable series is measured against
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.AntiAliasing">
            <summary>
            Gets or sets whether this series uses AntiAliasing when drawn
            </summary>
            <value><c>true</c> if anti aliasing is enabled; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.ResamplingMode">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart.Numerics.ResamplingMode"/> used when drawing this series
            </summary>
            <value>The resampling mode.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.SeriesColor">
            <summary>
            Gets or sets the SeriesColor.
            </summary>
            <value>The color of the series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.SelectedSeriesStyle">
            <summary>
            Gets or sets a style for selected series.
            </summary>
            <value>The style of the selected series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.IsSelected">
            <summary>
            Gets or sets the IsSelectedProperty.
            </summary>
            <value>The color of the selected series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.DataSeries">
            <summary>
            Gets or sets the DataSeries associated with this series
            </summary>
            <value>The data series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.DataSeriesIndex">
            <summary>
            Gets or sets the Index to the <see cref="T:Abt.Controls.SciChart.IDataSeriesSet"/> which this renderable series draws its data from
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.CurrentRenderPassData">
            <summary>
            Gets or sets the RenderPassData instance used for this render pass
            </summary>
            <value>The render data.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.XAxis">
            <summary>
            Gets or sets the XAxis that this <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/> is associated with
            </summary>
            <value>The X axis.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.Width">
            <summary>
            Gets or sets the width of the element.
            </summary>
            <value>The width.</value>
            <returns>The width of the element, in device-independent units (1/96th inch per unit). The default value is <see cref="F:System.Double.NaN"/>. This value must be equal to or greater than 0.0. See Remarks for upper bound information.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.Height">
            <summary>
            Gets or sets the suggested height of the element.
            </summary>
            <value>The height.</value>
            <returns>The height of the element, in device-independent units (1/96th inch per unit). The default value is <see cref="F:System.Double.NaN"/>. This value must be equal to or greater than 0.0. See Remarks for upper bound information.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.BaseRenderableSeries.IsValidForDrawing">
            <summary>
            Gets a value indicating whether this <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/> is valid for drawing.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.Visuals.Series.CustomRenderableSeries">
            <summary>
            Defines a Custom Renderable Series - override Draw() to define what is drawn to the screen at render time
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.Visuals.Series.CustomRenderableSeries.Draw(Abt.Controls.SciChart.Services.IRenderContext2D,Abt.Controls.SciChart.IRenderPassData)">
            <summary>
            Draws the series using the <see cref="T:Abt.Controls.SciChart.Services.IRenderContext2D"/> and the <see cref="T:Abt.Controls.SciChart.IRenderPassData"/> passed in
            </summary>
            <param name="renderContext">The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen</param>
            <param name="renderPassData">The render pass data. Contains a resampled <see cref="T:Abt.Controls.SciChart.IPointSeries"/>, the <see cref="T:Abt.Controls.SciChart.IndexRange"/> of points on the screen
            and the current YAxis and XAxis <see cref="T:Abt.Controls.SciChart.Numerics.ICoordinateCalculator`1"/> to convert data-points to screen points</param>
        </member>
        <member name="T:Abt.Controls.SciChart.FastBandRenderableSeries">
            <summary>
            A raster RenderableSeries type which displays two lines and shaded bands between them, where band-colors depend on whether one line is greater than the other
            For usage, bind to an <see cref="T:Abt.Controls.SciChart.XyyDataSeries`2"/> and set the <see cref="P:Abt.Controls.SciChart.BaseRenderableSeries.SeriesColor"/>, <see cref="P:Abt.Controls.SciChart.FastBandRenderableSeries.Series1Color"/>, 
            <see cref="P:Abt.Controls.SciChart.FastBandRenderableSeries.BandUpColor"/> and <see cref="P:Abt.Controls.SciChart.FastBandRenderableSeries.BandDownColor"/> properties
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastBandRenderableSeries.IsDigitalLineProperty">
            <summary>
            Defines the IsDigitalLine DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastBandRenderableSeries.Series1ColorProperty">
            <summary>
            Defines the Series1Color DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastBandRenderableSeries.BandUpColorProperty">
            <summary>
            Defines the BandUpColor DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastBandRenderableSeries.BandDownColorProperty">
            <summary>
            Defines the BandDownColor DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.FastBandRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.FastBandRenderableSeries"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.FastBandRenderableSeries.HitTest(System.Windows.Point,System.Boolean)">
            <summary>
            Performs a hit-test at the specific mouse point (X,Y coordinate on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>),
            returning a <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </summary>
            <param name="rawPoint">The mouse point on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/></param>
            <param name="interpolate">If true, use interpolation to perform a hit-test between data-points, or on the area if a <see cref="T:Abt.Controls.SciChart.FastMountainRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.FastColumnRenderableSeries"/> or <see cref="T:Abt.Controls.SciChart.FastCandlestickRenderableSeries"/></param>
            <returns>
            A <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </returns>
        </member>
        <member name="P:Abt.Controls.SciChart.FastBandRenderableSeries.IsDigitalLine">
            <summary>
            Gets or sets a value indicating whether this line series is a digital (step) line
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastBandRenderableSeries.Series1Color">
            <summary>
            Gets or sets the SeriesColor of the Y1 line. For the Y0 line, use SeriesColor
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastBandRenderableSeries.BandDownColor">
            <summary>
            Gets or sets the Color of the shaded area when Y1 is less than Y0
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastBandRenderableSeries.BandUpColor">
            <summary>
            Gets or sets the Color of the shaded area when Y1 is greater than Y0
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastBandRenderableSeries.RolloverMarker1">
            <summary>
            Gets or sets the RolloverMarker for one of the series
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.FastImpulseRenderableSeries">
            <summary>
            Provides Impulse series rendering, which draws a vertical line from zero to with an optional point-marker at the end of the line
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.FastImpulseRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.FastImpulseRenderableSeries"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.FastImpulseRenderableSeries.OnSeriesColorChanged">
            <summary>
            Called when the <see cref="P:Abt.Controls.SciChart.BaseRenderableSeries.SeriesColor"/> dependency property changes. Allows derived types to do caching 
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.FastImpulseRenderableSeries.HitTest(System.Windows.Point,System.Boolean)">
            <summary>
            Performs a hit-test at the specific mouse point (X,Y coordinate on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>),
            returning a <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </summary>
            <param name="rawPoint">The mouse point on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/></param>
            <param name="interpolate">If true, use interpolation to perform a hit-test between data-points, or on the area if a <see cref="T:Abt.Controls.SciChart.FastMountainRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.FastColumnRenderableSeries"/> or <see cref="T:Abt.Controls.SciChart.FastCandlestickRenderableSeries"/></param>
            <returns>
            A <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </returns>
        </member>
        <member name="T:Abt.Controls.SciChart.PaletteProviderBase">
            <summary>
            Base class for custom Palette Providers, which may be used to override bar, candle or OHLC colors for individual points during rendering
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IPaletteProvider">
            <summary>
            Defines the interface to a PaletteProvider. By implementing this interface, you can override colors on a <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/> by setting or binding to the <see cref="P:Abt.Controls.SciChart.BaseRenderableSeries.PaletteProvider"/> property. 
            
            On each point, the GetColor or OverrideColor methods will be called, allowing you the chance to return a custom color for that point. 
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.IPaletteProvider.GetColor(Abt.Controls.SciChart.IRenderableSeries,System.Double,System.Double)">
            <summary>
            When called for an X,Y point, override the color on the attached <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>. 
            
            Return null to keep the default series color
            
            Return a value to override the series color
            </summary>
            <param name="series">The source <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/></param>
            <param name="xValue">The X-value of the data-point</param>
            <param name="yValue">The Y-value of the data-point</param>
            <returns>The overriden color. Return null to keep the default</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.IPaletteProvider.OverrideColor(Abt.Controls.SciChart.IRenderableSeries,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            When called for an OHLC point, override the color on the attached <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>.
            Return null to keep the default series color
            Return a value to override the series color
            </summary>
            <param name="series">The source <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/></param>
            <param name="xValue">The x value.</param>
            <param name="openValue">The open value.</param>
            <param name="highValue">The high value.</param>
            <param name="lowValue">The low value.</param>
            <param name="closeValue">The close value.</param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.PaletteProviderBase.GetColor(Abt.Controls.SciChart.IRenderableSeries,System.Double,System.Double)">
            <summary>
            When called for an X,Y point, override the color on the attached <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>.
            Return null to keep the default series color
            Return a value to override the series color
            </summary>
            <param name="series">The source <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/></param>
            <param name="xValue">The X-value of the data-point</param>
            <param name="yValue">The Y-value of the data-point</param>
            <returns>
            The overriden color. Return null to keep the default
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.PaletteProviderBase.OverrideColor(Abt.Controls.SciChart.IRenderableSeries,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            When called for an OHLC point, override the color on the attached <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>.
            Return null to keep the default series color
            Return a value to override the series color
            </summary>
            <param name="series">The source <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/></param>
            <param name="xValue">The x value.</param>
            <param name="openValue">The open value.</param>
            <param name="highValue">The high value.</param>
            <param name="lowValue">The low value.</param>
            <param name="closeValue">The close value.</param>
            <returns></returns>
        </member>
        <member name="T:Abt.Controls.SciChart.FastCandlestickRenderableSeries">
            <summary>
            Provides Fast Candlestick series rendering, however makes the assumption that all X-Data is evenly spaced. Gaps in the data are collapsed
            </summary>
            <remarks>In order to render data as a <see cref="T:Abt.Controls.SciChart.FastCandlestickRenderableSeries"/>, the input <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> 
            must have OHLC data appended via the <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> Append method</remarks>
        </member>
        <member name="F:Abt.Controls.SciChart.FastCandlestickRenderableSeries.UpWickColorProperty">
            <summary>
            Defines the UpWickColor DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastCandlestickRenderableSeries.DownWickColorProperty">
            <summary>
            Defines the DownWickColor DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastCandlestickRenderableSeries.UpBodyColorProperty">
            <summary>
            Defines the UpBodyColor DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastCandlestickRenderableSeries.DownBodyColorProperty">
            <summary>
            Defines the DownBodyColor DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastCandlestickRenderableSeries.DataPointWidthProperty">
            <summary>
            Defines the DataPointWidth DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.FastCandlestickRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.FastCandlestickRenderableSeries"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.FastCandlestickRenderableSeries.OnResamplingModeChanged">
            <summary>
            Called when resampling mode changes
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.FastCandlestickRenderableSeries.HitTest(System.Windows.Point,System.Boolean)">
            <summary>
            Performs a hit-test at the specific mouse point (X,Y coordinate on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>),
            returning a <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </summary>
            <param name="rawPoint">The mouse point on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/></param>
            <param name="interpolate">If true, use interpolation to perform a hit-test between data-points, or on the area if a <see cref="T:Abt.Controls.SciChart.FastMountainRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.FastColumnRenderableSeries"/> or <see cref="T:Abt.Controls.SciChart.FastCandlestickRenderableSeries"/></param>
            <returns>
            A <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </returns>
        </member>
        <member name="P:Abt.Controls.SciChart.FastCandlestickRenderableSeries.DataPointWidth">
            <summary>
            Gets or sets the DataPointWidth, a value between 0.0 and 1.0 which defines the fraction of available space each column should occupy
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastCandlestickRenderableSeries.UpWickColor">
            <summary>
            Gets or sets the Color used for wicks and outlines on up-candles (close &gt; open)
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastCandlestickRenderableSeries.DownWickColor">
            <summary>
            Gets or sets the Color used for wicks and outlines on down-candles (close &lt; open)
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastCandlestickRenderableSeries.UpBodyColor">
            <summary>
            Gets or sets the Color used for candle body on up-candles (close &gt; open)
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastCandlestickRenderableSeries.DownBodyColor">
            <summary>
            Gets or sets the Color used for candle body on down-candles (close &lt; open)
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.FastColumnRenderableSeries">
            <summary>
            Provides Fast Column (Bar) series rendering
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastColumnRenderableSeries.FillColorProperty">
            <summary>
            Defines the FillColor DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastColumnRenderableSeries.DataPointWidthProperty">
            <summary>
            Defines the DataPointWidth DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.FastColumnRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.FastColumnRenderableSeries"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.FastColumnRenderableSeries.HitTest(System.Windows.Point,System.Boolean)">
            <summary>
            Performs a hit-test at the specific mouse point (X,Y coordinate on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>),
            returning a <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </summary>
            <param name="rawPoint">The mouse point on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/></param>
            <param name="interpolate">If true, use interpolation to perform a hit-test between data-points, or on the area if a <see cref="T:Abt.Controls.SciChart.FastMountainRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.FastColumnRenderableSeries"/> or <see cref="T:Abt.Controls.SciChart.FastCandlestickRenderableSeries"/></param>
            <returns>
            A <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.FastColumnRenderableSeries.OnSeriesColorChanged">
            <summary>
            Called when the <see cref="P:Abt.Controls.SciChart.BaseRenderableSeries.SeriesColor"/> dependency property changes. Allows derived types to do caching
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastColumnRenderableSeries.FillColor">
            <summary>
            Gets or sets the Fill Color for columns. The column outline is specified by <see cref="P:Abt.Controls.SciChart.BaseRenderableSeries.SeriesColor"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastColumnRenderableSeries.DataPointWidth">
            <summary>
            Gets or sets the DataPointWidth, a value between 0.0 and 1.0 which defines the fraction of available space each column should occupy
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.LineDrawMode">
            <summary>
            Enumeration Constants to define how double.NaN is treated in the <see cref="T:Abt.Controls.SciChart.FastLineRenderableSeries"/>
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LineDrawMode.ClosedLines">
            <summary>
            double.NaN gaps are treated as closed lines
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.LineDrawMode.Gaps">
            <summary>
            double.NaN gaps are rendered as gaps
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.FastLineRenderableSeries">
            <summary>
            Provides Fast Line series rendering
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastLineRenderableSeries.IsDigitalLineProperty">
            <summary>
            Defines the IsDigitalLine DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastLineRenderableSeries.DrawNaNAsProperty">
            <summary>
            Defines the DrawNanAs DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.FastLineRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.FastLineRenderableSeries"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.FastLineRenderableSeries.OnSeriesColorChanged">
            <summary>
            Called when the <see cref="P:Abt.Controls.SciChart.BaseRenderableSeries.SeriesColor"/> dependency property changes. Allows derived types to do caching 
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastLineRenderableSeries.IsDigitalLine">
            <summary>
            Gets or sets a value indicating whether this line series is a digital (step) line
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastLineRenderableSeries.DrawNaNAs">
            <summary>
            Gets or sets a value indicating how this Line series will treat double.NaN. See <see cref="T:Abt.Controls.SciChart.LineDrawMode"/> for available options
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.FastMountainRenderableSeries">
            <summary>
            Provides Fast Mountain (Area) series rendering, however makes the assumption that all X-Data is evenly spaced. Gaps in the data are collapsed
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastMountainRenderableSeries.IsDigitalLineProperty">
            <summary>
            Defines the IsDigitalLine DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastMountainRenderableSeries.AreaColorProperty">
            <summary>
            Defines the AreaColor DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.FastMountainRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.FastMountainRenderableSeries"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.FastMountainRenderableSeries.HitTest(System.Windows.Point,System.Boolean)">
            <summary>
            Performs a hit-test at the specific mouse point (X,Y coordinate on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>),
            returning a <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </summary>
            <param name="rawPoint">The mouse point on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/></param>
            <param name="interpolate">If true, use interpolation to perform a hit-test between data-points, or on the area if a <see cref="T:Abt.Controls.SciChart.FastMountainRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.FastColumnRenderableSeries"/> or <see cref="T:Abt.Controls.SciChart.FastCandlestickRenderableSeries"/></param>
            <returns>
            A <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.FastMountainRenderableSeries.OnSeriesColorChanged">
            <summary>
            Called when the <see cref="P:Abt.Controls.SciChart.BaseRenderableSeries.SeriesColor"/> dependency property changes. Allows derived types to do caching
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastMountainRenderableSeries.AreaColor">
            <summary>
            Gets or sets the Area Color for the <see cref="T:Abt.Controls.SciChart.FastMountainRenderableSeries"/>. The mountain chart outline is specified by <see cref="P:Abt.Controls.SciChart.BaseRenderableSeries.SeriesColor"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastMountainRenderableSeries.IsDigitalLine">
            <summary>
            Gets or sets a value indicating whether this mountain series has a digital (step) line
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.FastOhlcRenderableSeries">
            <summary>
            Provides Fast Candlestick series rendering, however makes the assumption that all X-Data is evenly spaced. Gaps in the data are collapsed
            </summary>
            <remarks>In order to render data as a <see cref="T:Abt.Controls.SciChart.FastCandlestickRenderableSeries"/>, the input <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> 
            must have OHLC data appended via the <see cref="T:Abt.Controls.SciChart.IDataSeries`2"/> Append method</remarks>
        </member>
        <member name="F:Abt.Controls.SciChart.FastOhlcRenderableSeries.UpWickColorProperty">
            <summary>
            Defines the UpWickColor DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastOhlcRenderableSeries.DownWickColorProperty">
            <summary>
            Defines the DownWickColor DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.FastOhlcRenderableSeries.DataPointWidthProperty">
            <summary>
            Defines the DataPointWidth DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.FastOhlcRenderableSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.FastCandlestickRenderableSeries"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.FastOhlcRenderableSeries.OnResamplingModeChanged">
            <summary>
            Called when the resampling mode changes
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.FastOhlcRenderableSeries.HitTest(System.Windows.Point,System.Boolean)">
            <summary>
            Performs a hit-test at the specific mouse point (X,Y coordinate on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>),
            returning a <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </summary>
            <param name="rawPoint">The mouse point on the parent <see cref="T:Abt.Controls.SciChart.SciChartSurface"/></param>
            <param name="interpolate">If true, use interpolation to perform a hit-test between data-points, or on the area if a <see cref="T:Abt.Controls.SciChart.FastMountainRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.FastColumnRenderableSeries"/> or <see cref="T:Abt.Controls.SciChart.FastCandlestickRenderableSeries"/></param>
            <returns>
            A <see cref="T:Abt.Controls.SciChart.HitTestInfo"/> struct with the results
            </returns>
        </member>
        <member name="P:Abt.Controls.SciChart.FastOhlcRenderableSeries.DataPointWidth">
            <summary>
            Gets or sets the DataPointWidth, a value between 0.0 and 1.0 which defines the fraction of available space each column should occupy
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastOhlcRenderableSeries.UpWickColor">
            <summary>
            Gets or sets the Color used for wicks and outlines on up-candles (close &gt; open)
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.FastOhlcRenderableSeries.DownWickColor">
            <summary>
            Gets or sets the Color used for wicks and outlines on down-candles (close &lt; open)
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.HitTestInfo">
            <summary>
            Provides information on a series hit test operation, see <see cref="M:Abt.Controls.SciChart.BaseRenderableSeries.HitTest(System.Windows.Point,System.Boolean)"/> for more information
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.HitTestInfo.DataSeriesType">
            <summary>
            Provides information about the type of <see cref="T:Abt.Controls.SciChart.IDataSeries"/> that was hit tested
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.HitTestInfo.HitTestPoint">
            <summary>
            Gets or sets a point snapped to the X-Y value of the series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.HitTestInfo.Y1HitTestPoint">
            <summary>
            Gets or sets a point snapped to the X-Y1 series
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.HitTestInfo.XValue">
            <summary>
            Gets or sets the X Value at the hit-test site
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.HitTestInfo.YValue">
            <summary>
            Gets or sets the Y-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.HitTestInfo.Y1Value">
            <summary>
            Gets or sets the Y1-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.HitTestInfo.OpenValue">
            <summary>
            Gets or sets the Open-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.HitTestInfo.HighValue">
            <summary>
            Gets or sets the High-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.HitTestInfo.LowValue">
            <summary>
            Gets or sets the Low-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.HitTestInfo.CloseValue">
            <summary>
            Gets or sets the Close-Value at the hit-test site
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.HitTestInfo.DataSeriesIndex">
            <summary>
            Gets or sets the DataSeriesIndex a the hit-test site
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.HitTestInfo.IsHit">
            <summary>
            Gets or sets whether the HitTest operation was a hit or not
            </summary>
            <remarks>Defined as the input point being within a small distance of the output hittest point</remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.HitTestInfo.IsWithinDataBounds">
            <summary>
            Gets or sets whether the input point is between first and last series point or not
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.SciChartSurface">
            <summary>
            Provides a high performance chart surface with a single <see cref="T:Abt.Controls.SciChart.IRenderSurface"/> viewport 
            for rendering multiple <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/>, X and Y <see cref="T:Abt.Controls.SciChart.IAxis"/> instances, 
            and a <see cref="T:Abt.Controls.SciChart.IDataSeriesSet"/> data source
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.ClipUnderlayAnnotationsProperty">
            <summary>
            Defines the ClipUnderlayAnnotations DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.ClipOverlayAnnotationsProperty">
            <summary>
            Defines the ClipOverlayAnnotations DepedencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.ClipModifierSurfaceProperty">
            <summary>
            Defines the ClipModifierSurface DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.DataSetProperty">
            <summary>
            Defines the DataSet DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.ZoomExtentsCommandProperty">
            <summary>
            Defines the ZoomExtentsCommand DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.XAxisProperty">
            <summary>
            Defines the XAxis DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.YAxisProperty">
            <summary>
            Defines the YAxis DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.YAxesProperty">
            <summary>
            Defines the YAxes DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.AnnotationsProperty">
            <summary>
            Defines the Annotations DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.AutoRangeOnStartupProperty">
            <summary>
            Defines the AutoRangeOnStartup DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.ChartModifierProperty">
            <summary>
            Defines the ChartModifier DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.GridLinesPanelStyleProperty">
            <summary>
            Defines the GridLinesPanelStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.RenderSurfaceStyleProperty">
            <summary>
            Defines the RenderSurfaceStyle DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.RenderableSeriesProperty">
            <summary>
            Defines the RenderableSeries DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.SelectedRenderableSeriesProperty">
            <summary>
            Defines the SelectedRenderableSeries DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.ChartTitleProperty">
            <summary>
            Defines the ChartTitle DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.ViewportManagerProperty">
            <summary>
            Defines the ViewportManager DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartSurface.SeriesSourceProperty">
            <summary>
            Defines the SeriesSource DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>. In simplest terms, this means the method is called just before a UI element displays in an application. For more information, see Remarks.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.ZoomExtents">
            <summary>
            Zooms the chart to the extents of the data, plus any X or Y Grow By fraction set on the X and Y Axes
            </summary>
            <param name="isAnimated">if set to <c>true</c> performs the zoom with animation</param>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.ZoomExtentsY">
            <summary>
            Zooms the chart to the extents of the data in the Y-Direction, accounting for the current data in view in the X-direction
            </summary>
            <param name="isAnimated">if set to <c>true</c> animates the zoom operation.</param>
            <param name="xRangeWindow">The XAxis.VisibleRange to use as a window when zooming in the Y-direction. By leaving this as the default, null, 
            this method takes the current XAxis.VisibleRange</param>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>The disposable Update Suspender</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.ResumeUpdates(Abt.Controls.SciChart.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.ClearSeries">
            <summary>
            Removes all DataSeries from the SciChart
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.SetMouseCursor(System.Windows.Input.Cursor)">
            <summary>
            Sets a Cursor on the SciChartSurface
            </summary>
            <param name="cursor">The new Cursor</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.InvalidateElement">
            <summary>
            Asynchronously requests that the element redraws itself plus children.
            Will be ignored if the element is ISuspendable and currently IsSuspended (within a SuspendUpdates/ResumeUpdates call)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.SetLicenseKey(System.String)">
            <summary>
            Manually applies a license key, in case automatic discovery fails
            </summary>
            <param name="key">The license key string</param>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.TranslatePoint(System.Windows.Point,Abt.Controls.SciChart.IHitTestable)">
            <summary>
            Translates the point relative to the other hittestable element
            </summary>
            <param name="point">The point.</param>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.AnimateZoomExtents(System.TimeSpan)">
            <summary>
            Zooms to extents with the specified animation duration
            </summary>
            <param name="duration">The duration of animation when zooming to extents</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current HitTestable element
            </summary>
            <param name="point">The point to test</param>
            <returns>true if the Point is within the bounds</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.GetBoundsRelativeTo(Abt.Controls.SciChart.IHitTestable)">
            <summary>
            Gets the bounds of the current HitTestable element relative to another HitTestable element
            </summary>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.OnArrangeSciChart">
            <summary>
            Preparations for a render pass, called internally, returns the viewport size
            </summary>
            <returns>The required Viewport Size</returns>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.GetWindowedYRange(Abt.Controls.SciChart.IAxis,Abt.Controls.SciChart.IRange)">
            <summary>
            Equivalent of calling YAxis.GetMaximumRange() however returns the max range only for that axis (by the data-series on it)
            </summary>
            <param name="yAxis"></param>
            <param name="xRange"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.RedrawOrZoomExtents">
            <summary>
            Conditionally redraws or zooms to extents depending on the status of the XAxis, YAxis Visible Range. 
            Called by property changed handlers typically during the startup sequence
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.GetAndAssertTemplateChild``1(System.String)">
            <summary>
            Gets the TemplateChild by the specified name and casts to type <typeparamref name="T"/>, asserting that the result is not null
            </summary>
            <typeparam name="T">The Type of the templated part</typeparam>
            <param name="childName">Name of the templated part.</param>
            <returns>The template part instance</returns>
            <exception cref="T:System.InvalidOperationException">Unable to Apply the Control Template. Child is missing or of the wrong type</exception>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.OnLoad">
            <summary>
            Forces initialization of the SciChartSurface in the case it is being used to render off-screen (on server)
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartSurface.#ctor(Abt.Controls.SciChart.IServiceContainer)">
            <summary>
            Internal Ctor used for tests
            </summary>
            <param name="mockServices"></param>
        </member>
        <member name="E:Abt.Controls.SciChart.SciChartSurface.Rendered">
            <summary>
            Event raised at the end of a single render pass
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.IsDirty">
            <summary>
            Returns whether the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> IsDirty and requires redrawing on the next render pass
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.LicenseDaysRemaining">
            <summary>
            Gets the number of license days remaining
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.RootGrid">
            <summary>
            Gets the Root Grid that hosts the SciChart RenderSurface, GridLinesPanel, X-Axis and Y-Axes (Left and right)
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.Services">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.ServiceContainer"/> which provides access to services throughout SciChart. 
            ServiceContainers are created one per <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:Abt.Controls.SciChart.AxisBase"/>, <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/>, <see cref="T:Abt.Controls.SciChart.ChartModifierBase"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.RenderPriority">
            <summary>
            Gets or sets the RenderPriority 
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.ClipOverlayAnnotations">
            <summary>
            Gets or sets whether annotations over the chart should clip to bounds or not. Default value is True
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.ClipUnderlayAnnotations">
            <summary>
            Gets or sets whether annotations under the chart should clip to bounds or not. Default value is true
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.ClipModifierSurface">
            <summary>
            Gets or sets a value whether to clip the ChartModifierSurface property to bounds. Fefault false
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.RenderableSeries">
            <summary>
            Gets the collection of RenderableSeries that this SciChartSurface draws.
            </summary>
            <value>The renderable series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.SelectedRenderableSeries">
            <summary>
            Gets the collection of RenderableSeries that are selected.
            </summary>
            <value>The renderable series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.ChartTitle">
            <summary>
            Gets or sets an optional Chart Title, displayed above the chart surface
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.AutoRangeOnStartup">
            <summary>
            Gets or sets a value indicating whether SciChart will attempt to perform a one-time AutoRange on startup
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.ZoomExtentsCommand">
            <summary>
            Gets or sets the zoom extents command, which when invoked, causes the SciChartSurface to zoom to extents
            </summary>
            <value>The zoom extents command.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.DataSet">
            <summary>
            Gets or sets the DataSeries that this SciChartSurface binds to
            </summary>
            <value>The data set.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.XAxis">
            <summary>
            Gets or sets the XAxis control on the SciChartSurface
            </summary>
            <value>The X axis.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.YAxis">
            <summary>
            Gets or sets the primary YAxis control on the SciChartSurface (default side=Right)
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.YAxes">
            <summary>
            Gets the collection of Y-Axis <see cref="T:Abt.Controls.SciChart.IAxis"/> that this SciChartSurface measures against
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.Annotations">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.AnnotationCollection"/> which provides renderable annotations over the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.ViewportManager">
            <summary>
            Gets or sets the ViewportManager instance on the chart, which handles behavior of the viewport on render
            </summary>
            <value>The renderable series.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.AnnotationOverlaySurface">
            <summary>
            Gets the Annotation Canvas over the chart
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.AnnotationUnderlaySurface">
            <summary>
            Gets the Annotation Canvas under the chart
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.AdornerLayerCanvas">
            <summary>
            Gets the Adorner Layer over the chart
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.ModifierSurface">
            <summary>
            Gets the ModifierSurface, which is used to draw primitives for the Chart Modifiers
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.ChartModifier">
            <summary>
            Gets or sets the current ChartModifier, which alters the behaviour of the chart
            </summary>
            <value>The chart modifier.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.GridLinesPanel">
            <summary>
            Gets the GridLinesPanel where gridlines are drawn
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.GridLinesPanelStyle">
            <summary>
            Gets or sets the GridLinesPanel style.
            </summary>
            <value>The grid lines panel style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.RenderSurfaceStyle">
            <summary>
            Gets or sets the RenderSurface style.
            </summary>
            <value>The render surface style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartSurface.SeriesSource">
            <summary>
            The SeriesSource property allows data-binding to a collection of <see cref="T:Abt.Controls.SciChart.IChartSeriesViewModel"/> instances, 
            for pairing of <see cref="T:Abt.Controls.SciChart.DataSeries`2"/> with <see cref="T:Abt.Controls.SciChart.IRenderableSeries"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.RenderPriority">
            <summary>
            Enumeration constants to define the render priority for series rendering on the <see cref="T:Abt.Controls.SciChart.SciChartSurface"/>
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RenderPriority.Immediate">
            <summary>
            Renders immediately on data update, as opposed to waiting for the CompositionTarget.Rendering event
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RenderPriority.Normal">
            <summary>
            SciChart renders whenever there is new data and the CompositionTarget.Rendering event has fired.
            This is the default option
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.RenderPriority.Low">
            <summary>
            SciChart renders whenever there is new data and the CompositionTarget.Rendering event has fired, 
            but with a lower priority than input (mouse) events
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IRenderPassData">
            <summary>
            Defines the interface to <see cref="T:Abt.Controls.SciChart.RenderPassData"/>, the data used in a single render pass by <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/> derived types
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderPassData.PointRange">
            <summary>
            Gets the integer indices of the X-Data array that are currently in range.
            </summary>
            <returns>The indices to the X-Data that are currently in range</returns>
            <example>If the input X-data is 0...100 in steps of 1, the VisibleRange is 10, 30 then the PointRange will be 10, 30</example>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderPassData.PointSeries">
            <summary>
            Gets the current point series.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderPassData.YCoordinateCalculator">
            <summary>
            Gets the current Y coordinate calculator.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IRenderPassData.XCoordinateCalculator">
            <summary>
            Gets the current X coordinate calculator.
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.RenderPassData">
            <summary>
            Provides data used in a single render pass by <see cref="T:Abt.Controls.SciChart.BaseRenderableSeries"/> derived types
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.RenderPassData.#ctor(Abt.Controls.SciChart.IndexRange,Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double},Abt.Controls.SciChart.Numerics.ICoordinateCalculator{System.Double},Abt.Controls.SciChart.IPointSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.RenderPassData"/> class.
            </summary>
            <param name="pointRange">The integer indices to the X-data array that are currently in range.</param>
            <param name="xCoordinateCalculator">The current X Coordinate Calculator</param>
            <param name="yCoordinateCalculator">The current Y Coordinate Calculator</param>
            <param name="pointSeries">The resampled PointSeries to draw</param>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.RenderPassData.YCoordinateCalculator">
            <summary>
            Gets the current Y coordinate calculator.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RenderPassData.XCoordinateCalculator">
            <summary>
            Gets the current X coordinate calculator.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RenderPassData.PointSeries">
            <summary>
            Gets the current point series.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.RenderPassData.PointRange">
            <summary>
            Gets the integer indices of the X-Data array that are currently in range.
            </summary>
            <returns>The indices to the X-Data that are currently in range</returns>
              
            <example>If the input X-data is 0...100 in steps of 1, the VisibleRange is 10, 30 then the PointRange will be 10, 30</example>
            <remarks></remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.TemplatableControl">
            <summary>
            Placeholder class for an empty control. Should be styled via control template
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.PointMarker">
            <summary>
            Placeholder class for a PointMarker. Should be styled via control template
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.PointMarker.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.PointMarker.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"/>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.PointMarker.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>
            The actual size used.
            </returns>
        </member>
        <member name="T:Abt.Controls.SciChart.XyScatterRenderableSeries">
            <summary>
            Provides Scatter series rendering via the <see cref="P:Abt.Controls.SciChart.BaseRenderableSeries.PointMarkerTemplate"/> property. 
            </summary>
            <remarks><see cref="T:Abt.Controls.SciChart.XyScatterRenderableSeries"/> does not support resampling and so ignores the <see cref="P:Abt.Controls.SciChart.BaseRenderableSeries.ResamplingMode"/> property</remarks>
        </member>
        <member name="T:Abt.Controls.SciChart.SciStockChart">
            <summary>
            Provides a high performance Stock Chart control surface with a <see cref="T:Abt.Controls.SciChart.IRenderSurface"/> viewport. 
            
            Templated to inclue a <see cref="T:Abt.Controls.SciChart.CategoryDateTimeAxis"/> as XAxis and <see cref="T:Abt.Controls.SciChart.NumericAxis"/> as YAxis. 
            
            The SciStockChart can have an <see cref="T:Abt.Controls.SciChart.IDataSeriesSet"/> data source, or use the new MVVM API (see the <see cref="P:Abt.Controls.SciChart.SciChartSurface.SeriesSource"/> property)
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciStockChart.DrawMinorGridLinesProperty">
            <summary>Defines the DrawMajorGridLines DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciStockChart.DrawMajorGridLinesProperty">
            <summary>Defines the DrawMinorGridLines DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciStockChart.MinorsPerMajorProperty">
            <summary>Defines the MinorsPerMajor DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciStockChart.XAxisTextFormattingProperty">
            <summary>Defines the XAxisTextFormatting DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciStockChart.YAxisTextFormattingProperty">
            <summary>Defines the YAxisTextFormatting DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciStockChart.DrawXLabelsProperty">
            <summary>Defines the DrawXLabels DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciStockChart.IsCursorEnabledProperty">
            <summary>Defines the IsCursorEnabled DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciStockChart.IsPanEnabledProperty">
            <summary>Defines the IsPanEnabled DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciStockChart.IsRubberBandZoomEnabledProperty">
            <summary>Defines the IsRubberBandZoomEnabled DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciStockChart.BarTimeFrameProperty">
            <summary>Defines the BarTimeFrame DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciStockChart.XAxisVisibleRangeProperty">
            <summary>Defines the XAxisVisibleRange DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciStockChart.IsXAxisVisibleProperty">
            <summary>Defines the IsXAxisVisible DependencyProperty</summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciStockChart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.SciStockChart"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciStockChart.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />. In simplest terms, this means the method is called just before a UI element displays in an application. For more information, see Remarks.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciStockChart.ZoomExtents">
            <summary>
            Zooms the chart to the extents of the data, plus any X or Y Grow By fraction set on the X and Y Axes
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciStockChart.IsXAxisVisible">
            <summary>
            Gets or sets a value indicating whether the X axis is visible.
            </summary>        
        </member>
        <member name="P:Abt.Controls.SciChart.SciStockChart.DrawMajorGridLines">
            <summary>
            Gets or sets a value indicating whether to draw major gridlines on both X and Y axes
            </summary>        
        </member>
        <member name="P:Abt.Controls.SciChart.SciStockChart.DrawMinorGridLines">
            <summary>
            Gets or sets a value indicating whether to draw minor gridlines on both X and Y axes
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciStockChart.MinorsPerMajor">
            <summary>
            Gets or sets the number of minor gridlines to draw between major gridlines
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciStockChart.XAxisTextFormatting">
            <summary>
            Gets or sets the XAxis TextFormatting string. This is a string format, e.g. 'dd MMM yyyy' would yield '01 MAR 2012'. 
            For more information, see the <see cref="P:Abt.Controls.SciChart.AxisBase.TextFormatting"/> property 
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciStockChart.YAxisTextFormatting">
            <summary>
            Gets or sets the YAxis TextFormatting string. This is a string format, e.g. '0.00' would yield 1.23, or 0.23
            For more information, see the <see cref="T:Abt.Controls.SciChart.NumericAxis"/> TextFormatting property
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciStockChart.DrawXLabels">
            <summary>
            Gets or sets whether to draw X-Axis Labels or not
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciStockChart.IsCursorEnabled">
            <summary>
            Gets or sets whether the CursorModifier is enabled or not
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciStockChart.IsPanEnabled">
            <summary>
            Gets or sets whether the Pan modifier is enabled
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciStockChart.IsRubberBandZoomEnabled">
            <summary>
            Gets or sets whether the RubberBandXyZoom is enabled
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciStockChart.BarTimeFrame">
            <summary>
            Gets or sets the BarTimeFrame, this is the time in seconds for each bar on the <see cref="T:Abt.Controls.SciChart.SciStockChart"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciStockChart.XAxisVisibleRange">
            <summary>
            Gets or sets the XAxis.VisibleRange. The <see cref="T:Abt.Controls.SciChart.SciStockChart"/> control uses a <see cref="T:Abt.Controls.SciChart.CategoryDateTimeAxis"/>, which requires an <see cref="T:Abt.Controls.SciChart.IndexRange"/>. 
            For more information, see the <see cref="T:Abt.Controls.SciChart.CategoryDateTimeAxis"/> VisibleRange property 
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.SciChartGroup">
            <summary>
            An ItemsControl which allows grouping of multiple <see cref="T:Abt.Controls.SciChart.SciChartSurface"/> instances to create a multi-paned chart
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartGroup.VerticalChartGroupProperty">
            <summary>
            Defines the VerticalChartGroup DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart.SciChartGroup.IsTabbedProperty">
            <summary>
            Defines the IsTabbed DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.SciChartGroup"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartGroup.SetVerticalChartGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the vertical chart group dependency Property
            </summary>
            <param name="element">The element.</param>
            <param name="syncWidthGroup">The named group</param>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartGroup.GetVerticalChartGroup(System.Windows.DependencyObject)">
            <summary>
            Gets the vertical chart group depedency property
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartGroup.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            true if the item is (or is eligible to be) its own container; otherwise, false.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartGroup.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>
            The element that is used to display the given item.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartGroup.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" /> property changes.
            </summary>
            <param name="oldValue">Old value of the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" /> property.</param>
            <param name="newValue">New value of the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" /> property.</param>
        </member>
        <member name="M:Abt.Controls.SciChart.SciChartGroup.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartGroup.IsTabbed">
            <summary>
            Gets or sets value, indicates whether panes are tabbed or not
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart.SciChartGroup.HasTabbedItems">
            <summary>
            Gets a value, indicates, whether container has tabbed panes
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart.SciChartGroup.PropertyChanged">
            <summary>
            Occurs when a property changes. Part of the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart.IUpdateSuspender">
            <summary>
            Defines the interface to an <see cref="T:Abt.Controls.SciChart.UpdateSuspender"/>, a disposable class which allows nested suspend/resume operations on an <see cref="T:Abt.Controls.SciChart.ISuspendable"/> target
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IUpdateSuspender.IsSuspended">
            <summary>
            Gets a value indicating whether updates for this instance are currently suspended
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart.IUpdateSuspender.ResumeTargetOnDispose">
            <summary>
            Gets or sets a value indicating whether the target will resume when the IUpdateSuspender is disposed. Default is True
            </summary>
        </member>
    </members>
</doc>
