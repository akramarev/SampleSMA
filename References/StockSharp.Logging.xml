<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StockSharp.Logging</name>
    </assembly>
    <members>
        <member name="T:StockSharp.Logging.ConsoleLogListener">
            <summary>
            Логгер, записывающий данные в консольное окно.
            </summary>
        </member>
        <member name="T:StockSharp.Logging.LogListener">
            <summary>
            Базовый класс, который мониторит событие <see cref="E:StockSharp.Logging.ILogSource.Log"/> и сохраняет в некое хранилище.
            </summary>
        </member>
        <member name="T:StockSharp.Logging.ILogListener">
            <summary>
            Интерфейс класса, который мониторит событие <see cref="E:StockSharp.Logging.ILogSource.Log"/> и сохраняет в некое хранилище.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.ILogListener.WriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
            <summary>
            Записать сообщения.
            </summary>
            <param name="messages">Отладочные сообщения.</param>
        </member>
        <member name="M:StockSharp.Logging.LogListener.#ctor">
            <summary>
            Инициализировать <see cref="T:StockSharp.Logging.LogListener"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Logging.LogListener.AllWarningFilter">
            <summary>
            Фильтр, который принимает только сообщения типа <see cref="F:StockSharp.Logging.LogLevels.Warning"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Logging.LogListener.AllErrorFilter">
            <summary>
            Фильтр, который принимает только сообщения типа <see cref="F:StockSharp.Logging.LogLevels.Error"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.LogListener.WriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
            <summary>
            Записать сообщения.
            </summary>
            <param name="messages">Отладочные сообщения.</param>
        </member>
        <member name="M:StockSharp.Logging.LogListener.OnWriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
            <summary>
            Записать сообщения.
            </summary>
            <param name="messages">Отладочные сообщения.</param>
        </member>
        <member name="M:StockSharp.Logging.LogListener.OnWriteMessage(StockSharp.Logging.LogMessage)">
            <summary>
            Записать сообщение.
            </summary>
            <param name="message">Отладочное сообщение.</param>
        </member>
        <member name="P:StockSharp.Logging.LogListener.Filters">
            <summary>
            Фильтры сообщений, которыми указывается, какие сообщения следует обрабатывать.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.LogListener.DateFormat">
            <summary>
            Формат даты. По-умолчанию используется yyyy/MM/dd.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.LogListener.TimeFormat">
            <summary>
            Формат времени. По-умолчанию используется HH:mm:ss.fff.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.ConsoleLogListener.#ctor">
            <summary>
            Создать <see cref="T:StockSharp.Logging.ConsoleLogListener"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.ConsoleLogListener.OnWriteMessage(StockSharp.Logging.LogMessage)">
            <summary>
            Записать сообщение.
            </summary>
            <param name="message">Отладочное сообщение.</param>
        </member>
        <member name="T:StockSharp.Logging.DebugLogListener">
            <summary>
            Логгер стратегии, записывающий данные в отладочное окно.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.DebugLogListener.OnWriteMessage(StockSharp.Logging.LogMessage)">
            <summary>
            Записать сообщение.
            </summary>
            <param name="message">Отладочное сообщение.</param>
        </member>
        <member name="T:StockSharp.Logging.EmailLogListener">
            <summary>
            Логгер, отсылающий данные на email. 
            </summary>
        </member>
        <member name="M:StockSharp.Logging.EmailLogListener.#ctor(System.String,System.String)">
            <summary>
            Создать <see cref="T:StockSharp.Logging.EmailLogListener"/>.
            </summary>
            <param name="from">Адрес, от имени которого будет отравлено сообщение.</param>
            <param name="to">Адрес, куда будет отравлено сообщение.</param>
        </member>
        <member name="M:StockSharp.Logging.EmailLogListener.CreateClient">
            <summary>
            Создать email клиента.
            </summary>
            <returns>Email клиент.</returns>
        </member>
        <member name="M:StockSharp.Logging.EmailLogListener.CreateMail(StockSharp.Logging.LogMessage)">
            <summary>
            Создать email сообщение по полученным данным.
            </summary>
            <param name="message">Отладочное сообщение.</param>
            <returns>Email сообщение.</returns>
        </member>
        <member name="M:StockSharp.Logging.EmailLogListener.OnWriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
            <summary>
            Записать сообщения.
            </summary>
            <param name="messages">Отладочные сообщения.</param>
        </member>
        <member name="P:StockSharp.Logging.EmailLogListener.From">
            <summary>
            Адрес, от имени которого будет отравлено сообщение.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.EmailLogListener.To">
            <summary>
            Адрес, куда будет отравлено сообщение.
            </summary>
        </member>
        <member name="T:StockSharp.Logging.ErrorLoggingAttribute">
            <summary>
            Атрибут для WCF сервер, который автоматически записывает все ошибки в <see cref="M:StockSharp.Logging.LoggingHelper.LogError(System.Exception)"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Logging.ExternalLogListener">
            <summary>
            Логгер, отсылающий сообщения во внешний приемник <see cref="T:StockSharp.Logging.ILogListener"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.ExternalLogListener.#ctor(StockSharp.Logging.ILogListener)">
            <summary>
            Создать <see cref="T:StockSharp.Logging.ExternalLogListener"/>.
            </summary>
            <param name="logger">Внешний приемник сообщений.</param>
        </member>
        <member name="M:StockSharp.Logging.ExternalLogListener.OnWriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
            <summary>
            Записать сообщения.
            </summary>
            <param name="messages">Отладочные сообщения.</param>
        </member>
        <member name="P:StockSharp.Logging.ExternalLogListener.Logger">
            <summary>
            Внешний приемник сообщений.
            </summary>
        </member>
        <member name="T:StockSharp.Logging.SeparateByDateModes">
            <summary>
            Режими разделения лог файлов по датам.
            </summary>
        </member>
        <member name="F:StockSharp.Logging.SeparateByDateModes.None">
            <summary>
            Не разделять. Разделение выключено.
            </summary>
        </member>
        <member name="F:StockSharp.Logging.SeparateByDateModes.FileName">
            <summary>
            Разделять через добавление к названию файла.
            </summary>
        </member>
        <member name="F:StockSharp.Logging.SeparateByDateModes.SubDirectories">
            <summary>
            Разделять через под директории.
            </summary>
        </member>
        <member name="T:StockSharp.Logging.FileLogListener">
            <summary>
            Логгер, записывающий данные в текстовый файл.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.FileLogListener.#ctor">
            <summary>
            Создать <see cref="T:StockSharp.Logging.FileLogListener"/>. Для каждого <see cref="T:StockSharp.Logging.ILogSource"/> будет создан отдельный файл с названием, равный <see cref="P:StockSharp.Logging.ILogSource.Name"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.FileLogListener.#ctor(System.String)">
            <summary>
            Создать <see cref="T:StockSharp.Logging.FileLogListener"/>. Все сообщения из <see cref="E:StockSharp.Logging.ILogSource.Log"/> будут записывать в файл <paramref name="fileName"/>.
            </summary>
            <param name="fileName">Название текстового файла, в которое будут писаться сообщения из события <see cref="E:StockSharp.Logging.ILogSource.Log"/>.</param>
        </member>
        <member name="M:StockSharp.Logging.FileLogListener.OnCreateWriter(System.String)">
            <summary>
            Создать текстового писателя.
            </summary>
            <param name="fileName">Название текстового файла, в которое будут писаться сообщения из события <see cref="E:StockSharp.Logging.ILogSource.Log"/>.</param>
            <returns>Текстовый писатель.</returns>
        </member>
        <member name="M:StockSharp.Logging.FileLogListener.OnWriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
            <summary>
            Записать сообщения.
            </summary>
            <param name="messages">Отладочные сообщения.</param>
        </member>
        <member name="M:StockSharp.Logging.FileLogListener.DisposeManaged">
            <summary>
            Освободить ресурсы и закрыть лог-файл.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.FileLogListener.Encoding">
            <summary>
            Кодировка файла. По умолчанию используется кодировка UTF-8.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.FileLogListener.MaxLength">
            <summary>
            Максимальная длина файла лога. По-умолчанию установлено 0, что значит файл будет иметь неограниченный размер.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.FileLogListener.MaxCount">
            <summary>
            Максимальное количество роллируемых файлов. По-умолчанию установлено 0, что значит файлы будут роллироваться без ограничения.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.FileLogListener.Append">
            <summary>
            Добавлять ли в файл данные, если он уже существует.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.FileLogListener.LogDirectory">
            <summary>
            Директория, где будет создан файл лога. По умолчанию - директория с исполняемым файлом.
            </summary>
            <remarks>
            Если директория не существует, она будет создана.
            </remarks>
        </member>
        <member name="P:StockSharp.Logging.FileLogListener.WriteChildDataToRootFile">
            <summary>
            Записывать данные дочерних источников в файл родителя. По-умолчанию режим включен.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.FileLogListener.Extension">
            <summary>
            Расширение лог файлов. По-умолчанию значение равно txt.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.FileLogListener.WriteSourceId">
            <summary>
            Выводить в файл идентификатор источника <see cref="P:StockSharp.Logging.ILogSource.Id"/>. По-умолчанию выключено.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.FileLogListener.DirectoryDateFormat">
            <summary>
            Формат названия директории, представляющая дату. По-умолчанию используется yyyy_MM_dd.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.FileLogListener.SeparateByDates">
            <summary>
            Режим разделения лог файлов по датам. По умолчанию режим равен <see cref="F:StockSharp.Logging.SeparateByDateModes.None"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Logging.ILogReceiver">
            <summary>
            Интерфейс получателя логов.
            </summary>
        </member>
        <member name="T:StockSharp.Logging.ILogSource">
            <summary>
            Интерфейс источника логов.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.ILogSource.Id">
            <summary>
            Уникальный идентификатор источника.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.ILogSource.Name">
            <summary>
            Имя источника.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.ILogSource.Parent">
            <summary>
            Родительский источник логов.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.ILogSource.LogLevel">
            <summary>
            Уровень логирования для источника.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.ILogSource.CurrentTime">
            <summary>
            Текущее время, которое будет передано в <see cref="P:StockSharp.Logging.LogMessage.Time"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.ILogSource.Childs">
            <summary>
            Дочерние источники логов.
            </summary>
        </member>
        <member name="E:StockSharp.Logging.ILogSource.Log">
            <summary>
            Событие нового отладочного сообщения.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.ILogReceiver.AddLog(StockSharp.Logging.LogMessage)">
            <summary>
            Записать сообщение в лог.
            </summary>
            <param name="message">Отладочное сообщение.</param>
        </member>
        <member name="T:StockSharp.Logging.BaseLogReceiver`1">
            <summary>
            Базовая реализация <see cref="T:StockSharp.Logging.ILogReceiver"/>.
            </summary>
            <typeparam name="TParent">Тип родителя <see cref="P:StockSharp.Logging.ILogSource.Parent"/>.</typeparam>
        </member>
        <member name="T:StockSharp.Logging.BaseLogSource`1">
            <summary>
            Базовая реализация <see cref="T:StockSharp.Logging.ILogSource"/>.
            </summary>
            <typeparam name="TParent">Тип родителя <see cref="P:StockSharp.Logging.ILogSource.Parent"/>.</typeparam>
        </member>
        <member name="M:StockSharp.Logging.BaseLogSource`1.#ctor">
            <summary>
            Инициализировать <see cref="T:StockSharp.Logging.BaseLogSource`1"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.BaseLogSource`1.SetChilds``1(Ecng.Collections.INotifyList{``0})">
            <summary>
            Установить коллекцию дочерних элементов, которые будут транслироваться в <see cref="P:StockSharp.Logging.ILogSource.Childs"/>.
            </summary>
            <typeparam name="TChild">Тип дочернего элемента.</typeparam>
            <param name="childs">Коллекция дочерних элементов.</param>
        </member>
        <member name="M:StockSharp.Logging.BaseLogSource`1.RaiseLog(StockSharp.Logging.LogMessage)">
            <summary>
            Вызвать событие <see cref="E:StockSharp.Logging.ILogSource.Log"/>.
            </summary>
            <param name="message">Отладочное сообщение.</param>
        </member>
        <member name="M:StockSharp.Logging.BaseLogSource`1.ToString">
            <summary>
            Получить строковое представление источника.
            </summary>
            <returns>Строковое представление источника.</returns>
        </member>
        <member name="M:StockSharp.Logging.BaseLogSource`1.DisposeManaged">
            <summary>
            Освободить занятые ресурсы.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.BaseLogSource`1.Id">
            <summary>
            Уникальный идентификатор источника.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.BaseLogSource`1.Name">
            <summary>
            Название.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.BaseLogSource`1.Parent">
            <summary>
            Родитель.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.BaseLogSource`1.LogLevel">
            <summary>
            Уровень логирования. По-умолчанию установлено в <see cref="F:StockSharp.Logging.LogLevels.Inherit"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.BaseLogSource`1.CurrentTime">
            <summary>
            Текущее время, которое будет передано в <see cref="P:StockSharp.Logging.LogMessage.Time"/>.
            </summary>
        </member>
        <member name="E:StockSharp.Logging.BaseLogSource`1.Log">
            <summary>
            Событие нового отладочного сообщения.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.BaseLogReceiver`1.#ctor">
            <summary>
            Инициализировать <see cref="T:StockSharp.Logging.BaseLogReceiver`1"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Logging.Log4NetLogger">
            <summary>
            Вспомогательный класс для логирования сообщений, основанный на log4net.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.Log4NetLogger.#ctor(System.String)">
            <summary>
            Создать <see cref="T:StockSharp.Logging.Log4NetLogger"/>.
            </summary>
            <param name="configFile">Путь к конфигурационному файлу log4net.</param>
        </member>
        <member name="M:StockSharp.Logging.Log4NetLogger.Info(System.String,System.String)">
            <summary>
             Отравить информационное сообщение.
            </summary>
            <param name="message">Текст сообщения.</param>
            <param name="source">Источник сообщения.</param>
        </member>
        <member name="M:StockSharp.Logging.Log4NetLogger.Warning(System.String,System.String)">
            <summary>
             Отправить сообщение-предупреждение.
            </summary>
            <param name="message">Текст сообщения.</param>
            <param name="source">Источник сообщения.</param>
        </member>
        <member name="M:StockSharp.Logging.Log4NetLogger.Error(System.String,System.String)">
            <summary>
             Отправить сообщение об ошибке.
            </summary>
            <param name="message">Текст сообщения.</param>
            <param name="source">Источник сообщения.</param>
        </member>
        <member name="M:StockSharp.Logging.Log4NetLogger.Debug(System.String,System.String)">
            <summary>
             Отправить отладочное сообщение.
            </summary>
            <param name="message">Текст сообщения.</param>
            <param name="source">Источник сообщения.</param>
        </member>
        <member name="M:StockSharp.Logging.Log4NetLogger.OnWriteMessage(StockSharp.Logging.LogMessage)">
            <summary>
            Записать сообщение.
            </summary>
            <param name="message">Отладочное сообщение.</param>
        </member>
        <member name="T:StockSharp.Logging.Log4NetLogListener">
            <summary>
            Логгер, отсылающий сообщения в <see cref="T:StockSharp.Logging.Log4NetLogger"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.Log4NetLogListener.#ctor">
            <summary>
            Создать <see cref="T:StockSharp.Logging.Log4NetLogListener"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.Log4NetLogListener.#ctor(System.String)">
            <summary>
            Создать <see cref="T:StockSharp.Logging.Log4NetLogListener"/>.
            </summary>
            <param name="configFile">Путь к конфигурационному файлу log4net.</param>
        </member>
        <member name="M:StockSharp.Logging.Log4NetLogListener.#ctor(StockSharp.Logging.Log4NetLogger)">
            <summary>
            Создать <see cref="T:StockSharp.Logging.Log4NetLogListener"/>.
            </summary>
            <param name="logger">Вспомогательный класс для логирования сообщений, основанный на log4net.</param>
        </member>
        <member name="T:StockSharp.Logging.LoggingHelper">
            <summary>
            Вспомогательный класс для работы с <see cref="T:StockSharp.Logging.ILogSource"/>. 
            </summary>
        </member>
        <member name="M:StockSharp.Logging.LoggingHelper.SyncMarketTime(System.Int32)">
            <summary>
            Синхронизировать <see cref="P:StockSharp.Logging.LoggingHelper.NowOffset"/> между локальным временем на компьютере и NTP сервером в интернете.
            </summary>
            <param name="timeout">Таймаут синхронизации в милисекундах.</param>
        </member>
        <member name="M:StockSharp.Logging.LoggingHelper.AddInfoLog(StockSharp.Logging.ILogReceiver,System.Func{System.String})">
            <summary>
            Записать сообщение в лог.
            </summary>
            <param name="receiver">Получатель логов.</param>
            <param name="getMessage">Функция, возвращающая текст для <see cref="P:StockSharp.Logging.LogMessage.Message"/>.</param>
        </member>
        <member name="M:StockSharp.Logging.LoggingHelper.AddWarningLog(StockSharp.Logging.ILogReceiver,System.Func{System.String})">
            <summary>
            Записать предупреждение в лог.
            </summary>
            <param name="receiver">Получатель логов.</param>
            <param name="getMessage">Функция, возвращающая текст для <see cref="P:StockSharp.Logging.LogMessage.Message"/>.</param>
        </member>
        <member name="M:StockSharp.Logging.LoggingHelper.AddErrorLog(StockSharp.Logging.ILogReceiver,System.Func{System.String})">
            <summary>
            Записать ошибку в лог.
            </summary>
            <param name="receiver">Получатель логов.</param>
            <param name="getMessage">Функция, возвращающая текст для <see cref="P:StockSharp.Logging.LogMessage.Message"/>.</param>
        </member>
        <member name="M:StockSharp.Logging.LoggingHelper.AddLog(StockSharp.Logging.ILogReceiver,StockSharp.Logging.LogLevels,System.Func{System.String})">
            <summary>
            Записать сообщение в лог.
            </summary>
            <param name="receiver">Получатель логов.</param>
            <param name="level">Уровень лог-сообщения.</param>
            <param name="getMessage">Функция, возвращающая текст для <see cref="P:StockSharp.Logging.LogMessage.Message"/>.</param>
        </member>
        <member name="M:StockSharp.Logging.LoggingHelper.AddInfoLog(StockSharp.Logging.ILogReceiver,System.String,System.Object[])">
            <summary>
            Записать сообщение в лог.
            </summary>
            <param name="receiver">Получатель логов.</param>
            <param name="message">Текстовое сообщение.</param>
            <param name="args">Параметры текстового сообщения.
            Используются в случае, если message является форматирующей строкой.
            Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])"/>.</param>
        </member>
        <member name="M:StockSharp.Logging.LoggingHelper.AddDebugLog(StockSharp.Logging.ILogReceiver,System.String,System.Object[])">
            <summary>
            Записать отладку в лог.
            </summary>
            <param name="receiver">Получатель логов.</param>
            <param name="message">Текстовое сообщение.</param>
            <param name="args">Параметры текстового сообщения.
            Используются в случае, если message является форматирующей строкой.
            Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])"/>.</param>
        </member>
        <member name="M:StockSharp.Logging.LoggingHelper.AddWarningLog(StockSharp.Logging.ILogReceiver,System.String,System.Object[])">
            <summary>
            Записать предупреждение в лог.
            </summary>
            <param name="receiver">Получатель логов.</param>
            <param name="message">Текстовое сообщение.</param>
            <param name="args">Параметры текстового сообщения.
            Используются в случае, если message является форматирующей строкой.
            Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])"/>.</param>
        </member>
        <member name="M:StockSharp.Logging.LoggingHelper.AddErrorLog(StockSharp.Logging.ILogReceiver,System.Exception)">
            <summary>
            Записать ошибку в лог.
            </summary>
            <param name="receiver">Получатель логов.</param>
            <param name="exception">Описание ошибки.</param>
        </member>
        <member name="M:StockSharp.Logging.LoggingHelper.AddErrorLog(StockSharp.Logging.ILogReceiver,System.String,System.Object[])">
            <summary>
            Записать ошибку в лог.
            </summary>
            <param name="receiver">Получатель логов.</param>
            <param name="message">Текстовое сообщение.</param>
            <param name="args">Параметры текстового сообщения.
            Используются в случае, если message является форматирующей строкой.
            Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])"/>.</param>
        </member>
        <member name="M:StockSharp.Logging.LoggingHelper.LogError(System.Exception)">
            <summary>
            Записать ошибку в <see cref="P:StockSharp.Logging.LogManager.Application"/>.
            </summary>
            <param name="error">Ошибка.</param>
        </member>
        <member name="P:StockSharp.Logging.LoggingHelper.Now">
            <summary>
            Текущее время.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.LoggingHelper.NowOffset">
            <summary>
            Временное смещение. Неоходимо устанавливать, когда торговая программа работает с неточными настройками локального времени.
            Значение <see cref="P:StockSharp.Logging.LoggingHelper.Now"/> будет корректироваться в зависимости от установленного значения.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.LoggingHelper.TimeZoneOffset">
            <summary>
            Временное смещение временной зоны.
            </summary>
        </member>
        <member name="T:StockSharp.Logging.LogLevels">
            <summary>
            Уровни лог-сообщений <see cref="T:StockSharp.Logging.LogMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Logging.LogLevels.Inherit">
            <summary>
            Использовать уровень логирования контейнера.
            </summary>
        </member>
        <member name="F:StockSharp.Logging.LogLevels.Debug">
            <summary>
            Отладочное сообщение, информация, предупреждения и ошибки.
            </summary>
        </member>
        <member name="F:StockSharp.Logging.LogLevels.Info">
            <summary>
            Информация, предупреждения и ошибки.
            </summary>
        </member>
        <member name="F:StockSharp.Logging.LogLevels.Warning">
            <summary>
            Предупреждения и ошибки.
            </summary>
        </member>
        <member name="F:StockSharp.Logging.LogLevels.Error">
            <summary>
            Только ошибки.
            </summary>
        </member>
        <member name="F:StockSharp.Logging.LogLevels.Off">
            <summary>
            Логи выключены.
            </summary>
        </member>
        <member name="T:StockSharp.Logging.LogManager">
            <summary>
            Менеджер логирования сообщений, который мониторит событие <see cref="E:StockSharp.Logging.ILogSource.Log"/> и перенаправляет сообщения в <see cref="P:StockSharp.Logging.LogManager.Listeners"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.LogManager.#ctor">
            <summary>
            Создать <see cref="T:StockSharp.Logging.LogManager"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.LogManager.DisposeManaged">
            <summary>
            Освободить ресурсы.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.LogManager.Application">
            <summary>
            Получатель логов уровня всего приложения.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.LogManager.Listeners">
            <summary>
            Логгеры сообщений, приходящие от <see cref="P:StockSharp.Logging.LogManager.Sources"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.LogManager.Sources">
            <summary>
            Источники логов, у которых слушается событие <see cref="E:StockSharp.Logging.ILogSource.Log"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.LogManager.FlushInterval">
            <summary>
            Интервал передачи накопленных от <see cref="P:StockSharp.Logging.LogManager.Sources"/> сообщений в <see cref="P:StockSharp.Logging.LogManager.Listeners"/>.
            По-умолчанию равно 500 млс.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.LogManager.MaxMessageCount">
            <summary>
            Максимальное количество накопленных от <see cref="P:StockSharp.Logging.LogManager.Sources"/> сообщений, прежде чем они будут отправлены в <see cref="P:StockSharp.Logging.LogManager.Listeners"/>.
            По умолчанию равно 1000.
            </summary>
            <remarks>Значение 0 означает бесконечный размер буфера. Значение -1 означает отсутствие буферизации.</remarks>
        </member>
        <member name="T:StockSharp.Logging.LogMessage">
            <summary>
            Отладочное сообщение.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.LogMessage.#ctor(StockSharp.Logging.ILogSource,System.DateTime,StockSharp.Logging.LogLevels,System.String,System.Object[])">
            <summary>
            Создать <see cref="T:StockSharp.Logging.LogMessage"/>.
            </summary>
            <param name="source">Источник логов.</param>
            <param name="time">Время создания сообщения.</param>
            <param name="level">Уровень лог-сообщения.</param>
            <param name="message">Текстовое сообщение.</param>
            <param name="args">Параметры текстового сообщения.
            Используются в случае, если message является форматирующей строкой.
            Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])"/>.</param>
        </member>
        <member name="M:StockSharp.Logging.LogMessage.#ctor(StockSharp.Logging.ILogSource,System.DateTime,StockSharp.Logging.LogLevels,System.Func{System.String})">
            <summary>
            Создать <see cref="T:StockSharp.Logging.LogMessage"/>.
            </summary>
            <param name="source">Источник логов.</param>
            <param name="time">Время создания сообщения.</param>
            <param name="level">Уровень лог-сообщения.</param>
            <param name="getMessage">Функция, возвращающая текст для <see cref="P:StockSharp.Logging.LogMessage.Message"/>.</param>
        </member>
        <member name="M:StockSharp.Logging.LogMessage.ToString">
            <summary>
            Получить строковое представление.
            </summary>
            <returns>Строковое представление.</returns>
        </member>
        <member name="P:StockSharp.Logging.LogMessage.Source">
            <summary>
            Источник логов.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.LogMessage.Time">
            <summary>
            Время создания сообщения.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.LogMessage.Level">
            <summary>
            Уровень лог-сообщения.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.LogMessage.Message">
            <summary>
            Сообщение.
            </summary>
        </member>
        <member name="T:StockSharp.Logging.SmsLogListener">
            <summary>
            Логгер, отсылающий данные через SMS с помощью Google Calendar. 
            </summary>
        </member>
        <member name="M:StockSharp.Logging.SmsLogListener.#ctor(System.String,System.String)">
            <summary>
            Создать <see cref="T:StockSharp.Logging.SmsLogListener"/>.
            </summary>
            <param name="login">Логин в Google.</param>
            <param name="password">Пароль в Google.</param>
        </member>
        <member name="M:StockSharp.Logging.SmsLogListener.#ctor(System.String,System.String,System.String)">
            <summary>
            Создать <see cref="T:StockSharp.Logging.SmsLogListener"/>.
            </summary>
            <param name="login">Логин в Google.</param>
            <param name="password">Пароль в Google.</param>
            <param name="appName">Название сервиса.</param>
        </member>
        <member name="M:StockSharp.Logging.SmsLogListener.CreateGoogleEntry(StockSharp.Logging.LogMessage)">
            <summary>
            Создать Google сообщение.
            </summary>
            <param name="message">Отладочное сообщение.</param>
            <returns>Google сообщение.</returns>
        </member>
        <member name="M:StockSharp.Logging.SmsLogListener.OnWriteMessage(StockSharp.Logging.LogMessage)">
            <summary>
            Записать сообщение.
            </summary>
            <param name="message">Отладочное сообщение.</param>
        </member>
        <member name="T:StockSharp.Logging.SoundLogListener">
            <summary>
            Логгер, проигрывающий музыку при получении сообщения.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.SoundLogListener.#ctor(System.String)">
            <summary>
            Создать <see cref="T:StockSharp.Logging.SoundLogListener"/>.
            </summary>
            <param name="fileName">Путь к файлу со звуком, которое будет проиграно при получении сообщения.</param>
        </member>
        <member name="M:StockSharp.Logging.SoundLogListener.OnWriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
            <summary>
            Записать сообщения.
            </summary>
            <param name="messages">Отладочные сообщения.</param>
        </member>
        <member name="P:StockSharp.Logging.SoundLogListener.FileName">
            <summary>
            Путь к файлу со звуком, которое будет проиграно при получении сообщения.
            </summary>
        </member>
        <member name="T:StockSharp.Logging.SpeechLogListener">
            <summary>
            Логгер, произносящий слова при получении сообщения.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.SpeechLogListener.#ctor">
            <summary>
            Создать <see cref="T:StockSharp.Logging.SpeechLogListener"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.SpeechLogListener.OnWriteMessages(System.Collections.Generic.IEnumerable{StockSharp.Logging.LogMessage})">
            <summary>
            Записать сообщения.
            </summary>
            <param name="messages">Отладочные сообщения.</param>
        </member>
        <member name="P:StockSharp.Logging.SpeechLogListener.Volume">
            <summary>
            Уровень громкости.
            </summary>
        </member>
        <member name="T:StockSharp.Logging.UnhandledExceptionSource">
            <summary>
            Источник логов, отсылающий информацию о необработанных ошибках <see cref="E:System.AppDomain.UnhandledException"/> и <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.UnhandledExceptionSource.#ctor">
            <summary>
            Создать <see cref="T:StockSharp.Logging.UnhandledExceptionSource"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Logging.UnhandledExceptionSource.DisposeManaged">
            <summary>
            Удалить занятые ресурсы.
            </summary>
        </member>
        <member name="P:StockSharp.Logging.UnhandledExceptionSource.Name">
            <summary>
            Название.
            </summary>
        </member>
    </members>
</doc>
