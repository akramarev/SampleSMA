<?xml version="1.0"?>
<doc>
  <assembly>
    <name>StockSharp.Algo</name>
  </assembly>
  <members>
    <member name="T:StockSharp.Algo.TransactionIdGenerator">
      <summary>
            Базовый генератор идентификаторов транзакций.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.TransactionIdGenerator.GetNextId">
      <summary>
            Получить следующий номер идентификатора транзакции.
            </summary>
      <returns>Следующий номер идентификатора транзакции.</returns>
    </member>
    <member name="T:StockSharp.Algo.IncrementTransactionIdGenerator">
      <summary>
            Генератор идентификаторов транзакций, основанный на автоматическом увеличении <see cref="P:StockSharp.Algo.IncrementTransactionIdGenerator.CurrentTransactionId" /> на 1.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.IncrementTransactionIdGenerator.#ctor">
      <summary>
            Создать генератор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.IncrementTransactionIdGenerator.GetNextId">
      <summary>
            Получить следующий номер идентификатора транзакции.
            </summary>
      <returns>Следующий номер идентификатора транзакции.</returns>
    </member>
    <member name="P:StockSharp.Algo.IncrementTransactionIdGenerator.CurrentTransactionId">
      <summary>
            Номер текущей транзакции. Первоначальное значение равно количество миллисекунд, прошедшее с начала дня.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.MillisecondTransactionIdGenerator">
      <summary>
            Генератор идентификаторов транзакций, основанный на миллисекундах. Каждый следующий вызов метода <see cref="M:StockSharp.Algo.MillisecondTransactionIdGenerator.GetNextId" />
            будет возвращать количество миллисекунд, прошедшее с начала создания генератора.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.MillisecondTransactionIdGenerator.#ctor">
      <summary>
            Создать генератор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.MillisecondTransactionIdGenerator.GetNextId">
      <summary>
            Получить следующий номер идентификатора транзакции.
            </summary>
      <returns>Следующий номер идентификатора транзакции.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.MyTradeList">
      <summary>
            Класс для представления в виде списка собственных сделок, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.BaseStorageEntityList`1">
      <summary>
            Базовый класс для представления в виде списка торговых объектов, хранящихся в базе данных.
            </summary>
      <typeparam name="T">Тип торгового объекта (например, <see cref="T:StockSharp.BusinessEntities.Security" /> или <see cref="T:StockSharp.BusinessEntities.MyTrade" />).</typeparam>
    </member>
    <member name="T:StockSharp.Algo.Storages.IStorageEntityList`1">
      <summary>
            Интерфейс для представления в виде списка торговых объектов, полученных из внешнего хранилища.
            </summary>
      <typeparam name="T">Тип торгового объекта (например, <see cref="T:StockSharp.BusinessEntities.Security" /> или <see cref="T:StockSharp.BusinessEntities.MyTrade" />).</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageEntityList`1.ReadById(System.Object)">
      <summary>
            Загрузить торговый объект по идентификатору.
            </summary>
      <param name="id">Идентификатор.</param>
      <returns>Торговый объект. Если по идентификатору объект не был найден, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageEntityList`1.Save(`0)">
      <summary>
            Сохранить торговый объект.
            </summary>
      <param name="entity">Торговый объект.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Storages.BaseStorageEntityList`1" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.Save(`0)">
      <summary>
            Сохранить торговый объект.
            </summary>
      <param name="entity">Торговый объект.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.MyTradeList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.MyTradeList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Testing.EmulationStates">
      <summary>
            Состояния <see cref="T:StockSharp.Algo.Testing.IEmulationTrader" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Stopped">
      <summary>
            Остановлен.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Stopping">
      <summary>
            Останавливается.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Started">
      <summary>
            Работает.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Suspended">
      <summary>
            Приостановлен.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.IEmulationTrader">
      <summary>
            Интерфейс шлюза-эмулятора биржи.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.IEmulationTrader.Start(System.DateTime,System.DateTime)">
      <summary>
            Начать эмуляцию.
            </summary>
      <param name="startTime">Время в истории, с которого начать эмуляцию.</param>
      <param name="stopTime">Время в истории, на котором закончить эмуляцию.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.IEmulationTrader.Stop">
      <summary>
            Остановить эмуляцию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.IEmulationTrader.Suspend">
      <summary>
            Приостановить эмуляцию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.IEmulationTrader.Resume">
      <summary>
            Возобновить эмуляцию.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IEmulationTrader.State">
      <summary>
            Состояние эмулятора.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IEmulationTrader.StateChanged">
      <summary>
            Событие о изменении состояния эмулятора <see cref="P:StockSharp.Algo.Testing.IEmulationTrader.State" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.TheorPriceQuotingStrategy">
      <summary>
            Котирование опционов по теоретической цене.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy">
      <summary>
            Котирование по лучшей цене. Для данного котирования указывается отступ от лучшей цены <see cref="P:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy.BestPriceOffset" />,
            на который может уйти котируемая заявка.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.QuotingStrategy">
      <summary>
            Базовая стратегия на котирование.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Strategy">
      <summary>
            Базовый класс для всех торговых стратегий.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Logging.ILogReceiver">
      <summary>
            Интерфейс получателя логов.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Logging.ILogSource">
      <summary>
            Интерфейс источника логов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Logging.ILogSource.Id">
      <summary>
            Уникальный идентификатор источника.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Logging.ILogSource.Name">
      <summary>
            Имя источника.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Logging.ILogSource.Parent">
      <summary>
            Родительский источник логов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Logging.ILogSource.Childs">
      <summary>
            Дочерние источники логов.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Logging.ILogSource.Log">
      <summary>
            Событие нового отладочного сообщения.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.ILogReceiver.AddLog(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Записать сообщение в лог.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.IPersistable">
      <summary>
            Интерфейс, описывающий сохраняемый объект.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IPersistable.Load(StockSharp.Algo.Storages.SettingsStorage)">
      <summary>
            Загрузить настройки.
            </summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IPersistable.Save(StockSharp.Algo.Storages.SettingsStorage)">
      <summary>
            Сохранить настройки.
            </summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Strategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnChildStopped(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Обработчик остановки дочерней стратегии.
            </summary>
      <param name="childStrategy">Дочерняя стратегия.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStarting">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.Strategies.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopping">
      <summary>
            Метод вызывается тогда, когда состояние процесса <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.Strategies.ProcessStates.Stopping" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopped">
      <summary>
            Метод вызывается тогда, когда состояние процесса <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.Strategies.ProcessStates.Stopped" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку и автоматически добавить для запуска механизмов расчета прибыли-убытка и проскальзывания.
            </summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку и автоматически добавить для запуска механизмов расчета прибыли-убытка и проскальзывания.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять и на основе нее зарегистрировать новую.</param>
      <param name="newOrder">Новая заявка.</param>
      <returns>Новая заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.AddLog(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Записать сообщение в лог.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Start">
      <summary>
            Запустить торговый алгоритм.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Stop">
      <summary>
            Остановить торговый алгоритм.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.SuspendRules">
      <summary>
            Приостановить исполнение правил до следующего восстановления через метод <see cref="M:StockSharp.Algo.Strategies.Strategy.ResumeRules" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ResumeRules">
      <summary>
            Восстановить исполнение правил, остановленное через метод <see cref="M:StockSharp.Algo.Strategies.Strategy.SuspendRules" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.SuspendRules(System.Action)">
      <summary>
            Обработать правила в приостановленном режиме (<see cref="P:StockSharp.Algo.Strategies.Strategy.IsRulesSuspended" /> == true).
            После окончания работы метода правило возобновляют свою активность.
            </summary>
      <param name="action">Действие, которое необходимо обработать при остановленных правилах. Например, добавить одновременно несколько правил.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnSecurityChanged">
      <summary>
            Метод, который вызывается при изменении инструмента стратегии.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnPortfolioChanged">
      <summary>
            Метод, который вызывается при изменении портфеля стратегии.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnPositionsChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position})">
      <summary>
            Метод, который вызывается при изменении позиций стратегии.
            </summary>
      <param name="positions">Измененные позиции стратегии.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Метод, который вызывается при появлении новых сделок стратегии.
            </summary>
      <param name="trades">Новые сделки стратегии.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderChanged(StockSharp.BusinessEntities.Order)">
      <summary>
            Метод, который вызывается при изменении заявки стратегии.
            </summary>
      <param name="order">Измененная заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderChanged(StockSharp.BusinessEntities.Order)">
      <summary>
            Метод, который вызывается при изменении стоп-заявки стратегии.
            </summary>
      <param name="order">Измененная стоп-заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Метод, который вызывается при изменении заявок стратегии.
            </summary>
      <param name="orders">Измененные заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Метод, который вызывается при изменении стоп-заявок стратегии.
            </summary>
      <param name="orders">Измененные стоп-заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Метод, который вызывается при ошибке регистрации заявки стратегии.
            </summary>
      <param name="fail">Ошибка регистрации заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Метод, который вызывается при ошибке регистрации стоп-заявки стратегии.
            </summary>
      <param name="fail">Ошибка регистрации стоп-заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ProcessNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},System.Boolean)">
      <summary>
            Обработать поступившие от шлюза <see cref="P:StockSharp.Algo.Strategies.Strategy.Trader" /> заявки, и найти из них те, что принадлежат стратегии.
            </summary>
      <param name="newOrders">Новые заявки.</param>
      <param name="isStopOrders">Признак того, пришли ли это обычные заявки или стоп-заявки.</param>
      <returns>Заявки, принадлежащие стратегии.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Load(StockSharp.Algo.Storages.SettingsStorage)">
      <summary>
            Загрузить настройки.
            </summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Save(StockSharp.Algo.Storages.SettingsStorage)">
      <summary>
            Сохранить настройки.
            </summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.NotifyPropertyChanged(System.String)">
      <summary>
            Вызвать событие изменения параметра.
            </summary>
      <param name="info">Название параметра.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.CancelActiveOrders">
      <summary>
            Отменить все активные заявки (стоп и обычные).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnError(System.Exception)">
      <summary>
            Обработка ошибки, полученной в результате работы стратегии.
            </summary>
      <param name="error">Ошибка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ToString">
      <summary>
            Получить описание стратегии в виде строки.
            </summary>
      <returns>
            Описание стратегии.
            </returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Clone">
      <summary>
            Создать копию стратегии со всеми настройками.
            </summary>
      <returns>Копия стратегии.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnEquals(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Сравнить стратегию на равенство.
            </summary>
      <param name="other">Другая стратегия, с которой необходимо сравнивать.</param>
      <returns>True, если стратегии равны. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.OnlyLogEvent">
      <summary>
            Подписаться только на Log события.
            </summary>
      <remarks>
            Данный флаг необходим для StrategyMonitorWindow.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Id">
      <summary>
            Уникальный идентификатор стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Name">
      <summary>
            Название стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Trader">
      <summary>
            Шлюз к торговой системе.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Portfolio">
      <summary>
            Портфель.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Security">
      <summary>
            Инструмент.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.SlippageManager">
      <summary>
            Менеджер проскальзывания. Учитывает сделки данной стратегии, а так же ее дочерних стратегий <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.PnLManager">
      <summary>
            Менеджер прибыли-убытка. Учитывает сделки данной стратегии, а так же ее дочерних стратегий <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.PositionManager">
      <summary>
            Менеджер позиции. Учитывает сделки данной стратегии, а так же ее дочерних стратегий <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.LatencyManager">
      <summary>
            Менеджер задержки. Учитывает заявки данной стратегии, а так же ее дочерних стратегий <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.EquityManager">
      <summary>
            Менеджер построения кривой эквити.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.MaxErrorCount">
      <summary>
            Максимальное количество ошибок, которое должна получить стратегия прежде, чем она остановил работу.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ErrorCount">
      <summary>
            Текущее количество ошибок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ProcessState">
      <summary>
            Состояние торгового алгоритма.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.ProcessStateChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Orders">
      <summary>
            Заявки, зарегистрированные в рамках стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.StopOrders">
      <summary>
            Стоп-заявки, зарегистрированные в рамках стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.MyTrades">
      <summary>
            Cделки, прошедшие в течении работы стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.OrderFails">
      <summary>
            Заявки с ошибками, зарегистрированные в рамках стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Volume">
      <summary>
            Объем, которым необходимо оперировать.
            </summary>
      <remarks>
            Если значение установлено в 0, то параметр игнорируется.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ErrorState">
      <summary>
            Состояние.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ParentStrategy">
      <summary>
            Родительская стратегия.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies">
      <summary>
            Дочерние торговые стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.TotalWorkingTime">
      <summary>
            Общее время работы стратегии с вычетом временных отрезков, когда стратегия останавливалась.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.RemoveChildStrategies">
      <summary>
            Удалять дочерние стратегии, закончившие свою работу (состояние их <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> стало равным <see cref="F:StockSharp.Algo.Strategies.ProcessStates.Stopped" />).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Rules">
      <summary>
            Зарегистрированные правила.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.IsRulesSuspended">
      <summary>
            Приостановлено ли исполнение правил.
            </summary>
      <remarks>
            Приостановка правил происходит через метод <see cref="M:StockSharp.Algo.Strategies.Strategy.SuspendRules" />.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.EnableRulesLog">
      <summary>
            Включено ли логирование для всех добавляемых правил. По-умолчанию, значение равно false.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.NewOrder">
      <summary>
            Событие о появлении новой заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.NewStopOrder">
      <summary>
            Событие о появлении новой стоп-заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderChanged">
      <summary>
            Событие об изменении заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderChanged">
      <summary>
            Событие об изменении стоп-заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderFailed">
      <summary>
            Событие об ошибке, связанной с заявкой.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderFailed">
      <summary>
            Событие об ошибке, связанной с заявкой.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.NewMyTrades">
      <summary>
            Событие о появлении новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.Log">
      <summary>
            Событие отладочной информации.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.SecurityChanged">
      <summary>
            Событие изменения инструмента стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PortfolioChanged">
      <summary>
            Событие изменения портфеля стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PositionsChanged">
      <summary>
            Событие изменения позиций стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.Error">
      <summary>
            Событие возникновения ошибки в стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PropertyChanged">
      <summary>
            Событие изменения параметров стратегии.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.IStrategyChildStrategyList">
      <summary>
            Коллекция дочерних стратегий.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.QuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.#ctor(StockSharp.BusinessEntities.Order)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.QuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.NeedFinish">
      <summary>
            Можно ли остановить котирование.
            </summary>
      <remarks>
            По умолчанию, котирование останавливается тогда, когда все контракты реализованы и <see cref="P:StockSharp.Algo.Strategies.QuotingStrategy.LeftVolume" /> равно 0.
            </remarks>
      <returns>True, можно, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.NeedQuoting(System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
      <summary>
            Нужно ли котировать заявку.
            </summary>
      <param name="currentPrice">Текущая цена.</param>
      <param name="currentVolume">Текущий объем.</param>
      <param name="newPrice">Новая лучшая цена.</param>
      <param name="newVolume">Новый объем.</param>
      <returns>True, нужно. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.GetNewPrice">
      <summary>
            Получить новую цену для заявки.
            </summary>
      <returns>Новая цена заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.GetNewVolume">
      <summary>
            Получить новый объем для заявки.
            </summary>
      <returns>Новый объем для заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.GetNotificationRules">
      <summary>
            Получить список правил, на которые будет реагировать котирование.
            </summary>
      <returns>Список правил.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.OnStarting">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.Strategies.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.ProcessQuoting">
      <summary>
            Инициировать котирование.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.NeedStop(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Нужно ли остановить котирование из-за ошибки регистрации новой заявки.
            </summary>
      <param name="fail">Описание ошибки.</param>
      <returns>True, если нужно остановить котирование. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.RegisterQuotingOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать котируемую заявку.
            </summary>
      <param name="order">Котируемая заявка.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.QuotingDirection">
      <summary>
            Направление котирования.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.QuotingVolume">
      <summary>
            Объем, который необходимо скотировать.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.QuotingOrders">
      <summary>
            Заявки, с которыми работает в данный момент котировщик.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.MaxReRegisterCount">
      <summary>
            Максимальное количество изменений заявки, при превышении которого алгоритм будет остановлен.
            </summary>
      <remarks>
            Значение по умолчанию равно <see cref="F:System.Int32.MaxValue" />.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.CurrentReRegisterCount">
      <summary>
            Текущее количество изменений заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.MaxRegisterFailCount">
      <summary>
            Максимальное количество ошибок регистрации заявки, при превышении которого алгоритм будет остановлен.
            </summary>
      <remarks>
            Значение по умолчанию равно 100.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.CurrentRegisterFailCount">
      <summary>
            Текущее количество ошибок регистрации заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.LeftVolume">
      <summary>
            Объем, который осталось реализовать до завершения котирования.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.TimeOut">
      <summary>
            Ограничение по времени, в течении которого должно отработать котирование.
            Если весь объем <see cref="P:StockSharp.Algo.Strategies.QuotingStrategy.QuotingVolume" /> не будет реализован к этому времени, то стратегия остановит свою работу.
            </summary>
      <remarks>
            По-умолчанию ограничение выключено.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.CurrentBestPrice">
      <summary>
            Текущая лучшая цена.
            </summary>
      <remarks>
            Если значение равно null, то котирование еще не определяло лучшую цену.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.FilteredQuotes">
      <summary>
            Отфильтрованные с помощью <see cref="M:StockSharp.Algo.TraderHelper.GetFilteredQuotes(StockSharp.BusinessEntities.Security,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})" />
            котировки стакана (биды или оффера в зависимости от значения свойства <see cref="P:StockSharp.Algo.Strategies.QuotingStrategy.QuotingDirection" />).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy.#ctor(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <param name="bestPriceOffset">Отступ от лучшей цены, на который может уйти котируемая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy.NeedQuoting(System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
      <summary>
            Нужно ли котировать заявку.
            </summary>
      <param name="currentPrice">Текущая цена.</param>
      <param name="currentVolume">Текущий объем.</param>
      <param name="newPrice">Новая лучшая цена.</param>
      <param name="newVolume">Новый объем.</param>
      <returns>True, нужно. Иначе, false.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy.BestPriceOffset">
      <summary>
            Отступ от лучшей цены, на который может уйти котируемая заявка.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TheorPriceQuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.TheorPriceQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
      <param name="theorPriceOffset">Отклонение от теоретической цены.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TheorPriceQuotingStrategy.#ctor(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Unit,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.TheorPriceQuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <param name="bestPriceOffset">Отступ от лучшей цены, на который может уйти котируемая заявка.</param>
      <param name="theorPriceOffset">Отклонение от теоретической цены.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TheorPriceQuotingStrategy.GetNewPrice">
      <summary>
            Получить новую цену для заявки.
            </summary>
      <returns>Новая цена заявки.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TheorPriceQuotingStrategy.TheorPriceOffset">
      <summary>
            Отклонение от теоретической цены.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.BasketTrader">
      <summary>
            Шлюз-агрегатор, позволяющий оперировать одновременно несколькими шлюзами, подключенных к разным торговым системам.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.#ctor">
      <summary>
            Создать шлюз-агрегатор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.Connect">
      <summary>
            Подключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.Disconnect">
      <summary>
            Отключиться от торговой системы.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.Reconnect">
      <summary>
            Переподключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.StartExport">
      <summary>
            Запустить экспорт данных из торговой системы в программу (получение портфелей, инструментов, заявок и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.StopExport">
      <summary>
            Остановить экспорт данных из торговой системы в программу, запущенный через <see cref="M:StockSharp.BusinessEntities.ITrader.StartExport" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.ReStartExport">
      <summary>
            Перезапустить экспорт данных из торговой системы через методы <see cref="M:StockSharp.BusinessEntities.ITrader.StopExport" /> и <see cref="M:StockSharp.BusinessEntities.ITrader.StartExport" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.GetPosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security)">
      <summary>
            Найти позицию по портфелю и инструменту.
            </summary>
      <param name="portfolio">Портфель, по которому нужно найти позицию.</param>
      <param name="security">Инструмент, по которому нужно найти позицию.</param>
      <returns>Позиция. Если позиции не найдена, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.GetMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить стакан котировок.
            </summary>
      <param name="security">Инструмент, по которому нужно получить стакан.</param>
      <returns>Найденный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку на бирже.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку на бирже.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять.</param>
      <param name="newOrder">Новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,System.Decimal,System.Decimal)">
      <summary>
            Перерегистрировать заявку на бирже.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять и на основе нее зарегистрировать новую.</param>
      <param name="price">Цена новой заявки.</param>
      <param name="volume">Объем новой заявки.</param>
      <returns>Новая заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку на бирже.
            </summary>
      <param name="order">Заявка, которую нужно отменить.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.CancelOrders(System.Nullable{System.Boolean},StockSharp.BusinessEntities.Portfolio,System.Nullable{StockSharp.BusinessEntities.OrderDirections},System.String,StockSharp.BusinessEntities.Security)">
      <summary>
            Отменить группу заявок на бирже по фильтру.
            </summary>
      <param name="isStopOrder">True, если нужно отменить только стоп-заявки, false - если только обычный и null - если оба типа.</param>
      <param name="portfolio">Портфель. Если значение равно null, то портфель не попадает в фильтр снятия заявок.</param>
      <param name="direction">Направление заявки. Если значение равно null, то направление не попадает в фильтр снятия заявок.</param>
      <param name="classCode">Код класса. Если переданная строка пустая, то код не попадает в фильтр снятия заявок.</param>
      <param name="security">Инструмент. Если значение равно null, то инструмент не попадает в фильтр снятия заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.RegisterQuotes(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать котировки (стакан) по инструменту.
            Значение котировок можно получить через метод <see cref="M:StockSharp.BusinessEntities.ITrader.GetMarketDepth(StockSharp.BusinessEntities.Security)" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать котировки.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.UnRegisterQuotes(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение котировок по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение котировок.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.RegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать сделки (тиковые данные) по инструменту. Новые сделки будут приходить через
            событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewTrades" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.UnRegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение сделок (тиковые данные) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.RegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать новую информацию (например, <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" /> или <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.UnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение новой информации.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Начать получать новую информацию по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.UnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Остановить получение новой информации по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.DisposeManaged">
      <summary>
            Освободить ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.SupportUnique">
      <summary>
            Поддерживать ли уникальность данных в пределах всех вложенных шлюзов <see cref="P:StockSharp.Algo.BasketTrader.InnerTraders" />.
            Например, если один и тот же инструмент транслируется из нескольких вложенных шлюзов <see cref="P:StockSharp.Algo.BasketTrader.InnerTraders" />,
            то событие <see cref="E:StockSharp.Algo.BasketTrader.NewSecurities" /> будет вызвано только один раз. По-умолчанию режим выключен.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.SupportTradesUnique">
      <summary>
            Поддерживать ли уникальность сделок в пределах всех вложенных шлюзов <see cref="P:StockSharp.Algo.BasketTrader.InnerTraders" />. По-умолчанию режим включен.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.InnerTraders">
      <summary>
            Шлюзы к торговым системам, с которыми оперирует агрегатор.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.MarketTimeOffset">
      <summary>
            Временное смещение. Неоходимо устанавливать, когда торговая программа работает во временной зоне, отличной от биржевой.
            Значение <see cref="P:StockSharp.BusinessEntities.ITrader.MarketTime" /> будет корректироваться в зависимости от установленного значения.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.MarketTime">
      <summary>
            Получить биржевое время. Значение зависит от <see cref="P:StockSharp.BusinessEntities.ITrader.MarketTimeOffset" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.Securities">
      <summary>
            Список всех загруженных инструментов.
            Вызывать необходимо после того, как пришло событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewSecurities" />.
            Иначе будет возвращено постое множество.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.Orders">
      <summary>
            Получить все заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.StopOrders">
      <summary>
            Получить все стоп-заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.OrderRegisterFails">
      <summary>
            Получить все ошибки при регистрации заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.OrderCancelFails">
      <summary>
            Получить все ошибки при снятии заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.Trades">
      <summary>
            Получить все сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.MyTrades">
      <summary>
            Получить все собственные сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.Portfolios">
      <summary>
            Получить все портфели.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.Positions">
      <summary>
            Получить все позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.IsConnected">
      <summary>
            Проверить соединение.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.IsExportStarted">
      <summary>
            Запущен ли экспорт. Экспорт запускается через метод <see cref="M:StockSharp.Algo.BasketTrader.StartExport" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.IsSupportAtomicReRegister">
      <summary>
            Поддерживается ли перерегистрация заявок через метод <see cref="M:StockSharp.BusinessEntities.ITrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)" />
            в виде одной транзакции.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewMyTrades">
      <summary>
            Событие появления собственных новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewTrades">
      <summary>
            Событие появления всех новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewOrders">
      <summary>
            Событие появления новых заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.OrdersChanged">
      <summary>
            Событие изменения состояния заявок (снята, удовлетворена).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.OrdersRegisterFailed">
      <summary>
            Событие ошибок при регистрации заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.OrdersCancelFailed">
      <summary>
            Событие ошибок при снятии заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.StopOrdersRegisterFailed">
      <summary>
            Событие ошибок при регистрации стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.StopOrdersCancelFailed">
      <summary>
            Событие ошибок при снятии стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewStopOrders">
      <summary>
            Событие появления новых стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.StopOrdersChanged">
      <summary>
            Событие изменения состояния стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewSecurities">
      <summary>
            Событие появления новых инструментов.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.SecuritiesChanged">
      <summary>
            Событие изменения параметров инструментов.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewPortfolios">
      <summary>
            Событие появления новых портфелей.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.PortfoliosChanged">
      <summary>
            Событие изменения параметров портфелей.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewPositions">
      <summary>
            Событие появления новых позиций.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.PositionsChanged">
      <summary>
            Событие изменения параметров позиций.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.QuotesChanged">
      <summary>
            Событие изменения стаканов с котировками.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.Connected">
      <summary>
            Событие успешного подключения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.Disconnected">
      <summary>
            Событие успешного отключения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.ConnectionError">
      <summary>
            Событие ошибки подключения (например, соединения было разорвано).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewDataExported">
      <summary>
            Событие, сигнализирующее о новых экспортируемых данных.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.ProcessDataError">
      <summary>
            Событие, сигнализирующее об ошибке при получении или обработке новых данных с сервера.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.MarketTimeChanged">
      <summary>
            Событие, сигнализирующее об изменении биржевого времени.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Logging.SeparateByDateModes">
      <summary>
            Режими разделения лог файлов по датам.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Logging.SeparateByDateModes.None">
      <summary>
            Не разделять. Разделение выключено.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Logging.SeparateByDateModes.FileName">
      <summary>
            Разделять через добавление к названию файла.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Logging.SeparateByDateModes.SubDirectories">
      <summary>
            Разделять через под директории.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Logging.FileLogListener">
      <summary>
            Логгер, записывающий данные в текстовый файл.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Logging.LogListener">
      <summary>
            Базовый класс, который мониторит событие <see cref="E:StockSharp.Algo.Logging.ILogSource.Log" /> и сохраняет в некое хранилище.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Logging.ILogListener">
      <summary>
            Интерфейс класса, который мониторит событие <see cref="E:StockSharp.Algo.Logging.ILogSource.Log" /> и сохраняет в некое хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.ILogListener.WriteMessage(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Записать сообщение.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.LogListener.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Logging.LogListener" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Logging.LogListener.AllWarningFilter">
      <summary>
            Фильтр, который принимает только сообщения типа <see cref="F:StockSharp.Algo.Logging.ErrorTypes.Warning" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Logging.LogListener.AllErrorFilter">
      <summary>
            Фильтр, который принимает только сообщения типа <see cref="F:StockSharp.Algo.Logging.ErrorTypes.Error" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.LogListener.WriteMessage(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Записать сообщение.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.LogListener.OnWriteMessage(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Записать сообщение.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="P:StockSharp.Algo.Logging.LogListener.Filters">
      <summary>
            Фильтры сообщений, которыми указывается, какие сообщения следует обрабатывать.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.FileLogListener.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.FileLogListener" />. Для каждого <see cref="T:StockSharp.Algo.Logging.ILogSource" /> будет создан отдельный файл с названием, равный <see cref="P:StockSharp.Algo.Logging.ILogSource.Name" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.FileLogListener.#ctor(System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.FileLogListener" />. Все сообщения из <see cref="E:StockSharp.Algo.Logging.ILogSource.Log" /> будут записывать в файл <paramref name="fileName" />.
            </summary>
      <param name="fileName">Название текстового файла, в которое будут писаться сообщения из события <see cref="E:StockSharp.Algo.Logging.ILogSource.Log" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.FileLogListener.OnCreateWriter(System.String)">
      <summary>
            Создать текстового писателя.
            </summary>
      <param name="fileName">Название текстового файла, в которое будут писаться сообщения из события <see cref="E:StockSharp.Algo.Logging.ILogSource.Log" />.</param>
      <returns>Текстовый писатель.</returns>
    </member>
    <member name="M:StockSharp.Algo.Logging.FileLogListener.OnWriteMessage(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Записать сообщение.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.FileLogListener.DisposeManaged">
      <summary>
            Освободить ресурсы и закрыть лог-файл.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Logging.FileLogListener.Encoding">
      <summary>
            Кодировка файла. По умолчанию используется кодировка UTF-8.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Logging.FileLogListener.Append">
      <summary>
            Добавлять ли в файл данные, если он уже существует.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Logging.FileLogListener.LogDirectory">
      <summary>
            Директория, где будет создан файл лога. По умолчанию - директория с исполняемым файлом.
            </summary>
      <remarks>
            Если директория не существует, она будет создана.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Logging.FileLogListener.HierarchicalFileName">
      <summary>
            Делать имена файлов вложенными в зависимости, есть ли у <see cref="P:StockSharp.Algo.Logging.ILogSource.Parent" /> или нет. Название файла для дочернего источника будет по формату
            НазваниеРодителя_НазваниеДочернего. По-умолчанию режим выключен.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Logging.FileLogListener.Extension">
      <summary>
            Расширение лог файлов. По-умолчанию значение равно txt.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Logging.FileLogListener.SeparateByDates">
      <summary>
            Режим разделения лог файлов по датам. По умолчанию режим равен <see cref="F:StockSharp.Algo.Logging.SeparateByDateModes.None" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Logging.DebugLogListener">
      <summary>
            Логгер стратегии, записывающий данные в отладочное окно.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.DebugLogListener.OnWriteMessage(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Записать сообщение.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyRule">
      <summary>
            Правило, активизирующее действие при наступлении рыночного условия.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.StrategyRule" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule.EnableLog(System.Boolean)">
      <summary>
            Включить или выключить логирование.
            </summary>
      <param name="enable">True - включить, false - выключить.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule.Suspend(System.Boolean)">
      <summary>
            Приостановить или возобновить правило.
            </summary>
      <param name="suspend">True - приостановить, false - возобновить.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule.Sync(System.Object)">
      <summary>
            Синхронизовать или рассинхронизовать реагирование правила с другими правилами.
            </summary>
      <param name="syncToken">Объект синхронизации. Если значение равно null, то правило рассинхронизовывается.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule.Once">
      <summary>
            Сделать правило одноразовым (будет вызвано только один раз).
            </summary>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule.Periodical(System.Func{System.Boolean})">
      <summary>
            Сделать правило периодичным (будет вызываться до тех пор, пока <paramref name="canFinish" /> не вернет true).
            </summary>
      <param name="canFinish">Критерий окончания периодичности.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule.Do(System.Action)">
      <summary>
            Добавить действие, активизирующееся при наступлении условия.
            </summary>
      <param name="action">Действие.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule.Do(System.Action{StockSharp.Algo.Strategies.StrategyRule})">
      <summary>
            Добавить действие, активизирующееся при наступлении условия.
            </summary>
      <param name="action">Действие.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule.Do``1(System.Func{``0})">
      <summary>
            Добавить действие, возвращающее результат, активизирующееся при наступлении условия.
            </summary>
      <typeparam name="TResult">Тип возвращаемого результата.</typeparam>
      <param name="action">Действие, возвращающее результат.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule.Do``1(System.Func{StockSharp.Algo.Strategies.StrategyRule,``0})">
      <summary>
            Добавить действие, возвращающее результат, активизирующееся при наступлении условия.
            </summary>
      <typeparam name="TResult">Тип возвращаемого результата.</typeparam>
      <param name="action">Действие, возвращающее результат.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule.Activated(System.Action)">
      <summary>
            Добавить обработчик, который будет вызван при активации действия.
            </summary>
      <param name="handler">Обработчик.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule.Activated``1(System.Action{``0})">
      <summary>
            Добавить обработчик, принимающий аргумент из <see cref="M:StockSharp.Algo.Strategies.StrategyRule.Do``1(System.Func{``0})" />, который будет вызван при активации действия.
            </summary>
      <typeparam name="TResult">Тип возвращаемого результата из обработчика правила.</typeparam>
      <param name="handler">Обработчик.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule.Activate">
      <summary>
            Активировать правило.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule.ToString">
      <summary>
            Получить строковое представление.
            </summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyRule.Name">
      <summary>
            Имя правила.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyRule.IsLogEnabled">
      <summary>
            Включено ли логирование.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyRule.IsSuspended">
      <summary>
            Приостановлено ли правило.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyRule.IsSynchronized">
      <summary>
            Сихнронизовано ли реагирование правила с другими правилами.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyRule`1">
      <summary>
            Параметризируемое правило, активизирующее действие при наступлении рыночного условия.
            </summary>
      <typeparam name="TArg">Тип принимаемого аргумента.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule`1.Do(System.Action{`0})">
      <summary>
            Добавить действие, активизирующееся при наступлении условия.
            </summary>
      <param name="action">Действие.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule`1.Do(System.Action{StockSharp.Algo.Strategies.StrategyRule{`0},`0})">
      <summary>
            Добавить действие, активизирующееся при наступлении условия.
            </summary>
      <param name="action">Действие.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule`1.Do``1(System.Func{`0,``0})">
      <summary>
            Добавить действие, возвращающее результат, активизирующееся при наступлении условия.
            </summary>
      <typeparam name="TResult">Тип возвращаемого результата.</typeparam>
      <param name="action">Действие, возвращающее результат.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule`1.Do``1(System.Func{StockSharp.Algo.Strategies.StrategyRule{`0},`0,``0})">
      <summary>
            Добавить действие, возвращающее результат, активизирующееся при наступлении условия.
            </summary>
      <typeparam name="TResult">Тип возвращаемого результата.</typeparam>
      <param name="action">Действие, возвращающее результат.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRule`1.Activate(`0)">
      <summary>
            Активировать правило.
            </summary>
      <param name="value">Значение, которое будет передано в обработчик, зарегистрированный через <see cref="M:StockSharp.Algo.Strategies.StrategyRule`1.Do(System.Action{`0})" />.</param>
    </member>
    <member name="T:StockSharp.Algo.Logging.LogMessage">
      <summary>
            Отладочное сообщение.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.LogMessage.#ctor(StockSharp.Algo.Logging.ILogSource,System.DateTime,StockSharp.Algo.Logging.ErrorTypes,System.String,System.Object[])">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.LogMessage" />.
            </summary>
      <param name="source">Источник логов.</param>
      <param name="time">Время создания сообщения.</param>
      <param name="type">Тип сообщения.</param>
      <param name="message">Текстовое сообщение.</param>
      <param name="args">Параметры текстового сообщения.
            Используются в случае, если message является форматирующей строкой.
            Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.LogMessage.#ctor(StockSharp.Algo.Logging.ILogSource,System.DateTime,StockSharp.Algo.Logging.ErrorTypes,System.Func{System.String})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.LogMessage" />.
            </summary>
      <param name="source">Источник логов.</param>
      <param name="time">Время создания сообщения.</param>
      <param name="type">Тип сообщения.</param>
      <param name="getMessage">Функция, возвращающая текст для <see cref="P:StockSharp.Algo.Logging.LogMessage.Message" />.</param>
    </member>
    <member name="P:StockSharp.Algo.Logging.LogMessage.Source">
      <summary>
            Источник логов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Logging.LogMessage.Time">
      <summary>
            Время создания сообщения.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Logging.LogMessage.Type">
      <summary>
            Тип сообщения.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Logging.LogMessage.Message">
      <summary>
            Сообщение.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Logging.ChildLogSourceList`1">
      <summary>
            Коллекция дочерних источников логов.
            </summary>
      <typeparam name="T">Тип элемента внутренней коллекции. Каждый элемент коллекции должен реализовывать интерфейс <see cref="T:StockSharp.Algo.Logging.ILogSource" />.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Logging.ChildLogSourceList`1.#ctor(Ecng.Collections.INotifyList{`0})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.ChildLogSourceList`1" />.
            </summary>
      <param name="innerList">Внутренняя коллекция.</param>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleContainer">
      <summary>
            Интерфейс контейнера, хранящего данные свечек.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleContainer.AddCandles(StockSharp.Algo.Candles.CandleToken,System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Candle})">
      <summary>
            Добавить свечки для идентификатора группировки.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="candles">Свечки.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleContainer.GetCandles(StockSharp.Algo.Candles.CandleToken,System.DateTime)">
      <summary>
            Получить для идентификатора группировки все ассоциированные с ним свечки на период <paramref name="time" />.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="time">Период свечки.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleContainer.GetCandles(StockSharp.Algo.Candles.CandleToken)">
      <summary>
            Получить для идентификатора группировки все ассоциированные с ним свечки.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleContainer.GetCandle(StockSharp.Algo.Candles.CandleToken,System.Int32)">
      <summary>
            Получить свечку по индексу.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="candleIndex">Порядковый номер свечки с конца.</param>
      <returns>Найденая свечка. Если свечки не существует, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleContainer.GetCandles(StockSharp.Algo.Candles.CandleToken,Ecng.ComponentModel.Range{System.DateTime})">
      <summary>
            Получить свечки по идентификатору группировки и диапазону дат.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="timeRange">Диапазон дат, в которые должны входить свечки. Учитывается значение <see cref="P:StockSharp.Algo.Candles.Candle.Time" />.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleContainer.GetCandles(StockSharp.Algo.Candles.CandleToken,System.Int32)">
      <summary>
            Получить свечки по идентификатору группировки и общему количеству.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="candleCount">Количество свечек, которое необходимо вернуть.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleBuilderSourceValue">
      <summary>
            Интерфейс, описывающий данные источника <see cref="T:StockSharp.Algo.Candles.ICandleBuilderSource" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleBuilderSourceValue.Id">
      <summary>
            Уникальный идентификатор.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleBuilderSourceValue.Security">
      <summary>
            Инструмент, по которому были сформированы данные.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleBuilderSourceValue.Time">
      <summary>
            Время появления новых данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleBuilderSourceValue.Price">
      <summary>
            Цена.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleBuilderSourceValue.Volume">
      <summary>
            Объем.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleBuilderSourceValue.UnderlyingValue">
      <summary>
            Значение источника, по которому были сформированы данные.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.MarketDataGenerator`1">
      <summary>
            Генератор случайным образом маркет-данных.
            </summary>
      <typeparam name="TData">Тип маркер-данных.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDataGenerator`1.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Testing.MarketDataGenerator`1" />.
            </summary>
      <param name="security">Инструмент, для которого необходимо генерировать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDataGenerator`1.Init">
      <summary>
            Инициализировать состояние генератора.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDataGenerator`1.Generate(`0,System.DateTime)">
      <summary>
            Сгенерировать маркет-данные.
            </summary>
      <param name="data">Маркет-данные.</param>
      <param name="time">Текущее время.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDataGenerator`1.IsTimeToGenerate(System.DateTime)">
      <summary>
            Требуется ли генерация новых данных.
            </summary>
      <param name="time">Текущее время.</param>
      <returns>true если надо сгенерировать данные.</returns>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.Security">
      <summary>
            Инструмент, для которого необходимо генерировать данные.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.LastGenerationTime">
      <summary>
            Время последней генерации данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.Interval">
      <summary>
            Интервал генерации данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MaxVolume">
      <summary>
            Максимальный объем. Объем будет выбран случайно от <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MinVolume" /> до <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MaxVolume" />.
            </summary>
      <remarks>
            Значение по умолчанию равно 20.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MinVolume">
      <summary>
            Максимальный объем. Объем будет выбран случайно от <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MinVolume" /> до <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MaxVolume" />.
            </summary>
      <remarks>
            Значение по умолчанию равно 1.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MaxPriceStepCount">
      <summary>
            Максимальное количество шагов цены <see cref="P:StockSharp.BusinessEntities.Security.MinStepSize" />, которое будет возвращатся через массив <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.Steps" />.
            </summary>
      <remarks>
            Значение по умолчанию равно 10.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.Volumes">
      <summary>
            Массив случайных объемов в диапазоне от <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MinVolume" /> до <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MaxVolume" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.Steps">
      <summary>
            Массив случайных количеств шагов цены в диапазоне от 1 до <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MaxPriceStepCount" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Positions.BasePositionManager">
      <summary>
            Базовый менеджер позиции.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Positions.IPositionManager">
      <summary>
            Базовый интерфейс для менеджера позиции.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.IPositionManager.Init">
      <summary>
            Инициализировать первоначальное состояние менеджера позиции. Если менеджер включается в середине торговой сессии,
            то через свойство <see cref="P:StockSharp.Algo.Positions.IPositionManager.Trades" /> получаются все сделки, на основе которых и происходит формирование позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.IPositionManager.Trades">
      <summary>
            Все сделки, по которым была посчитана позиция.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.IPositionManager.Position">
      <summary>
            Значение позиции по всем сделкам <see cref="P:StockSharp.Algo.Positions.IPositionManager.Trades" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Positions.IPositionManager.PositionChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Positions.IPositionManager.Position" />. Когда заявки исполняются (частично или полностью),
            то на основе ее сделок вычисляется новое значение позиции.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.BasePositionManager.Init">
      <summary>
            Инициализировать первоначальное состояние менеджера позиции. Если менеджер включается в середине торговой сессии,
            то через свойство <see cref="P:StockSharp.Algo.Positions.BasePositionManager.Trades" /> получаются все сделки, на основе которых и происходит формирование позиции.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.BasePositionManager.ProcessNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Обработать новые сделки.
            </summary>
      <param name="trades">Новые сделки, для которых необходимо провести пересчет позиции.</param>
    </member>
    <member name="P:StockSharp.Algo.Positions.BasePositionManager.Trades">
      <summary>
            Все сделки, по которым была посчитана позиция.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.BasePositionManager.Position">
      <summary>
            Значение позиции по всем сделкам <see cref="P:StockSharp.Algo.Positions.BasePositionManager.Trades" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Positions.BasePositionManager.PositionChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Positions.BasePositionManager.Position" />. Когда заявки исполняются (частично или полностью),
            то на основе ее сделок вычисляется новое значение позиции.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.IStrategyInfoList">
      <summary>
            Интерфейс для представления в виде информацию о стратегиях, полученной из внешнего хранилища.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStrategyInfoList.LoadByStrategyId(System.Guid)">
      <summary>
            Загрузить информацию о стратегии по уникальному идентификатору.
            </summary>
      <param name="strategyId">Уникальный идентификатор стратегии.</param>
      <returns>Информация о стратегии.</returns>
    </member>
    <member name="T:StockSharp.Algo.Logging.LogManager">
      <summary>
            Менеджер логирования сообщений, который мониторит событие <see cref="E:StockSharp.Algo.Logging.ILogSource.Log" /> и перенаправляет сообщения в <see cref="P:StockSharp.Algo.Logging.LogManager.Listeners" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.LogManager.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.LogManager" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.LogManager.DisposeManaged">
      <summary>
            Освободить ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Logging.LogManager.Listeners">
      <summary>
            Логгеры сообщений, приходящие от <see cref="P:StockSharp.Algo.Logging.LogManager.Sources" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Logging.LogManager.Sources">
      <summary>
            Источники логов, у которых слушается событие <see cref="E:StockSharp.Algo.Logging.ILogSource.Log" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.Hydra.IHydraServer">
      <summary>
            Интерфейс серверной части Hydra.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IHydraServer.Login(System.String,System.String)">
      <summary>
            Получить сессию.
            </summary>
      <param name="login">Логин.</param>
      <param name="password">Пароль.</param>
      <returns>Идентификатор сессии.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IHydraServer.GetSecurityIds(System.Guid)">
      <summary>
            Получить все идентификаторы инструментов.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
      <returns>Идентификаторы инструментов.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IHydraServer.GetSecurities(System.Guid,System.String[])">
      <summary>
            Получить инструменты по идентификаторам.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
      <param name="securityIds">Идентификаторы инструментов.</param>
      <returns>Инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IHydraServer.GetSecuritiesData(System.Guid,System.String[],System.DateTime)">
      <summary>
            Получить архив с историческими маркет-данными.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
      <param name="securityIds">Идентификаторы инструментов.</param>
      <param name="date">Дата, для которой необходимо получить маркет-данные.</param>
      <returns>Маркет-данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IHydraServer.GetUpdateScripts(System.Version)">
      <summary>
            Получить скрипты для обновления хранилища клиентской части.
            </summary>
      <param name="version">Текущая версия клиента.</param>
      <returns>Скрипты для обновления хранилища клиентской части.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IHydraServer.GetConversions(StockSharp.BusinessEntities.CurrencyTypes,StockSharp.BusinessEntities.CurrencyTypes,System.DateTime,System.DateTime)">
      <summary>
            Получить курсы между двумя валютами за указанный период.
            </summary>
      <param name="currencyFrom">Валюта, из которой необходимо сделать перевод.</param>
      <param name="currencyTo">Валюта, дял которой необходимо получить курс.</param>
      <param name="from">Время начала период.</param>
      <param name="to">Время окончания периода.</param>
      <returns>Курсы валюты.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleBuilderSource">
      <summary>
            Источник данных для <see cref="T:StockSharp.Algo.Candles.CandleBuilder" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleBuilderSource.Init">
      <summary>
            Инициализировать источник.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleBuilderSource.Register(StockSharp.BusinessEntities.Security)">
      <summary>
            Запросить получение данных по инструменту.
            </summary>
      <param name="security">Инструмент, для которого необходимо начать получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleBuilderSource.UnRegister(StockSharp.BusinessEntities.Security)">
      <summary>
            Прекратить получение данных по инструменту.
            </summary>
      <param name="security">Инструмент, для которого необходимо прекратить получать данные.</param>
    </member>
    <member name="E:StockSharp.Algo.Candles.ICandleBuilderSource.NewValues">
      <summary>
            Событие появления новых данных.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy">
      <summary>
            Котирование по принципу "Лучшая по объему". Для данного котирования указывается дельта объема <see cref="P:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy.VolumeExchange" />,
            который может стоять перед котируемой заявкой.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy.#ctor(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <param name="volumeExchange">Дельта объема, который может стоять перед котируемой заявкой.</param>
      <returns>Стратегия.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy.NeedQuoting(System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
      <summary>
            Нужно ли котировать заявку.
            </summary>
      <param name="currentPrice">Текущая цена.</param>
      <param name="currentVolume">Текущий объем.</param>
      <param name="newPrice">Новая лучшая цена.</param>
      <param name="newVolume">Новый объем.</param>
      <returns>True, нужно. Иначе, false.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy.VolumeExchange">
      <summary>
            Дельта объема, который может стоять перед котируемой заявкой.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Positions.PortfolioPositionManager">
      <summary>
            Менеджер позиции для конкретного счета.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.PortfolioPositionManager.#ctor(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Создать менеджер позиции.
            </summary>
      <param name="portfolio">Портфель, для которого необходимо учитывать позицию.</param>
    </member>
    <member name="M:StockSharp.Algo.Positions.PortfolioPositionManager.ProcessNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Обработчик события появления новых Моих Сделок.
            </summary>
      <param name="trades">Новые сделки, по который необходимо провести пересчет позиции.</param>
    </member>
    <member name="M:StockSharp.Algo.Positions.PortfolioPositionManager.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.PortfolioPositionManager.Trades">
      <summary>
            Все сделки, по которым была посчитана позиция.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.PortfolioPositionManager.Portfolio">
      <summary>
            Портфель, для которого необходимо учитывать позицию.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.PnL.IPnLManager">
      <summary>
            Базовый интерфейс менеджера прибыли-убытка.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.IPnLManager.Init">
      <summary>
            Инициализировать первоначальное состояние менеджера прибыли-убытка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.IPnLManager.PnL">
      <summary>
            Значение прибыли-убытка.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.PnL.IPnLManager.PnLChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.PnL.IPnLManager.PnL" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.PnL.IPnLManager.NewMyTrade">
      <summary>
            Событие обработки поступившей сделки <see cref="E:StockSharp.Algo.PnL.IPnLManager.NewMyTrade" />. Передается вместе со значение прибыли-убытка относительно сделки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Latency.StrategyLatencyManager">
      <summary>
            Менеджер задержки для конкретной стратегии <see cref="P:StockSharp.Algo.Latency.StrategyLatencyManager.Strategy" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Latency.BaseLatencyManager">
      <summary>
            Базовый менеджер задержки. Менеджер позволяет узнать, сколько по времени занимает регистрирация заявок на бирже.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Latency.ILatencyManager">
      <summary>
            Базовый интерфейс менеджера задержки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.ILatencyManager.Init">
      <summary>
            Инициализировать первоначальное состояние менеджера задержки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Latency.ILatencyManager.Orders">
      <summary>
            Все заявки, зарегистрированные для мониторинга.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Latency.ILatencyManager.Latency">
      <summary>
            Общее значение задержки по всем заявкам <see cref="P:StockSharp.Algo.Latency.ILatencyManager.Orders" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Latency.ILatencyManager.LatencyChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Latency.ILatencyManager.Latency" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.BaseLatencyManager.Init">
      <summary>
            Инициализировать первоначальное состояние менеджера задержки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.BaseLatencyManager.OnOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Обработчик события появления изменения заявок.
            </summary>
      <param name="orders">Заявки.</param>
    </member>
    <member name="P:StockSharp.Algo.Latency.BaseLatencyManager.Orders">
      <summary>
            Все заявки, зарегистрированные для мониторинга.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Latency.BaseLatencyManager.Latency">
      <summary>
            Общее значение задержки по всем заявкам <see cref="P:StockSharp.Algo.Latency.BaseLatencyManager.Orders" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Latency.BaseLatencyManager.LatencyChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Latency.BaseLatencyManager.Latency" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.StrategyLatencyManager.#ctor(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать менеджер задержки.
            </summary>
      <param name="strategy">Торговая стратегия, для которой необходимо вычислять задержку.</param>
    </member>
    <member name="M:StockSharp.Algo.Latency.StrategyLatencyManager.OnOrderChanged(StockSharp.BusinessEntities.Order)">
      <summary>
            Обработчик события <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderChanged" />.
            </summary>
      <param name="order">Измененная заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Latency.StrategyLatencyManager.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Latency.StrategyLatencyManager.Orders">
      <summary>
            Все заявки, зарегистрированные для мониторинга.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Latency.StrategyLatencyManager.Strategy">
      <summary>
            Торговая стратегия, для которой необходимо вычислять задержку.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyRuleHelper">
      <summary>
            Вспомогательный класс для работы с торговыми правилами <see cref="T:StockSharp.Algo.Strategies.StrategyRule" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Registered(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие успешной регистрации заявки на бирже.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие успешной регистрации.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Activated(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие активации стоп-заявки.
            </summary>
      <param name="stopOrder">Стоп-заявка, которую необходимо отслеживать на событие активации.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.PartiallyMatched(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие частичного исполнения заявки.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие частичного исполнения.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.RegisterFailed(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие неудачной регистрации заявки на бирже.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие неудачной регистрации.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.CancelFailed(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие неудачного снятия заявки на бирже.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие неудачного снятия.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Canceled(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие отмены заявки.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие отмены.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Matched(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие полного исполнения заявки.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие полного исполнения.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Changed(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие изменения заявки.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие изменения.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.NewTrades(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие появления сделок по заявке.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие появления сделок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.MoneyLess(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие уменьшения денег в портфеле ниже определённого уровня.
            </summary>
      <param name="portfolio">Портфель, который необходимо отслеживать на событие уменьшении денег ниже определённого уровня.</param>
      <param name="money">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.MoneyMore(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие увеличения денег в портфеле выше определённого уровня.
            </summary>
      <param name="portfolio">Портфель, который необходимо отслеживать на событие увеличения денег выше определённого уровня.</param>
      <param name="money">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Less(StockSharp.BusinessEntities.Position,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие уменьшения позиции ниже определённого уровня.
            </summary>
      <param name="position">Позиция, которую необходимо отслеживать на событие уменьшения ниже определенного уровня.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.More(StockSharp.BusinessEntities.Position,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие увеличения позиции выше определенного уровня.
            </summary>
      <param name="position">Позиция, которую необходимо отслеживать на событие увеличения выше определенного уровня.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Changed(StockSharp.BusinessEntities.Position)">
      <summary>
            Создать правило на событие изменения позиции.
            </summary>
      <param name="position">Позиция, которую необходимо отслеживать на событие изменения.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Less(StockSharp.Algo.Positions.IPositionManager,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие уменьшения позиции ниже определённого уровня.
            </summary>
      <param name="manager">Менеджер позиции, у которого отслеживается событие <see cref="E:StockSharp.Algo.Positions.IPositionManager.PositionChanged" />.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.More(StockSharp.Algo.Positions.IPositionManager,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие увеличения позиции выше определенного уровня.
            </summary>
      <param name="manager">Менеджер позиции, у которого отслеживается событие <see cref="E:StockSharp.Algo.Positions.IPositionManager.PositionChanged" />.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Changed(StockSharp.Algo.Positions.IPositionManager)">
      <summary>
            Создать правило на событие изменения позиции.
            </summary>
      <param name="manager">Менеджер позиции, у которого отслеживается событие <see cref="E:StockSharp.Algo.Positions.IPositionManager.PositionChanged" />.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Less(StockSharp.Algo.PnL.IPnLManager,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие уменьшения прибыли ниже определённого уровня.
            </summary>
      <param name="manager">Менеджер прибыли-убытка, у которого отслеживается событие <see cref="E:StockSharp.Algo.PnL.IPnLManager.PnLChanged" />.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.More(StockSharp.Algo.PnL.IPnLManager,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие увеличения прибыли выше определенного уровня.
            </summary>
      <param name="manager">Менеджер прибыли-убытка, у которого отслеживается событие <see cref="E:StockSharp.Algo.PnL.IPnLManager.PnLChanged" />.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Changed(StockSharp.Algo.PnL.IPnLManager)">
      <summary>
            Создать правило на событие изменения прибыли.
            </summary>
      <param name="manager">Менеджер прибыли-убытка, у которого отслеживается событие <see cref="E:StockSharp.Algo.PnL.IPnLManager.PnLChanged" />.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Changed(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать правило на событие изменения инструмента.
            </summary>
      <param name="security">Инструмент, изменения которого будут отслеживаться.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.SecurityNewTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать правило на событие появления у инструмента новой сделки.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие появления новой сделки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.MarketDepthChanged(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать правило на событие изменения стакана по инструменту.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие изменения стакана по инструменту.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.MarketDepthChanged(StockSharp.BusinessEntities.BasketSecurity)">
      <summary>
            Создать правило на событие изменения стаканов по корзине инструментов.
            </summary>
      <param name="security">Корзина инструментов, которую необходимо отслеживать на событие изменения стаканов по внутренним инструментам.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.BestBidPriceMore(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие превышения лучшего бида определенного уровня.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие превышения лучшего бида определенного уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.BestBidPriceLess(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие понижения лучшего бида ниже определенного уровня.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие понижения лучшего бида ниже определенного уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.BestAskPriceMore(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие превышения лучшего оффера определенного уровня.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие превышения лучшего оффера определенного уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.BestAskPriceLess(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие понижения лучшего оффера ниже определенного уровня.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие понижения лучшего оффера ниже определенного уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.LastTradePriceMore(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие повышения цены последней сделки выше определённого уровня.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие повышения цены последней сделки выше определённого уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.LastTradePriceLess(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие понижения цены последней сделки ниже определённого уровня.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие понижения цены последней сделки ниже определённого уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Changed(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Создать правило на событие изменения стакана.
            </summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие изменения.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.SpreadMore(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие повышения размера спреда стакана на определенную величину.
            </summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие изменения спреда.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.SpreadLess(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие понижения размера спреда стакана на определенную величину.
            </summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие изменения спреда.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.BestBidPriceMore(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие повышения лучшего бида на определенную величину.
            </summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие повышения лучшего бида на определенную величину.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.BestBidPriceLess(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие понижения лучшего бида на определенную величину.
            </summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие понижения лучшего бида на определенную величину.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.BestAskPriceMore(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие повышения лучшего оффера на определенную величину.
            </summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие повышения лучшего оффера на определенную величину.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.BestAskPriceLess(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие понижения лучшего оффера на определенную величину.
            </summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие понижения лучшего оффера на определенную величину.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.ClosePriceMore(StockSharp.Algo.Candles.Candle,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие превышения цены закрытия свечки выше определенного уровня.
            </summary>
      <param name="candle">Свечка, которую необходимо отслеживать на событие превышения цены закрытия свечки выше определенного уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.ClosePriceLess(StockSharp.Algo.Candles.Candle,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие понижения цены закрытия свечки ниже определенного уровня.
            </summary>
      <param name="candle">Свечка, которую необходимо отслеживать на событие понижения цены закрытия свечки ниже определенного уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.TotalVolumeMore(StockSharp.Algo.Candles.Candle,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие превышения общего объема свечки выше определённого уровня.
            </summary>
      <param name="candle">Свечка, которую необходимо отслеживать на событие превышения общего объема выше определённого уровня.</param>
      <param name="volume">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.CurrentCandleTotalVolumeMore(StockSharp.Algo.Candles.CandleToken,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие превышения общего объема свечки выше определенного уровня.
            </summary>
      <param name="token">Идентификатор регистрации создания свечек, из которого будет браться свечка.</param>
      <param name="volume">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.CandlesStarted(StockSharp.Algo.Candles.CandleToken)">
      <summary>
            Создать правило на событие появления новых свечек.
            </summary>
      <param name="token">Идентификатор регистрации создания свечек, по которому будут ожидаться новые свечки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.CandlesChanged(StockSharp.Algo.Candles.CandleToken)">
      <summary>
            Создать правило на событие изменения свечек.
            </summary>
      <param name="token">Идентификатор регистрации создания свечек, по которому будут ожидаться измененные свечки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.CandlesFinished(StockSharp.Algo.Candles.CandleToken)">
      <summary>
            Создать правило на событие окончания свечек.
            </summary>
      <param name="token">Идентификатор регистрации создания свечек, по которому будут ожидаться законченные свечки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Changed(StockSharp.Algo.Candles.Candle)">
      <summary>
            Создать правило на событие изменения свечки.
            </summary>
      <param name="candle">Свечка, по которой будет ожидаться изменение.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Finished(StockSharp.Algo.Candles.Candle)">
      <summary>
            Создать правило на событие окончания свечки.
            </summary>
      <param name="candle">Свечка, по которой будет ожидаться окончание.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.PartiallyFinished(StockSharp.Algo.Candles.Candle,System.Decimal)">
      <summary>
            Создать правило на событие частичного окончания свечки.
            </summary>
      <param name="candle">Свечка, по которой будет ожидаться частичное окончание.</param>
      <param name="percent">Процент завершения свечки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.PartiallyFinishedCandles(StockSharp.Algo.Candles.CandleToken,System.Decimal)">
      <summary>
            Создать правило на событие частичного окончания свечек.
            </summary>
      <param name="candleToken">Идентификатор регистрации создания свечек, по которому будут ожидаться частичное окончание свечки.</param>
      <param name="percent">Процент завершения свечки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.StrategyNewMyTrades(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие появление новых сделок стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться появление сделок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.StrategyNewOrder(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие появление новой заявки стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться появление заявки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.PositionChanged(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие изменения позиции у стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение позиции.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Started(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие начала работы стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет ожидаться начало работы стратегии.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Stopping(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие начала остановки работы стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет ожидаться начало остановки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Stopped(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие полной остановки работы стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет ожидаться полная остановка.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Error(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие ошибки стратегии (переход состояния <see cref="P:StockSharp.Algo.Strategies.Strategy.ErrorState" /> в <see cref="F:StockSharp.Algo.Logging.ErrorTypes.Error" />).
            </summary>
      <param name="strategy">Стратегия, по которой будет ожидаться ошибка.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Warning(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие предупреждения стратегии (переход состояния <see cref="P:StockSharp.Algo.Strategies.Strategy.ErrorState" /> в <see cref="F:StockSharp.Algo.Logging.ErrorTypes.Warning" />).
            </summary>
      <param name="strategy">Стратегия, по которой будет ожидаться предупреждение.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.IntervalElapsed(StockSharp.BusinessEntities.ITrader,System.TimeSpan,System.Boolean)">
      <summary>
            Создать правило на событие изменения <see cref="P:StockSharp.BusinessEntities.ITrader.MarketTime" /> на значение, большее или равно <paramref name="interval" />.
            </summary>
      <param name="trader">Шлюз к торговой системе.</param>
      <param name="interval">Интервал.</param>
      <param name="firstTimeRun">Сработает ли правило в момент создания (нулевое время). False по умолчанию.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.TimeCome(StockSharp.BusinessEntities.ITrader,System.DateTime[])">
      <summary>
            Создать правило, которое активизируется при наступлении точного времени, указанного через <paramref name="times" />.
            </summary>
      <param name="trader">Шлюз к торговой системе.</param>
      <param name="times">Точное время. Может быть передано несколько значений.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.TraderNewMyTrades(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать правило на событие появление новых сделок.
            </summary>
      <param name="trader">Шлюз, по которому будет отслеживаться появление сделок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.TraderNewOrder(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать правило на событие появление новых заявок.
            </summary>
      <param name="trader">Шлюз, по которому будет отслеживаться появление заявок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.When(StockSharp.Algo.Strategies.Strategy,StockSharp.Algo.Strategies.StrategyRule)">
      <summary>
            Зарегистрировать правило в стратегию. Правило будет не активно до тех пор, пока к нему не будет добавлено действие через метод <see cref="M:StockSharp.Algo.Strategies.StrategyRule.Do(System.Action)" />.
            </summary>
      <param name="strategy">Стратегия.</param>
      <param name="rule">Правило.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.When``1(StockSharp.Algo.Strategies.Strategy,StockSharp.Algo.Strategies.StrategyRule{``0})">
      <summary>
            Зарегистрировать параметризируемое правило в стратегию. Правило будет не активно до тех пор, пока к нему не будет добавлено действие через метод <see cref="M:StockSharp.Algo.Strategies.StrategyRule.Do(System.Action)" />.
            </summary>
      <typeparam name="TArg">Тип принимаемого аргумента.</typeparam>
      <param name="strategy">Стратегия.</param>
      <param name="rule">Правило.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.When(StockSharp.Algo.Strategies.Strategy,System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.StrategyRule})">
      <summary>
            Зарегистрировать правила в стратегию через <see cref="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Or(StockSharp.Algo.Strategies.StrategyRule,StockSharp.Algo.Strategies.StrategyRule[])" />.
            </summary>
      <param name="strategy">Стратегия.</param>
      <param name="rules">Правила.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.When``1(StockSharp.Algo.Strategies.Strategy,System.Collections.Generic.IEnumerable{StockSharp.Algo.Strategies.StrategyRule{``0}})">
      <summary>
            Зарегистрировать параметризируемые правила в стратегию через <see cref="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Or(StockSharp.Algo.Strategies.StrategyRule,StockSharp.Algo.Strategies.StrategyRule[])" />.
            </summary>
      <typeparam name="TArg">Тип принимаемого аргумента.</typeparam>
      <param name="strategy">Стратегия.</param>
      <param name="rules">Правила.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.When(StockSharp.Algo.Strategies.Strategy,System.Func{System.Boolean},System.TimeSpan)">
      <summary>
            Зарегистрировать в стратегии условие, которое будет проверяться с интервалом <paramref name="interval" />.
            На основе условия будет создано правило <see cref="T:StockSharp.Algo.Strategies.StrategyRule" />, которое будет не активно до тех пор,
            пока к нему не будет добавлено действие через метод <see cref="M:StockSharp.Algo.Strategies.StrategyRule.Do(System.Action)" />.
            </summary>
      <param name="strategy">Стратегия.</param>
      <param name="condition">Условие.</param>
      <param name="interval">Интервал проверки условия <paramref name="condition" />.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Or(StockSharp.Algo.Strategies.StrategyRule,StockSharp.Algo.Strategies.StrategyRule[])">
      <summary>
            Объединить правила по условию ИЛИ.
            </summary>
      <param name="rule">Первое правило.</param>
      <param name="rules">Дополнительные правила.</param>
      <returns>Объединенное правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Or``1(StockSharp.Algo.Strategies.StrategyRule{``0},StockSharp.Algo.Strategies.StrategyRule{``0}[])">
      <summary>
            Объединить правила по условию ИЛИ.
            </summary>
      <param name="rule">Первое правило.</param>
      <param name="rules">Дополнительные правила.</param>
      <returns>Объединенное правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Register(StockSharp.Algo.Strategies.StrategyRule,StockSharp.BusinessEntities.Order)">
      <summary>
            Создать действие, регистрирующее заявку.
            </summary>
      <param name="rule">Правило.</param>
      <param name="order">Заявка, которую необходимо зарегистрировать.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.ReRegister(StockSharp.Algo.Strategies.StrategyRule,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Создать действие, перерегистрирующее заявку.
            </summary>
      <param name="rule">Правило.</param>
      <param name="oldOrder">Заявка, которую необходимо перезарегистрировать.</param>
      <param name="newOrder">Информация о новой заявке.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Cancel(StockSharp.Algo.Strategies.StrategyRule,StockSharp.BusinessEntities.Order)">
      <summary>
            Создать действие, отменяющее заявку.
            </summary>
      <param name="rule">Правило.</param>
      <param name="order">Заявка, которую необходимо отменить.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.ClosePosition(StockSharp.Algo.Strategies.StrategyRule)">
      <summary>
            Создать действие, закрывающее позицию.
            </summary>
      <param name="rule">Правило.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.ClosePosition(StockSharp.Algo.Strategies.StrategyRule,System.Decimal)">
      <summary>
            Создать действие, закрывающее позицию.
            </summary>
      <param name="rule">Правило.</param>
      <param name="slippage">Уровень проскальзывания, допустимый при регистрации заявки. Используется, если заявка регистрируется лимиткой.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.OpenPosition(StockSharp.Algo.Strategies.StrategyRule,System.Decimal)">
      <summary>
            Создать действие, открывающее позицию.
            </summary>
      <param name="rule">Правило.</param>
      <param name="finishPosition">Значение позиции, которое необходимо достичь. Отрицательное значение означает короткую позицию.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Protect(StockSharp.Algo.Strategies.StrategyRule{StockSharp.BusinessEntities.Order},StockSharp.BusinessEntities.Unit,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать действие, защищающее заявку стратегиями <see cref="T:StockSharp.Algo.Strategies.TakeProfitStrategy" /> и <see cref="T:StockSharp.Algo.Strategies.StopLossStrategy" />.
            </summary>
      <param name="rule">Правило, ассоциированное с заявкой.</param>
      <param name="takePriceDelta">Дельта от цены защищаемой сделки, по которой должна быть выставлена защитная заявка тейк-профит.</param>
      <param name="stopPriceDelta">Дельта от цены защищаемой сделки, по которой должна быть выставлена защитная заявка стоп-лосс.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Protect(StockSharp.Algo.Strategies.StrategyRule{System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade}},StockSharp.BusinessEntities.Unit,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать действие, защищающее сделки стратегиями <see cref="T:StockSharp.Algo.Strategies.TakeProfitStrategy" /> и <see cref="T:StockSharp.Algo.Strategies.StopLossStrategy" />.
            </summary>
      <param name="rule">Правило на появление новых сделок.</param>
      <param name="takePriceDelta">Дельта от цены защищаемой сделки, по которой должна быть выставлена защитная заявка тейк-профит.</param>
      <param name="stopPriceDelta">Дельта от цены защищаемой сделки, по которой должна быть выставлена защитная заявка стоп-лосс.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyRuleHelper.Protect(StockSharp.Algo.Strategies.StrategyRule{System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade}},System.Func{StockSharp.BusinessEntities.MyTrade,StockSharp.Algo.Strategies.TakeProfitStrategy},System.Func{StockSharp.BusinessEntities.MyTrade,StockSharp.Algo.Strategies.StopLossStrategy})">
      <summary>
            Создать действие, защищающее сделки стратегиями <see cref="T:StockSharp.Algo.Strategies.TakeProfitStrategy" /> и <see cref="T:StockSharp.Algo.Strategies.StopLossStrategy" />.
            </summary>
      <param name="rule">Правило на появление новых сделок.</param>
      <param name="takeProfit">Функция, создающая по сделке стратегию <see cref="T:StockSharp.Algo.Strategies.TakeProfitStrategy" />.</param>
      <param name="stopLoss">Функция, создающая по сделке стратегию <see cref="T:StockSharp.Algo.Strategies.StopLossStrategy" />.</param>
      <returns>Правило.</returns>
    </member>
    <member name="T:StockSharp.Algo.Slippage.ISlippageManager">
      <summary>
            Базовый интерфейс для менеджера проскальзывания.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.Init">
      <summary>
            Инициализировать первоначальное состояние менеджера проскальзывания. Если менеджер включается в середине торговой сессии,
            то через свойство <see cref="P:StockSharp.Algo.Slippage.ISlippageManager.Trades" /> получаются все сделки, на основе которых и происходит формирование проскальзывания.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.Register(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку для начала мониторинга проскальзывания. Ожидаемая цена равна <see cref="P:StockSharp.BusinessEntities.Order.Price" />.
            </summary>
      <param name="order">Заявка, на основе которой необходимо вычислять проскальзывание.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.Register(StockSharp.BusinessEntities.Order,System.Decimal)">
      <summary>
            Зарегистрировать заявку для начала мониторинга проскальзывания.
            </summary>
      <param name="order">Заявка, на основе которой необходимо вычислять проскальзывание.</param>
      <param name="estimatedPrice">Ожидаемая цена сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.ReRegister(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку oldOrder с новой ценой из newOrder.
            </summary>
      <param name="oldOrder">Старая заявка, которая мониторится на учет проскальзывания.</param>
      <param name="newOrder">Новая заявка, которая содержит обновленную ожидаемую цену по сделкам.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.GetSlippage(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить текущее проскальзывание по заявке.
            Если заявка все еще активна, то возвращается проскальзывание,
            рассчитанное на основе частично исполненных сделок.
            </summary>
      <param name="order">Заявка, по которой необходимо получить проскальзывание.</param>
      <returns>Значение проскальзывания.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.GetSlippage(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Получить проскальзывание по сделке.
            В качестве ожидаемой цены берется цена первоначальной заявки, которая в результате
            изменений цены через перерегистрацию <see cref="M:StockSharp.Algo.Slippage.ISlippageManager.ReRegister(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)" /> привела к сделке.
            </summary>
      <param name="trade">Сделка, для которой необходимо получить проскальзывание.</param>
      <returns>Значение проскальзывания.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.GetOriginalOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить для текущей заявки изначальную, с цены которой начался мониторинг проскальзывания.
            </summary>
      <param name="order">Текущая заявка.</param>
      <returns>Изначальная заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.GetEstimatedPrice(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить ожидаемую цену сделки для заявки.
            </summary>
      <param name="order">Заявка, для которой необходимо получить ожидаемую цену сделки для заявки.</param>
      <returns>Ожидаемая цена сделки.</returns>
    </member>
    <member name="P:StockSharp.Algo.Slippage.ISlippageManager.Orders">
      <summary>
            Все заявки, зарегистрированные для мониторинга.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.ISlippageManager.Trades">
      <summary>
            Все сделки, по которым было посчитано проскальзывание.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.ISlippageManager.Slippage">
      <summary>
            Общее значение проскальзывания по всем заявкам, зарегистрированным через <see cref="M:StockSharp.Algo.Slippage.ISlippageManager.Register(StockSharp.BusinessEntities.Order)" />
            или <see cref="M:StockSharp.Algo.Slippage.ISlippageManager.Register(StockSharp.BusinessEntities.Order,System.Decimal)" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Slippage.ISlippageManager.SlippageChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Slippage.ISlippageManager.Slippage" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Slippage.ISlippageManager.ReRegistered">
      <summary>
            Событие о перерегистрации заявки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.Finam.FinamSecurityInfo">
      <summary>
            Информация об инструменте, загруженная через <see cref="T:StockSharp.Algo.History.Finam.FinamHistorySource" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Finam.FinamSecurityInfo.FinamSecurityId">
      <summary>
            Идентификатор инструмента на сайте Finam.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Finam.FinamSecurityInfo.FinamMarketId">
      <summary>
            Идентификатор рынка на сайте Finam.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Finam.FinamSecurityInfo.Code">
      <summary>
            Код инструмента.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Finam.FinamSecurityInfo.Name">
      <summary>
            Имя инструмента.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.PnL.BasePnLManager">
      <summary>
            Базовый менеджер прибыли-убытка.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.BasePnLManager.Init">
      <summary>
            Инициализировать первоначальное состояние менеджера прибыли-убытка.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.BasePnLManager.RaisePnLChanged">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.PnL.BasePnLManager.PnLChanged" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.BasePnLManager.RaiseNewMyTrade(StockSharp.BusinessEntities.MyTrade,System.Decimal)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.PnL.BasePnLManager.NewMyTrade" />.
            </summary>
      <param name="trade">Сделка, которая инициировала изменение прибыли-убытка.</param>
      <param name="tradePnL">Значение прибыли-убытка относительно сделки.</param>
    </member>
    <member name="P:StockSharp.Algo.PnL.BasePnLManager.PnL">
      <summary>
            Значение прибыли-убытка с учетом открытой позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.BasePnLManager.RelatedValue">
      <summary>
            Относительное значение прибыли-убытка без учета открытой позиции.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.PnL.BasePnLManager.PnLChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.PnL.BasePnLManager.PnL" /> и <see cref="P:StockSharp.Algo.PnL.BasePnLManager.RelatedValue" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.PnL.BasePnLManager.NewMyTrade">
      <summary>
            Событие обработки поступившей сделки <see cref="E:StockSharp.Algo.PnL.IPnLManager.NewMyTrade" />. Передается вместе со значение прибыли-убытка относительно сделки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.IStrategyRuleList">
      <summary>
            Коллекция зарегистрированных правил.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.IProtectiveStrategy">
      <summary>
            Интерейс защитной стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IProtectiveStrategy.ProtectiveVolume">
      <summary>
            Защищаемый объем.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.IProtectiveStrategy.ProtectiveVolumeChanged">
      <summary>
            Событие об изменении защищаемого объема.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IProtectiveStrategy.Trade">
      <summary>
            Защищаемая сделка.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.IMarketDataStorage`1">
      <summary>
            Интерфейс, описывающий внешнее хранилище (база данных, файл и т.д.) маркет-данных.
            </summary>
      <typeparam name="T">Тип маркет-данных.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.Save(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Сохранить маркет-данные в хранилище.
            </summary>
      <param name="data">Маркет-данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.Load(System.DateTime,System.DateTime)">
      <summary>
            Загрузить маркет-данные по заданному периоду.
            </summary>
      <param name="from">Дата начала.</param>
      <param name="to">Дата конца.</param>
      <returns>Маркет-данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.Load">
      <summary>
            Загрузить все маркет-данные.
            </summary>
      <returns>Маркет-данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.Delete(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Удалить маркет-данные из хранилища.
            </summary>
      <param name="data">Маркет-данные, которые необходимо удалить.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.Delete(System.DateTime,System.DateTime)">
      <summary>
            Удалить маркет-данные из хранилища для заданного периода.
            </summary>
      <param name="from">Дата начала.</param>
      <param name="to">Дата конца.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.Clear">
      <summary>
            Удалить все маркет-данные.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.FillSecurity(System.DateTime)">
      <summary>
            Заполнить параметры инструмента (например, <see cref="P:StockSharp.BusinessEntities.Security.MinStepPrice" />) данными, загруженные из хранилища.
            </summary>
      <param name="date">Дата, для которой происходит загрузка данных по инструменту из хранилища.</param>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage`1.FromDate">
      <summary>
            Начальная дата, с которой храняться маркет-данные в хранилище.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage`1.ToDate">
      <summary>
            Конечная дата, по которую храняться маркет-данные в хранилище.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage`1.AllDates">
      <summary>
            Все даты, для которых записаны маркет-данные.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage`1.Security">
      <summary>
            Инструмент, с которым работает внешнее хранилище.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage`1.BasePath">
      <summary>
            Путь к директории с данными.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage`1.AppendOnlyNew">
      <summary>
            Добавлять ли только новые данные или пытаться записать все данные без фильтра.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.StorageCandleBuilderSource`1">
      <summary>
            Базовый источник данных для <see cref="T:StockSharp.Algo.Candles.CandleBuilder" />, который получает данные из внешнего хранилища.
            </summary>
      <typeparam name="TSourceValue">Тип исходных данных (например, <see cref="T:StockSharp.BusinessEntities.Trade" />).</typeparam>
    </member>
    <member name="T:StockSharp.Algo.Candles.ConvertableCandleBuilderSource`1">
      <summary>
            Базовый источник данных для <see cref="T:StockSharp.Algo.Candles.CandleBuilder" />, который переводит данные из типа <typeparamref name="TSourceValue" /> в <see cref="T:StockSharp.Algo.Candles.ICandleBuilderSourceValue" />.
            </summary>
      <typeparam name="TSourceValue">Тип исходных данных (например, <see cref="T:StockSharp.BusinessEntities.Trade" />).</typeparam>
    </member>
    <member name="T:StockSharp.Algo.Candles.BaseCandleBuilderSource">
      <summary>
            Базовый источник данных для <see cref="T:StockSharp.Algo.Candles.CandleBuilder" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleBuilderSource.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Candles.BaseCandleBuilderSource" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleBuilderSource.Register(StockSharp.BusinessEntities.Security)">
      <summary>
            Запросить получение данных по инструменту.
            </summary>
      <param name="security">Инструмент, для которого необходимо начать получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleBuilderSource.UnRegister(StockSharp.BusinessEntities.Security)">
      <summary>
            Прекратить получение данных по инструменту.
            </summary>
      <param name="security">Инструмент, для которого необходимо прекратить получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleBuilderSource.Init">
      <summary>
            Инициализировать источник.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleBuilderSource.AddNewValues(System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.ICandleBuilderSourceValue})">
      <summary>
            Добавить новые значения.
            </summary>
      <param name="values">Новые значения.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleBuilderSource.RaiseNewValues(System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.ICandleBuilderSourceValue})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.BaseCandleBuilderSource.NewValues" />.
            </summary>
      <param name="values">Новые данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleBuilderSource.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.BaseCandleBuilderSource.IsSyncProcess">
      <summary>
            Передать ли данные в метод <see cref="M:StockSharp.Algo.Candles.BaseCandleBuilderSource.RaiseNewValues(System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.ICandleBuilderSourceValue})" /> в том же потоке, в котором они были получены, или в отдельном.
            По-умолчанию синхронный режим выключен (будет создан отдельный поток).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.BaseCandleBuilderSource.Interval">
      <summary>
            Интервал отправки новых данных. Используется только в случае выключенного <see cref="P:StockSharp.Algo.Candles.BaseCandleBuilderSource.IsSyncProcess" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.BaseCandleBuilderSource.NewValues">
      <summary>
            Событие появления новых данных.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.ConvertableCandleBuilderSource`1.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Candles.ConvertableCandleBuilderSource`1" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.ConvertableCandleBuilderSource`1.NewSourceValues(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Сконвертировать и передать новые данные в метод <see cref="M:StockSharp.Algo.Candles.BaseCandleBuilderSource.RaiseNewValues(System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.ICandleBuilderSourceValue})" />.
            </summary>
      <param name="values">Новые исходные данные.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.ConvertableCandleBuilderSource`1.DefaultConverter">
      <summary>
            Функция по-умолчанию для перевода данных из типа <typeparamref name="TSourceValue" /> в <see cref="T:StockSharp.Algo.Candles.ICandleBuilderSourceValue" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ConvertableCandleBuilderSource`1.Converter">
      <summary>
            Функция для перевода данных из типа <typeparamref name="TSourceValue" /> в <see cref="T:StockSharp.Algo.Candles.ICandleBuilderSourceValue" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.StorageCandleBuilderSource`1.#ctor(StockSharp.Algo.Storages.ITradingStorage)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Candles.StorageCandleBuilderSource`1" />.
            </summary>
      <param name="storage">Хранилище данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.StorageCandleBuilderSource`1.GetStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище данных <typeparamref name="TSourceValue" />.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.StorageCandleBuilderSource`1.Register(StockSharp.BusinessEntities.Security)">
      <summary>
            Запросить получение данных по инструменту.
            </summary>
      <param name="security">Инструмент, для которого необходимо начать получать данные.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.StorageCandleBuilderSource`1.Storage">
      <summary>
            Хранилище данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.StorageCandleBuilderSource`1.MarketTime">
      <summary>
            Текущее время биржи.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.StorageCandleBuilderSource`1.From">
      <summary>
            Начальная дата, с которой необходимо получать данные из хранилища. По-умолчанию равно -5 дней от начала текущей сессии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.StorageCandleBuilderSource`1.To">
      <summary>
            Конечная дата, по которую необходимо получать данные из хранилища. По-умолчанию равно дате начала текущей сессии.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.TradeStorageCandleBuilderSource">
      <summary>
            Источник данных для <see cref="T:StockSharp.Algo.Candles.CandleBuilder" />, получающий тиковые сделки из внешнего хранилища <see cref="T:StockSharp.Algo.Storages.ITradingStorage" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.TradeStorageCandleBuilderSource.#ctor(StockSharp.Algo.Storages.ITradingStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.TradeStorageCandleBuilderSource" />.
            </summary>
      <param name="storage">Хранилище данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.TradeStorageCandleBuilderSource.GetStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище тиковых сделок.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.MarketDepthStorageCandleBuilderSource">
      <summary>
            Источник данных для <see cref="T:StockSharp.Algo.Candles.CandleBuilder" />, получающий тиковые сделки из внешнего хранилища <see cref="T:StockSharp.Algo.Storages.ITradingStorage" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.MarketDepthStorageCandleBuilderSource.#ctor(StockSharp.Algo.Storages.ITradingStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.MarketDepthStorageCandleBuilderSource" />.
            </summary>
      <param name="storage">Хранилище данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.MarketDepthStorageCandleBuilderSource.GetStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище стаканов.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="T:StockSharp.Algo.Testing.RealTimeEmulationTrader`1">
      <summary>
            Тестовый шлюз, предназначенный для тестирования стратегии c реальном подключения к торговой системе через <see cref="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Trader" />,
            но без реального выставления заявок на бирже. Испонение заявок и их сделки эмулируются шлюзом, используя информацию по стаканам, приходящих от реального шлюза.
            </summary>
      <typeparam name="TInnerTrader">Тип реального шлюза, с которым будет вестить тестирование.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.#ctor(`0)">
      <summary>
            Создать шлюз.
            </summary>
      <param name="trader">Реальный шлюз к торговой системе.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Connect">
      <summary>
            Подключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Disconnect">
      <summary>
            Отключиться от торговой системы.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Reconnect">
      <summary>
            Переподключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.ReStartExport">
      <summary>
            Перезапустить экспорт данных из торговой системы через методы <see cref="M:StockSharp.BusinessEntities.ITrader.StopExport" /> и <see cref="M:StockSharp.BusinessEntities.ITrader.StartExport" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.GetPosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security)">
      <summary>
            Найти позицию по портфелю и инструменту.
            </summary>
      <param name="portfolio">Портфель, по которому нужно найти позицию.</param>
      <param name="security">Инструмент, по которому нужно найти позицию.</param>
      <returns>Позиция. Если позиции не найдена, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.GetMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить стакан котировок.
            </summary>
      <param name="security">Инструмент, по которому нужно получить стакан.</param>
      <returns>Найденный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Начать получать новую информацию по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Остановить получение новой информации по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать новую информацию (например, <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" /> или <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение новой информации.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку на бирже.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку на бирже.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять.</param>
      <param name="newOrder">Новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.ReRegisterOrder(StockSharp.BusinessEntities.Order,System.Decimal,System.Decimal)">
      <summary>
            Перерегистрировать заявку на бирже.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять и на основе нее зарегистрировать новую.</param>
      <param name="price">Цена новой заявки.</param>
      <param name="volume">Объем новой заявки.</param>
      <returns>Новая заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку на бирже.
            </summary>
      <param name="order">Заявка, которую нужно отменять.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.CancelOrders(System.Nullable{System.Boolean},StockSharp.BusinessEntities.Portfolio,System.Nullable{StockSharp.BusinessEntities.OrderDirections},System.String,StockSharp.BusinessEntities.Security)">
      <summary>
            Отменить группу заявок на бирже по фильтру.
            </summary>
      <param name="isStopOrder">True, если нужно отменить только стоп-заявки, false - если только обычный и null - если оба типа.</param>
      <param name="portfolio">Портфель. Если значение равно null, то портфель не попадает в фильтр снятия заявок.</param>
      <param name="direction">Направление заявки. Если значение равно null, то направление не попадает в фильтр снятия заявок.</param>
      <param name="classCode">Код класса. Если переданная строка пустая, то код не попадает в фильтр снятия заявок.</param>
      <param name="security">Инструмент. Если значение равно null, то инструмент не попадает в фильтр снятия заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisterQuotes(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать котировки (стакан) по инструменту.
            Значение котировок можно получить через метод <see cref="M:StockSharp.BusinessEntities.ITrader.GetMarketDepth(StockSharp.BusinessEntities.Security)" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать котировки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnRegisterQuotes(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение котировок по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение котировок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать сделки (тиковые данные) по инструменту. Новые сделки будут приходить через событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewTrades" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnRegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение сделок (тиковые данные) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.StartExport">
      <summary>
            Запустить экспорт данных из торговой системы в программу (получение портфелей, инструментов, заявок и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.StopExport">
      <summary>
            Остановить экспорт данных из торговой системы в программу, запущенный через <see cref="M:StockSharp.BusinessEntities.ITrader.StartExport" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Trader">
      <summary>
            Реальный шлюз к торговой системе
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.MarketEmulator">
      <summary>
            Эмулятор биржи.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.TransactionIdGenerator">
      <summary>
            Генератор идентификаторов транзакций.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewPortfolios">
      <summary>
            Событие появления новых портфелей.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.PortfoliosChanged">
      <summary>
            Событие изменения параметров портфелей.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewPositions">
      <summary>
            Событие появления новых позиций.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.PositionsChanged">
      <summary>
            Событие изменения параметров позиций.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewSecurities">
      <summary>
            Событие появления новых инструментов.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.SecuritiesChanged">
      <summary>
            Событие изменения параметров инструментов.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewTrades">
      <summary>
            Событие появления всех новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewMyTrades">
      <summary>
            Событие появления собственных новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewOrders">
      <summary>
            Событие появления новых заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.OrdersChanged">
      <summary>
            Событие изменения состояния заявков (снята, удовлетворена).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.OrdersRegisterFailed">
      <summary>
            Событие об ошибках, связанных с регистрацией заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.OrdersCancelFailed">
      <summary>
            Событие об ошибках, связанных со снятием заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewStopOrders">
      <summary>
            Событие появления новых стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.StopOrdersChanged">
      <summary>
            Событие появления новых стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.StopOrdersRegisterFailed">
      <summary>
            Событие об ошибках, связанных с регистрацией стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.StopOrdersCancelFailed">
      <summary>
            Событие об ошибках, связанных со снятием стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.QuotesChanged">
      <summary>
            Событие изменения стаканов с котировками.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Connected">
      <summary>
            Событие успешного подключения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Disconnected">
      <summary>
            Событие успешного отключения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.ConnectionError">
      <summary>
            Событие ошибки подключения (например, соединения было разорвано).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewDataExported">
      <summary>
            Событие, сигнализирующее о новых экспортируемых данных.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.ProcessDataError">
      <summary>
            Событие, сигнализирующее об ошибке при получении или обработке новых данных с сервера.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.MarketTimeChanged">
      <summary>
            Событие, сигнализирующее об изменении текущего времени.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Securities">
      <summary>
            Список всех загруженных инструментов.
            Вызывать необходимо после того, как пришло событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewSecurities" />. Иначе будет возвращено постое множество.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.MarketTimeOffset">
      <summary>
            Временное смещение. Неоходимо устанавливать, когда торговая программа работает во временной зоне, отличной от биржевой.
            Значение <see cref="P:StockSharp.BusinessEntities.ITrader.MarketTime" /> будет корректироваться в зависимости от установленного значения.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.MarketTime">
      <summary>
            Получить биржевое время.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Orders">
      <summary>
            Получить все заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.StopOrders">
      <summary>
            Получить все стоп-заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.OrderRegisterFails">
      <summary>
            Получить все ошибки при регистрации заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.OrderCancelFails">
      <summary>
            Получить все ошибки при снятии заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Trades">
      <summary>
            Получить все сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.MyTrades">
      <summary>
            Получить все собственные сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Portfolios">
      <summary>
            Получить все портфели.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Positions">
      <summary>
            Получить все позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.IsConnected">
      <summary>
            Проверить соединение.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.IsExportStarted">
      <summary>
            Запущен ли экспорт. Экспорт запускается через метод <see cref="M:StockSharp.BusinessEntities.ITrader.StartExport" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.IsSupportAtomicReRegister">
      <summary>
            Поддерживается ли перерегистрация заявок через метод <see cref="M:StockSharp.BusinessEntities.ITrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)" />
            в виде одной транзакции.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Latency.PortfolioLatencyManager">
      <summary>
            Менеджер задержки для конкретного портфеля.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Latency.TraderLatencyManager">
      <summary>
            Менеджер задержки для всего шлюза <see cref="T:StockSharp.BusinessEntities.ITrader" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.TraderLatencyManager.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать менеджер задержки.
            </summary>
      <param name="trader">Шлюз к торговой системе, для которого необходимо вычислять задержку.</param>
    </member>
    <member name="M:StockSharp.Algo.Latency.TraderLatencyManager.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Latency.TraderLatencyManager.Orders">
      <summary>
            Все заявки, зарегистрированные для мониторинга.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Latency.TraderLatencyManager.Trader">
      <summary>
            Шлюз к торговой системе, для которого необходимо вычислять задержку.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.PortfolioLatencyManager.#ctor(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Создать менеджер задержки.
            </summary>
      <param name="portfolio">Портфель, для которого необходимо вычислять задержку.</param>
    </member>
    <member name="M:StockSharp.Algo.Latency.PortfolioLatencyManager.OnOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Обработчик события появления изменения заявок.
            </summary>
      <param name="orders">Заявки.</param>
    </member>
    <member name="P:StockSharp.Algo.Latency.PortfolioLatencyManager.Orders">
      <summary>
            Все заявки, зарегистрированные для мониторинга.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Latency.PortfolioLatencyManager.Portfolio">
      <summary>
            Портфель, для которого необходимо вычислять задержку.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.ITradingStorage">
      <summary>
            Интерфейс, описывающий внешнее хранилище (база данных, файл и т.д.) торговых сущностей и данных.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.ITradingStorage.GetTradeStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище тиковых сделок для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.ITradingStorage.GetTradeStorage(StockSharp.BusinessEntities.Security,System.String)">
      <summary>
            Получить хранилище тиковых сделок для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="basePath">Путь к директории со сделками.</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.ITradingStorage.GetMarketDepthStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище стаканов для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.ITradingStorage.GetMarketDepthStorage(StockSharp.BusinessEntities.Security,System.String)">
      <summary>
            Получить хранилище стаканов для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="basePath">Путь к директории со стаканами.</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.ITradingStorage.GetCandleStorage``2(StockSharp.BusinessEntities.Security,``1)">
      <summary>
            Получить хранилище свечек для заданного инструмента.
            </summary>
      <typeparam name="TCandle">Тип свечки.</typeparam>
      <typeparam name="TArg">Тип параметра свечки.</typeparam>
      <param name="security">Инструмент.</param>
      <param name="arg">Параметр свечки.</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.ITradingStorage.GetCandleStorage``2(StockSharp.BusinessEntities.Security,``1,System.String)">
      <summary>
            Получить хранилище свечек для заданного инструмента.
            </summary>
      <typeparam name="TCandle">Тип свечки.</typeparam>
      <typeparam name="TArg">Тип параметра свечки.</typeparam>
      <param name="security">Инструмент.</param>
      <param name="arg">Параметр свечки.</param>
      <param name="basePath">Путь к директории со стаканами.</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.ITradingStorage.AddTradeStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.Trade})">
      <summary>
            Добавить хранилище тиковых сделок.
            </summary>
      <param name="storage">Хранилище тиковых сделок</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.ITradingStorage.AddMarketDepthStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.Trade})">
      <summary>
            Добавить хранилище стаканов.
            </summary>
      <param name="storage">Хранилище стаканов.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.ITradingStorage.AddCandleStorage``2(StockSharp.Algo.Storages.IMarketDataStorage{``0},``1)">
      <summary>
            Добавить хранилище свечек.
            </summary>
      <typeparam name="TCandle">Тип свечки.</typeparam>
      <typeparam name="TArg">Тип параметра свечки.</typeparam>
      <param name="storage">Хранилище свечек.</param>
      <param name="arg">Параметр свечки.</param>
    </member>
    <member name="P:StockSharp.Algo.Storages.ITradingStorage.Exchanges">
      <summary>
            Биржи, полученные из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.ITradingStorage.Securities">
      <summary>
            Инструменты, полученные из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.ITradingStorage.Portfolios">
      <summary>
            Портфели, полученные из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.ITradingStorage.Positions">
      <summary>
            Позиции, полученные из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.ITradingStorage.MyTrades">
      <summary>
            Собственные сделки, полученные из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.ITradingStorage.Orders">
      <summary>
            Заявки, полученные из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.ITradingStorage.OrderFails">
      <summary>
            Заявки с ошибками, полученные из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.ITradingStorage.Strategies">
      <summary>
            Информация о стратегиях, полученная из внешнего хранилища.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.Rts.RtsHistorySource">
      <summary>
            Источник для скачивания исторических сделок с RTS.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.BaseHistorySource">
      <summary>
            Базовый класс лоадеров данных.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.BaseHistorySource.#ctor(StockSharp.Algo.History.ISecurityStorage)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.History.BaseHistorySource" />.
            </summary>
      <param name="securityStorage">Интерфейс для доступа к хранилищу информации об инструментах.</param>
    </member>
    <member name="P:StockSharp.Algo.History.BaseHistorySource.SecurityIdGenerator">
      <summary>
            Генератор идентификаторов инструментов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.BaseHistorySource.SecurityStorage">
      <summary>
            Интерфейс для доступа к хранилищу информации об инструментах.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.BaseHistorySource.DumpFolder">
      <summary>
            Путь к директории, куда будут сохранятся скаченные файлы.
            </summary>
      <remarks>
            Если значение равно пустой строке, то данные не сохраняются локально.
            </remarks>
    </member>
    <member name="M:StockSharp.Algo.History.Rts.RtsHistorySource.#ctor(StockSharp.Algo.History.ISecurityStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.History.Rts.RtsHistorySource" />.
            </summary>
      <param name="securityStorage">Интерфейс для доступа к хранилищу информации об инструментах.</param>
    </member>
    <member name="M:StockSharp.Algo.History.Rts.RtsHistorySource.LoadTrades(System.DateTime,System.Collections.Generic.IDictionary{StockSharp.BusinessEntities.Security,System.Collections.Generic.IList{StockSharp.BusinessEntities.Trade}})">
      <summary>
            Загрузить исторические сделки.
            </summary>
      <param name="date">Дата торговой сессии, для которой необходимо получить сделки.</param>
      <param name="trades">Контейнер для загруженных сделок.</param>
      <returns>Исторические сделки.</returns>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.Host">
      <summary>
            Адрес ftp RTS сервера.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.Port">
      <summary>
            Порт ftp RTS сервера.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.UserName">
      <summary>
            Логин к ftp.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.Password">
      <summary>
            Пароль к ftp.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.Exchange">
      <summary>
            Информация о бирже.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.DbfDirectory">
      <summary>
            Путь к папке с историческими данными в формате DBF.
            </summary>
      <remarks>
            Если значение равно пустой строке, то данные в формате DBF не обрабатываются.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.TxtDirectory">
      <summary>
            Путь к папке с историческими данными в формате CSV и Excel.
            </summary>
      <remarks>
            Если значение равно пустой строке, то данные в формате CSV и Excel не обрабатываются.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.DumpFolder">
      <summary>
            Путь к директории, куда будут сохранятся скаченные файлы.
            </summary>
      <remarks>
            Если значение равно пустой строке, то данные сохраняются в текущую директорию.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.SaveRtsStdCombinedOnly">
      <summary>
            Склеивать сделки для инструментов РТС Стандарт (сделки для T+N не разбиваются по папкам).
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Equity.EquityData">
      <summary>
             Данные по эквити.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Equity.EquityData.Time">
      <summary>
             Отметка времени, в которое значение эквити было равным <see cref="P:StockSharp.Algo.Equity.EquityData.Value" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Equity.EquityData.Value">
      <summary>
             Значение эквити.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.DerivativesHelper">
      <summary>
            Вспомогательный класс для работы с производными финансовыми инструментами (деривативами).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetUnderlyingAsset(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить базовый актив по деривативу.
            </summary>
      <param name="derivative">Дериватив.</param>
      <returns>Базовый актив.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Decimal)">
      <summary>
            Отфильтровать опционы по страйку <see cref="P:StockSharp.BusinessEntities.Security.Strike" />.
            </summary>
      <param name="options">Опционы, которые необходимо отфильтровать.</param>
      <param name="strike">Цена страйка.</param>
      <returns>Отфильтрованные опционы.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},StockSharp.BusinessEntities.OptionTypes)">
      <summary>
            Отфильтровать опционы по типу <see cref="P:StockSharp.BusinessEntities.Security.OptionType" />.
            </summary>
      <param name="options">Опционы, которые необходимо отфильтровать.</param>
      <param name="type">Тип опциона.</param>
      <returns>Отфильтрованные опционы.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},StockSharp.BusinessEntities.Security)">
      <summary>
            Отфильтровать инструменты по базовому активу.
            </summary>
      <param name="securities">Инструменты, которые необходимо отфильтровать.</param>
      <param name="asset">Базовый актив.</param>
      <returns>Отфильтрованные инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Nullable{System.DateTime})">
      <summary>
            Отфильтровать инструменты по дате экспирации <see cref="P:StockSharp.BusinessEntities.Security.ExpiryDate" />.
            </summary>
      <param name="securities">Инструменты, которые необходимо отфильтровать.</param>
      <param name="expiryDate">Дата экспирации.</param>
      <returns>Отфильтрованные инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetDerivatives(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить деривативы по базовому активу.
            </summary>
      <param name="asset">Базовый актив.</param>
      <returns>Список из деривативов.</returns>
      <remarks>Возвращает пустой список, если деривативов не найдено.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Invert(StockSharp.BusinessEntities.OptionTypes)">
      <summary>
            Поменять тип опциона на противоположное.
            </summary>
      <param name="type">Первоначальное значение.</param>
      <returns>Противоположное значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOppositeOption(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить противоположный опцион (для Call получить Put, для Put получить Call).
            </summary>
      <param name="option">Опцион.</param>
      <returns>Противоположный опцион.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetCall(StockSharp.BusinessEntities.Security,System.Decimal,System.DateTime)">
      <summary>
            Получить Call для базового фьючерса.
            </summary>
      <param name="future">Базовый фьючерс.</param>
      <param name="strike">Страйк.</param>
      <param name="expiryDate">Дата экспирации опциона.</param>
      <returns>Опцион Call.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetPut(StockSharp.BusinessEntities.Security,System.Decimal,System.DateTime)">
      <summary>
            Получить Put для базового фьючерса.
            </summary>
      <param name="future">Базовый фьючерс.</param>
      <param name="strike">Страйк.</param>
      <param name="expiryDate">Дата экспирации опциона.</param>
      <returns>Опцион Put.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOption(StockSharp.BusinessEntities.Security,System.Decimal,System.DateTime,StockSharp.BusinessEntities.OptionTypes)">
      <summary>
            Получить опцион для базового фьючерса.
            </summary>
      <param name="future">Базовый фьючерс.</param>
      <param name="strike">Страйк.</param>
      <param name="expiryDate">Дата экспирации опциона.</param>
      <param name="optionType">Тип опциона.</param>
      <returns>Опцион.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.IsExpired(StockSharp.BusinessEntities.Security)">
      <summary>
            Проверить, закончил ли действие инструмент.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>True, если инструмент закончил свое действие.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOptionInfo(System.String)">
      <summary>
            Получить из названия опциона его информацию (базовый актив, страйк, дата экспирации и т.д.).
            </summary>
      <param name="optionName">Название опциона.</param>
      <returns>Информация об опционе.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetFutureInfo(System.String,System.String)">
      <summary>
            Получить из названия фьючерса его информацию (базовый актив, дата экспирации и т.д.).
            </summary>
      <param name="futureName">Название фьючерса.</param>
      <param name="optionCode">Код опциона.</param>
      <returns>Информация о фьючерсе.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.IV(StockSharp.BusinessEntities.MarketDepth,System.Decimal,System.Decimal)">
      <summary>
            Создать стакан волатильности из обычного стакана.
            </summary>
      <param name="depth">Стакан, котировки которого будут переведены в котировки с волатильностью.</param>
      <param name="riskFree">Безрисковая процентная ставка.</param>
      <param name="dividend">Размер дивиденда по акциям.</param>
      <returns>Стакан волатильности.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.IV(StockSharp.BusinessEntities.MarketDepth,StockSharp.Algo.Derivatives.BlackScholes)">
      <summary>
            Создать стакан волатильности из обычного стакана.
            </summary>
      <param name="depth">Стакан, котировки которого будут переведены в котировки с волатильностью.</param>
      <param name="model">Модель расчета значений "греков" по формуле Блэка-Шоулза.</param>
      <returns>Стакан волатильности.</returns>
    </member>
    <member name="T:StockSharp.Algo.Strategies.TakeProfitStopLossStrategy">
      <summary>
            Стратегия, защищающая сделки одновременно стратегиями <see cref="T:StockSharp.Algo.Strategies.TakeProfitStrategy" /> и <see cref="T:StockSharp.Algo.Strategies.StopLossStrategy" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.BasketStrategy">
      <summary>
            Пакетная стратегия, содержащая в себе дочерние стратегии, которые влияют друг на друга своим исполнением.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BasketStrategy.#ctor(StockSharp.Algo.Strategies.BasketStrategyFinishModes)">
      <summary>
            Создать стратегию.
            </summary>
      <param name="finishMode">Условие окончания работы дочерних стратегий.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BasketStrategy.OnStarting">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.Strategies.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BasketStrategy.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.BasketStrategy.FinishMode">
      <summary>
            Условие окончания работы дочерних стратегий.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.BasketStrategy.FirstFinishStrategy">
      <summary>
            Первая остановившаяся дочерняя стратегия. Свойство заполняется при <see cref="P:StockSharp.Algo.Strategies.BasketStrategy.FinishMode" /> равным <see cref="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.First" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TakeProfitStopLossStrategy.#ctor(StockSharp.Algo.Strategies.TakeProfitStrategy,StockSharp.Algo.Strategies.StopLossStrategy)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.TakeProfitStopLossStrategy" /></summary>
      <param name="takeProfit">Стратегия защиты прибыли.</param>
      <param name="stopLoss">Стратегия защиты убытка.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TakeProfitStopLossStrategy.ProtectiveVolume">
      <summary>
            Защищаемый объем.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.TakeProfitStopLossStrategy.ProtectiveVolumeChanged">
      <summary>
            Событие об изменении защищаемого объема.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TakeProfitStopLossStrategy.Trade">
      <summary>
            Защищаемая позиция.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.MarketQuotingStrategy">
      <summary>
            Котирование по рыночной цене.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.MarketQuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.MarketQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.MarketQuotingStrategy.#ctor(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Unit,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.MarketQuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <param name="bestPriceOffset">Отступ от лучшей цены, на которую может уйти котируемая заявка.</param>
      <param name="priceOffset">Отступ цены для выставляемой заявки. Определяет размер отступа от лучшей котировки (для покупки прибавляется к цене, для продажи - вычитается).</param>
      <returns>Стратегия.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.MarketQuotingStrategy.GetNewPrice">
      <summary>
            Получить новую цену для заявки.
            </summary>
      <returns>Новая цена заявки.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.MarketQuotingStrategy.PriceType">
      <summary>
            Тип рыночной цены. По умолчанию равен <see cref="F:StockSharp.Algo.MarketPriceTypes.Following" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.MarketQuotingStrategy.PriceOffset">
      <summary>
            Отступ цены для выставляемой заявки. Определяет размер отступа от лучшей котировки (для покупки прибавляется к цене, для продажи - вычитается).
            </summary>
    </member>
    <member name="T:StockSharp.Algo.PnL.TraderPnLManager">
      <summary>
            Менеджер прибыли-убытка для шлюза <see cref="T:StockSharp.BusinessEntities.ITrader" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.PnL.BasketSecurityPnLManager">
      <summary>
            Менеджер прибыли-убытка, работающий с несколькими инструментами.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.BasketSecurityPnLManager.Init">
      <summary>
            Инициализировать первоначальное состояние менеджера прибыли-убытка.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.BasketSecurityPnLManager.GetCurencyMultiplier(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить множитель для валюты, в которой торгуется инструмент. Необходимо для сложения прибылей-убытков, расчитанных в разных валютах.
            </summary>
      <param name="security">Инструмент, для котого необходимо получить множитель.</param>
      <returns>Множитель для валюты инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.PnL.BasketSecurityPnLManager.OnNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Обработчик события появления новых Моих Сделок.
            </summary>
      <param name="trades">Новые Мои Сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.PnL.BasketSecurityPnLManager.OnSecuritiesChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>
            Обработчик события изменения инструментов.
            </summary>
      <param name="securities">Измененные инструменты.</param>
    </member>
    <member name="P:StockSharp.Algo.PnL.BasketSecurityPnLManager.Trades">
      <summary>
            Все сделки, по которым была посчитана прибыль-убыток.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.BasketSecurityPnLManager.PnL">
      <summary>
            Значение прибыли-убытка с учетом открытой позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.BasketSecurityPnLManager.RelatedValue">
      <summary>
            Относительное значение прибыли-убытка без учета открытой позиции.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.TraderPnLManager.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать менеджер прибыли-убытка.
            </summary>
      <param name="trader">Шлюз к торговой системе, для которого необходимо учитывать прибыль-убыток.</param>
    </member>
    <member name="M:StockSharp.Algo.PnL.TraderPnLManager.GetCurencyMultiplier(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить множитель для валюты, в которой торгуется инструмент. Необходимо для сложения прибылей-убытков, расчитанных в разных валютах.
            </summary>
      <param name="security">Инструмент, для котого необходимо получить множитель.</param>
      <returns>Множитель для валюты инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.PnL.TraderPnLManager.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.TraderPnLManager.Trader">
      <summary>
            Шлюз к торговой системе, для которого необходимо учитывать прибыль-убыток.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.TraderPnLManager.Trades">
      <summary>
            Все сделки, по которым была посчитана прибыль-убыток.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.StrategyInfoList">
      <summary>
            Класс для представления в виде списка информацию о стратегиях, хранящихся в базе данных.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.StrategyInfoList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.StrategyInfoList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StrategyInfoList.LoadByStrategyId(System.Guid)">
      <summary>
            Загрузить информацию о стратегии по уникальному идентификатору.
            </summary>
      <param name="strategyId">Уникальный идентификатор стратегии.</param>
      <returns>Информация о стратегии.</returns>
    </member>
    <member name="T:StockSharp.Algo.History.ISecurityStorage">
      <summary>
            Интерфейс для доступа к хранилищу информации об инструментах.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.ISecurityStorage.LoadBy(System.String,System.Object)">
      <summary>
            Загрузить инструмент по значению его поля.
            </summary>
      <param name="fieldName">Название поля инструмента.</param>
      <param name="fieldValue">Значение поля инструмента.</param>
      <returns>Загруженный инструмент.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.ISecurityStorage.Save(StockSharp.BusinessEntities.Security)">
      <summary>
            Сохранить инструмент.
            </summary>
      <param name="security">Инструмент.</param>
    </member>
    <member name="T:StockSharp.Algo.Logging.UnhandledExceptionSource">
      <summary>
            Источник логов, отсылающий информацию о необработанных ошибках <see cref="E:System.AppDomain.UnhandledException" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.UnhandledExceptionSource.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.UnhandledExceptionSource" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Logging.BaseLogReceiver">
      <summary>
            Базовая реализация <see cref="T:StockSharp.Algo.Logging.ILogReceiver" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.BaseLogReceiver.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Logging.BaseLogReceiver" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.NonTradingDealTypes">
      <summary>
            Флаг, показывающий - игнорировать или нет сделки, заключенные в период пред- и после- торгов.
            Значение по умолчанию - Ignore.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Candles.NonTradingDealTypes.Ignore">
      <summary>
            Игнорировать.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Candles.NonTradingDealTypes.Include">
      <summary>
            Включать.
            </summary>
      <remarks>
            То что до торгов - добавляется к первой свечке, после - к последней.
            </remarks>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleBuilder">
      <summary>
            Построитель свечек. Через источник <see cref="T:StockSharp.Algo.Candles.ICandleBuilderSource" /> подключается к событию <see cref="E:StockSharp.Algo.Candles.ICandleBuilderSource.NewValues" />,
            и на основе полученных данных строит свечки по заданным критериям.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleSource">
      <summary>
            Источник свечек для <see cref="T:StockSharp.Algo.Candles.ICandleManager" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleSource.GetToken(System.Type,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Найти идентификатор группировки свечек по заданным параметрам.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <param name="security">Инструмент, для которого зарегистрирована группировка.</param>
      <param name="arg">Параметр формирования свечки. Например, для <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" /> это значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.</param>
      <returns>Идентификатор группировки. Если такой группировки не зарегистрировано, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleSource.IsSupport(System.Type,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Возможно ли зарегистрировать группировку свечек.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <param name="security">Инструмент, по которому нужно фильтровать сделки для формирования свечек.</param>
      <param name="arg">Параметр формирования свечки. Например, для <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" /> это значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.</param>
      <returns>True, если через данный источник возможно зарегистрировать группировку свечек, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleSource.Register(System.Type,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Зарегистрировать группировку свечек.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <param name="security">Инструмент, по которому нужно фильтровать сделки для формирования свечек.</param>
      <param name="arg">Параметр формирования свечки. Например, для <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" /> это значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleSource.UnRegister(StockSharp.Algo.Candles.CandleToken)">
      <summary>
            Удалить группировку свечек.
            </summary>
      <param name="token">Идентификатор группировки, полученный при регистрации.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleSource.Tokens">
      <summary>
            Все зарегистрированные идентификаторы группировок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.ICandleSource.CandlesStarted">
      <summary>
            Событие начала формирования свечек.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.ICandleSource.CandlesChanged">
      <summary>
            Событие изменения свечек.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.ICandleSource.CandlesFinished">
      <summary>
            Событие окончания формирования свечек.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.ICandleSource.ProcessDataError">
      <summary>
            Событие ошибки формирования свечек.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilder.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleBuilder" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilder.#ctor(StockSharp.Algo.Candles.ICandleBuilderContainer)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleManager" />.
            </summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilder.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleManager" />.
            </summary>
      <param name="trader">Шлюз к торговой системе для создания источника тиковых сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilder.#ctor(StockSharp.Algo.Candles.ICandleBuilderSource)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleManager" />.
            </summary>
      <param name="source">Источник данных по-умолчанию.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilder.GetToken(System.Type,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Найти идентификатор группировки свечек по заданным параметрам.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <param name="security">Инструмент, для которого зарегистрирована группировка.</param>
      <param name="arg">Параметр формирования свечки. Например, для <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" /> это значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.</param>
      <returns>Идентификатор группировки. Если такой группировки не зарегистрировано, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilder.IsSupport(System.Type,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Возможно ли зарегистрировать группировку свечек.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <param name="security">Инструмент, по которому нужно фильтровать сделки для формирования свечек.</param>
      <param name="arg">Параметр формирования свечки. Например, для <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" /> это значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.</param>
      <returns>True, если через данный источник возможно зарегистрировать группировку свечек, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilder.Register(System.Type,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Зарегистрировать группировку свечек.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <param name="security">Инструмент, по которому нужно фильтровать сделки для формирования свечек.</param>
      <param name="arg">Параметр формирования свечки. Например, для <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" /> это значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilder.UnRegister(StockSharp.Algo.Candles.CandleToken)">
      <summary>
            Удалить группировку свечек.
            </summary>
      <param name="token">Идентификатор группировки, полученный при регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilder.RaiseNewCandles(StockSharp.Algo.Candles.CandleToken,System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Candle})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.CandleBuilder.CandlesStarted" />.
            </summary>
      <param name="token">Идентификатор.</param>
      <param name="candles">Свечки, которые необходимо передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilder.RaiseCandlesChanged(StockSharp.Algo.Candles.CandleToken,System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Candle})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.CandleBuilder.CandlesChanged" />.
            </summary>
      <param name="token">Идентификатор.</param>
      <param name="candles">Свечки, которые необходимо передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilder.RaiseCandlesFinished(StockSharp.Algo.Candles.CandleToken,System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Candle})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.CandleBuilder.CandlesFinished" />.
            </summary>
      <param name="token">Идентификатор.</param>
      <param name="candles">Свечки, которые необходимо передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilder.RaiseProcessDataError(System.Exception)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.CandleBuilder.ProcessDataError" />.
            </summary>
      <param name="error">Информация об ошибке.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilder.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleBuilder.Sources">
      <summary>
            Источники данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleBuilder.Factories">
      <summary>
            Список всех заругистрированных фабрик свечек.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleBuilder.Container">
      <summary>
            Kонтейнер данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleBuilder.Tokens">
      <summary>
            Все зарегистрированные идентификаторы группировок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleBuilder.IsSyncRegister">
      <summary>
            Выполнять ли формирование новых свечек в том же потоке, в котором вызван метод <see cref="M:StockSharp.Algo.Candles.CandleBuilder.Register(System.Type,StockSharp.BusinessEntities.Security,System.Object)" />.
            </summary>
      <remarks>По умолчанию значение установлено в false.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleBuilder.NonTradingDealType">
      <summary>
            Игнорировать ли сделки, заключенные в период пред- и после- торгов.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleBuilder.CandlesStarted">
      <summary>
            Событие начала формирования свечек.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleBuilder.CandlesChanged">
      <summary>
            Событие изменения свечек.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleBuilder.CandlesFinished">
      <summary>
            Событие окончания формирования свечек.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleBuilder.ProcessDataError">
      <summary>
            Событие ошибки формирования свечек.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleBuilderSourceList">
      <summary>
            Коллекция источников данных.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleFactoryList">
      <summary>
            Интерфейс коллекции фабрик свечек.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleFactoryList.Remove(System.Type)">
      <summary>
            Удалить фабрику для заданного типа свечки <paramref name="candleType" />.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <returns>True, если фабрика для данного типа свечки была найдена и удалена. Иначе, false.</returns>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleFactoryList.Item(System.Type)">
      <summary>
            Получить фабрику для заданного типа свечки <paramref name="candleType" />.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <returns>Найденная фабрика. Если не было найденно ни одной фабрики, то будет возвращено null.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.OrderList">
      <summary>
            Класс для представления в виде списка заявок, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.OrderList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.OrderList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Slippage.PortfolioSlippageManager">
      <summary>
            Менеджер проскальзывания для конкретного портфеля.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Slippage.TraderSlippageManager">
      <summary>
            Менеджер проскальзывания для всего шлюза <see cref="T:StockSharp.BusinessEntities.ITrader" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Slippage.BaseSlippageManager">
      <summary>
            Базовый менеджер проскальзывания.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.BaseSlippageManager.Init">
      <summary>
            Инициализировать первоначальное состояние менеджера проскальзывания. Если менеджер включается в середине торговой сессии,
            то через свойство <see cref="P:StockSharp.Algo.Slippage.BaseSlippageManager.Trades" /> получаются все сделки, на основе которых и происходит формирование проскальзывания.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.BaseSlippageManager.Register(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку для начала мониторинга проскальзывания. Ожидаемая цена равна <see cref="P:StockSharp.BusinessEntities.Order.Price" />.
            </summary>
      <param name="order">Заявка, на основе которой необходимо вычислять проскальзывание.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.BaseSlippageManager.Register(StockSharp.BusinessEntities.Order,System.Decimal)">
      <summary>
            Зарегистрировать заявку для начала мониторинга проскальзывания.
            </summary>
      <param name="order">Заявка, на основе которой необходимо вычислять проскальзывание.</param>
      <param name="estimatedPrice">Ожидаемая цена сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.BaseSlippageManager.ReRegister(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку oldOrder с новой ценой из newOrder.
            </summary>
      <param name="oldOrder">Старая заявка, которая мониторится на учет проскальзывания.</param>
      <param name="newOrder">Новая заявка, которая содержит обновленную ожидаемую цену по сделкам.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.BaseSlippageManager.GetSlippage(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить текущее проскальзывание по заявке.
            Если заявка все еще активна, то возвращается проскальзывание,
            рассчитанное на основе частично исполненных сделок.
            </summary>
      <param name="order">Заявка, по которой необходимо получить проскальзывание.</param>
      <returns>Значение проскальзывания.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.BaseSlippageManager.GetOriginalOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить для текущей заявки изначальную, с цены которой начался мониторинг проскальзывания.
            </summary>
      <param name="order">Текущая заявка.</param>
      <returns>Изначальная заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.BaseSlippageManager.GetEstimatedPrice(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить ожидаемую цену сделки для заявки.
            </summary>
      <param name="order">Заявка, для которой необходимо получить ожидаемую цену сделки для заявки.</param>
      <returns>Ожидаемая цена сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.BaseSlippageManager.GetSlippage(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Получить проскальзывание по сделке.
            В качестве ожидаемой цены берется цена первоначальной заявки, которая в результате
            изменений цены через перерегистрацию <see cref="M:StockSharp.Algo.Slippage.BaseSlippageManager.ReRegister(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)" /> привела к сделке.
            </summary>
      <param name="trade">Сделка, для которой необходимо получить проскальзывание.</param>
      <returns>Значение проскальзывания.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.BaseSlippageManager.OnNewOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Обработчик события появления новой заявки.
            </summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.BaseSlippageManager.OnNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Обработчик события появления новых Моих Сделок.
            </summary>
      <param name="trades">Новые Мои Сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.BaseSlippageManager.RaiseSlippageChanged">
      <summary>
            Вызывать событие <see cref="E:StockSharp.Algo.Slippage.BaseSlippageManager.SlippageChanged" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.BaseSlippageManager.Orders">
      <summary>
            Все заявки, зарегистрированные для мониторинга.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.BaseSlippageManager.Trades">
      <summary>
            Все сделки, по которым было посчитано проскальзывание.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.BaseSlippageManager.Slippage">
      <summary>
            Общее значение проскальзывания по всем заявкам, зарегистрированным через <see cref="M:StockSharp.Algo.Slippage.BaseSlippageManager.Register(StockSharp.BusinessEntities.Order)" />
            или <see cref="M:StockSharp.Algo.Slippage.BaseSlippageManager.Register(StockSharp.BusinessEntities.Order,System.Decimal)" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Slippage.BaseSlippageManager.SlippageChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Slippage.BaseSlippageManager.Slippage" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Slippage.BaseSlippageManager.ReRegistered">
      <summary>
            Событие о перерегистрации заявки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.TraderSlippageManager.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать менеджер проскальзывания.
            </summary>
      <param name="trader">Шлюз к торговой системе, для которого необходимо учитывать проскальзывание.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.TraderSlippageManager.OnNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.NewOrders" />.
            </summary>
      <param name="orders">Новые заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.TraderSlippageManager.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.TraderSlippageManager.Trader">
      <summary>
            Шлюз к торговой системе, для которого необходимо учитывать проскальзывание.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.TraderSlippageManager.Orders">
      <summary>
            Все заявки, зарегистрированные для мониторинга.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.TraderSlippageManager.Trades">
      <summary>
            Все сделки, по которым было посчитано проскальзывание.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.PortfolioSlippageManager.#ctor(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Создать менеджер проскальзывания.
            </summary>
      <param name="portfolio">Портфель, для которого необходимо учитывать проскальзывание.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.PortfolioSlippageManager.OnNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.NewOrders" />.
            </summary>
      <param name="orders">Новые заявки.</param>
    </member>
    <member name="P:StockSharp.Algo.Slippage.PortfolioSlippageManager.Orders">
      <summary>
            Все заявки, зарегистрированные для мониторинга.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.PortfolioSlippageManager.Trades">
      <summary>
            Все сделки, по которым было посчитано проскальзывание.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.PortfolioSlippageManager.Portfolio">
      <summary>
            Портфель, для которого необходимо учитывать проскальзывание.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.LimitQuotingStrategy">
      <summary>
            Стратерия, реализующая алгоритм котирования объема по лимитированной цене.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.LimitQuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.LimitQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
      <param name="limitPrice">Лимитированная цена для котируемых заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.LimitQuotingStrategy.#ctor(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.LimitQuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.LimitQuotingStrategy.GetNewPrice">
      <summary>
            Получить новую цену для заявки.
            </summary>
      <returns>Новая цена заявки.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.LimitQuotingStrategy.LimitPrice">
      <summary>
            Лимитированная цена для котируемых заявок.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.ExchangeList">
      <summary>
            Класс для представления в виде списка бирж, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.ExchangeList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.ExchangeList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Reporting.CsvStrategyReport">
      <summary>
             Генератор отчета по эквити стратегии в формате Csv.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Reporting.StrategyReport">
      <summary>
            Базовый генератор отчета для стратегии.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Reporting.StrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Инициализировать генератор.
            </summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
    </member>
    <member name="M:StockSharp.Algo.Reporting.StrategyReport.Generate">
      <summary>
            Сгенерировать отчет. В дочерних класса в этом методе реализуется логика генерации.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Reporting.StrategyReport.Format(System.TimeSpan)">
      <summary>
            Отформатировать время в строку.
            </summary>
      <param name="time">Время.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Reporting.StrategyReport.Format(System.DateTime)">
      <summary>
            Отформатировать время в строку.
            </summary>
      <param name="time">Время.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Reporting.StrategyReport.Format(StockSharp.BusinessEntities.OrderDirections)">
      <summary>
            Отформатировать направление заявки в строку.
            </summary>
      <param name="direction">Направление заявки.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Reporting.StrategyReport.Format(StockSharp.BusinessEntities.OrderStates)">
      <summary>
            Отформатировать состояние заявки в строку.
            </summary>
      <param name="state">Состояние заявки.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Reporting.StrategyReport.Format(StockSharp.BusinessEntities.OrderTypes)">
      <summary>
            Отформатировать тип заявки в строку.
            </summary>
      <param name="type">Тип заявки.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="P:StockSharp.Algo.Reporting.StrategyReport.Strategy">
      <summary>
            Стратегия, для которой необходимо сгенерировать отчет.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Reporting.CsvStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
      <summary>
            Создать генератор Csv отчетов.
            </summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Csv.</param>
    </member>
    <member name="M:StockSharp.Algo.Reporting.CsvStrategyReport.Generate">
      <summary>
            Сгенерировать отчет в формате Csv.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Reporting.CsvStrategyReport.FileName">
      <summary>
            Название файла, в котором сгенерируется отчет.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.IEntityFactory">
      <summary>
            Интерфейс фабрики бизнес-сущностей (<see cref="T:StockSharp.BusinessEntities.Security" />, <see cref="T:StockSharp.BusinessEntities.Order" /> и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateSecurity(System.String)">
      <summary>
            Создать инструмент по идентификатору.
            </summary>
      <param name="id">Идентификатор инструмента.</param>
      <returns>Созданный инструмент.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreatePortfolio(System.String)">
      <summary>
            Создать портфель по номеру счета.
            </summary>
      <param name="name">Номер счета.</param>
      <returns>Созданный портфель.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreatePosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security)">
      <summary>
            Создать позицию.
            </summary>
      <param name="portfolio">Портфель.</param>
      <param name="security">Инструмент.</param>
      <returns>Созданная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateTrade(System.Int64)">
      <summary>
            Создать тиковую сделку по ее номеру.
            </summary>
      <param name="id">Номер сделки.</param>
      <returns>Созданная сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateOrder(System.Int64)">
      <summary>
            Создать заявку по ее номеру.
            </summary>
      <param name="id">Номер заявки.</param>
      <returns>Созданная заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateOrderFail(StockSharp.BusinessEntities.Order,System.Exception)">
      <summary>
            Создать описание ошибки для заявки.
            </summary>
      <param name="order">Заявка.</param>
      <param name="error">Системное описание ошибки.</param>
      <returns>Созданное описание ошибки.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateMyTrade(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
      <summary>
            Создать собственную сделку.
            </summary>
      <param name="order">Заявка.</param>
      <param name="trade">Тиковая сделка.</param>
      <returns>Созданная собственная сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать стакан для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Созданный стакан.</returns>
    </member>
    <member name="T:StockSharp.Algo.EntityFactory">
      <summary>
            Фабрика бизнес-сущностей (<see cref="T:StockSharp.BusinessEntities.Security" />, <see cref="T:StockSharp.BusinessEntities.Order" /> и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateSecurity(System.String)">
      <summary>
            Создать инструмент по идентификатору.
            </summary>
      <param name="id">Идентификатор инструмента.</param>
      <returns>Созданный инструмент.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreatePortfolio(System.String)">
      <summary>
            Создать портфель по номеру счета.
            </summary>
      <param name="name">Номер счета.</param>
      <returns>Созданный портфель.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreatePosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security)">
      <summary>
            Создать позицию.
            </summary>
      <param name="portfolio">Портфель.</param>
      <param name="security">Инструмент.</param>
      <returns>Созданная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateTrade(System.Int64)">
      <summary>
            Создать тиковую сделку по ее номеру.
            </summary>
      <param name="id">Номер сделки.</param>
      <returns>Созданная сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateOrder(System.Int64)">
      <summary>
            Создать заявку по ее номеру.
            </summary>
      <param name="id">Номер заявки.</param>
      <returns>Созданная заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateOrderFail(StockSharp.BusinessEntities.Order,System.Exception)">
      <summary>
            Создать описание ошибки для заявки.
            </summary>
      <param name="order">Заявка.</param>
      <param name="error">Системное описание ошибки.</param>
      <returns>Созданное описание ошибки.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateMyTrade(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
      <summary>
            Создать собственную сделку.
            </summary>
      <param name="order">Заявка.</param>
      <param name="trade">Тиковая сделка.</param>
      <returns>Созданная собственная сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать стакан для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Созданный стакан.</returns>
    </member>
    <member name="T:StockSharp.Algo.Equity.IEquityParameter">
      <summary>
            Интерфейс, описывающий параметр кривой эквити.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Equity.IEquityParameter.Name">
      <summary>
            Название параметра.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Equity.IEquityParameter.Value">
      <summary>
            Текущее значение параметра.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Equity.IEquityParameter.ValueChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Equity.IEquityParameter.Value" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Equity.IPnLEquityParameter">
      <summary>
            Интерфейс, описывающий параметр кривой эквити, рассчитанного на основе значение прибыли-убытка (максимальная просадка, коэффициент Шарпа и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Equity.IPnLEquityParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="T:StockSharp.Algo.Equity.ITradeEquityParameter">
      <summary>
            Интерфейс, описывающий параметр кривой эквити, рассчитанного на основе сделки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Equity.ITradeEquityParameter.Add(StockSharp.BusinessEntities.MyTrade,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="trade">Сделка, которая инициировала изменение прибыли-убытка.</param>
      <param name="tradePnL">Значение прибыли-убытка относительно сделки.</param>
    </member>
    <member name="T:StockSharp.Algo.Equity.BaseEquityParameter">
      <summary>
            Базовый параметр кривой эквити.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Equity.BaseEquityParameter.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Equity.BaseEquityParameter" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Equity.BaseEquityParameter.RaiseValueChanged">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Equity.BaseEquityParameter.ValueChanged" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Equity.BaseEquityParameter.Name">
      <summary>
            Название параметра.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Equity.BaseEquityParameter.Value">
      <summary>
            Текущее значение параметра.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Equity.BaseEquityParameter.ValueChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Equity.BaseEquityParameter.Value" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Equity.MaxEquityParameter">
      <summary>
            Максимальная значение эквити за весь период.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Equity.MaxEquityParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="T:StockSharp.Algo.Equity.MaxDrawdownParameter">
      <summary>
            Максимальная абсолютная просадка эквити за весь период.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Equity.MaxDrawdownParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="T:StockSharp.Algo.Equity.MaxRelativeDrawdownParameter">
      <summary>
            Максимальная относительная просадка эквити за весь период.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Equity.MaxRelativeDrawdownParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="T:StockSharp.Algo.Equity.ReturnParameter">
      <summary>
            Относительная прибыль за весь отрезок времени.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Equity.ReturnParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="T:StockSharp.Algo.Equity.RecoveryFactorParameter">
      <summary>
            Коэффициент восстановления (чистая прибыль / максимальная просадка).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Equity.RecoveryFactorParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="T:StockSharp.Algo.Equity.NetProfitParameter">
      <summary>
            Чистая прибыль за весь отрезок времени.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Equity.NetProfitParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="T:StockSharp.Algo.Equity.WinningTradesParameter">
      <summary>
            Количество выигранных сделок (прибыль которых больше 0).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Equity.WinningTradesParameter.Add(StockSharp.BusinessEntities.MyTrade,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="trade">Сделка, которая инициировала изменение прибыли-убытка.</param>
      <param name="tradePnL">Значение прибыли-убытка относительно сделки.</param>
    </member>
    <member name="T:StockSharp.Algo.Equity.LossingTradesParameter">
      <summary>
            Количество проигранных сделок (прибыль которых меньше 0).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Equity.LossingTradesParameter.Add(StockSharp.BusinessEntities.MyTrade,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="trade">Сделка, которая инициировала изменение прибыли-убытка.</param>
      <param name="tradePnL">Значение прибыли-убытка относительно сделки.</param>
    </member>
    <member name="T:StockSharp.Algo.Strategies.VolatilityQuotingStrategy">
      <summary>
            Котирование опционов по волатильности.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.VolatilityQuotingStrategy.#ctor(Ecng.ComponentModel.Range{System.Decimal},StockSharp.BusinessEntities.OrderDirections,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.VolatilityQuotingStrategy" />.
            </summary>
      <param name="ivRange">Границы волатильности.</param>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.VolatilityQuotingStrategy.#ctor(Ecng.ComponentModel.Range{System.Decimal},StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.VolatilityQuotingStrategy" />.
            </summary>
      <param name="ivRange">Границы волатильности.</param>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <param name="bestPriceOffset">Отступ от лучшей цены, на которую может уйти котируемая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.VolatilityQuotingStrategy.GetNewPrice">
      <summary>
            Получить новую цену для заявки.
            </summary>
      <returns>Новая цена заявки.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.VolatilityQuotingStrategy.IVRange">
      <summary>
            Границы волатильности.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.VolatilityQuotingStrategy.Security">
      <summary>
            Инструмент.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Reporting.ExcelStrategyReport">
      <summary>
            Генератор отчета для стратегии в формате Excel.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Reporting.ExcelStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
      <summary>
            Создать генератор Excel отчетов.
            </summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Excel.</param>
    </member>
    <member name="M:StockSharp.Algo.Reporting.ExcelStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String,System.String)">
      <summary>
            Создать генератор Excel отчетов.
            </summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Excel.</param>
      <param name="template">Файл-шаблон, который будет скопирован в <see cref="P:StockSharp.Algo.Reporting.ExcelStrategyReport.FileName" /> и дозаполнен листом <see cref="P:StockSharp.Algo.Reporting.ExcelStrategyReport.SheetName" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Reporting.ExcelStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String,System.String,System.String)">
      <summary>
            Создать генератор Excel отчетов.
            </summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Excel.</param>
      <param name="template">Файл-шаблон, который будет скопирован в <see cref="P:StockSharp.Algo.Reporting.ExcelStrategyReport.FileName" /> и дозаполнен листом <see cref="P:StockSharp.Algo.Reporting.ExcelStrategyReport.SheetName" />.</param>
      <param name="sheetName">Названия листа, в который будет записан отчет.</param>
    </member>
    <member name="M:StockSharp.Algo.Reporting.ExcelStrategyReport.Generate">
      <summary>
            Сгенерировать отчет в формате Excel.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Reporting.ExcelStrategyReport.FileName">
      <summary>
            Название файла, в котором сгенерируется отчет в формате Excel.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Reporting.ExcelStrategyReport.Template">
      <summary>
            Файл-шаблон, который будет скопирован в <see cref="P:StockSharp.Algo.Reporting.ExcelStrategyReport.FileName" /> и дозаполнен листами Strategy, Orders и Trades.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Reporting.ExcelStrategyReport.SheetName">
      <summary>
            Названия листа, в который будет записан отчет.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Reporting.ExcelStrategyReport.ExcelVersion">
      <summary>
            Версия Excel-я. Влияет на максимальное количество строчек. По-умолчанию установлено значение 2007.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Logging.EmailLogListener">
      <summary>
            Логгер, отсылающий данные на email. 
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.EmailLogListener.#ctor(System.String,System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.EmailLogListener" />.
            </summary>
      <param name="from">Адрес, от имени которого будет отравлено сообщение.</param>
      <param name="to">Адрес, куда будет отравлено сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.EmailLogListener.CreateClient">
      <summary>
            Создать email клиента.
            </summary>
      <returns>Email клиент.</returns>
    </member>
    <member name="M:StockSharp.Algo.Logging.EmailLogListener.CreateMail(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Создать email сообщение по полученным данным.
            </summary>
      <param name="message">Отладочное сообщение.</param>
      <returns>Email сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Logging.EmailLogListener.OnWriteMessage(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Записать сообщение.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="P:StockSharp.Algo.Logging.EmailLogListener.From">
      <summary>
            Адрес, от имени которого будет отравлено сообщение.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Logging.EmailLogListener.To">
      <summary>
            Адрес, куда будет отравлено сообщение.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.ProtectiveStrategy">
      <summary>
            Базовая стратегия защиты позиции.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.#ctor(StockSharp.BusinessEntities.MyTrade,StockSharp.BusinessEntities.Unit)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.ProtectiveStrategy" />.
            </summary>
      <param name="trade">Защищаемая сделка.</param>
      <param name="protectiveLevel">
            Защитный уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />,
            то задается конкретная цена. Иначе, указывается величина сдвига от защищаемой сделки <paramref name="trade" />.
            </param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.OnStarting">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.Strategies.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.NeedQuoting(System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
      <summary>
            Нужно ли котировать заявку.
            </summary>
      <param name="currentPrice">Текущая цена.</param>
      <param name="currentVolume">Текущий объем.</param>
      <param name="newPrice">Новая лучшая цена.</param>
      <param name="newVolume">Новый объем.</param>
      <returns>True, нужно. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.ProcessQuoting">
      <summary>
            Инициировать котирование.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.RegisterQuotingOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать котируемую заявку.
            </summary>
      <param name="order">Котируемая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.CreateQuoting">
      <summary>
            Создать стратегию котирования для защитной заявки (гарантированно исполнить ее).
            </summary>
      <returns>Стратегия котирования.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.NeedActivate">
      <summary>
            Нужно ли активировать защитную стратегию.
            </summary>
      <returns>True, если требуется активация. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.RaiseActivated">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.ProtectiveStrategy.Activated" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.ProtectiveVolume">
      <summary>
            Защищаемый объем.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.ProtectiveStrategy.ProtectiveVolumeChanged">
      <summary>
            Событие об изменении защищаемого объема.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.Trade">
      <summary>
            Защищаемая сделка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.ProtectiveLevel">
      <summary>
            Защитный уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />,
            то задается конкретная цена. Иначе, указывается величина сдвига от защищаемой сделки <see cref="P:StockSharp.Algo.Strategies.ProtectiveStrategy.Trade" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.ProtectivePrice">
      <summary>
            Абсолютное значение цены, при достижении которой автивизируется защитная стратегия.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.IsActivated">
      <summary>
            Активирована ли защитная стратегия.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.ProtectiveStrategy.Activated">
      <summary>
            Событие активации защитной стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.UseQuoting">
      <summary>
            Котировать ли выставленную заявку по рыночной цене. По-умолчанию режим выключен.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.BestPriceOffset">
      <summary>
            Отступ от лучшей цены, на которую может уйти котируемая заявка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.PriceOffset">
      <summary>
            Отступ цены для выставляемой заявки. Определяет размер отступа от лучшей котировки (для покупки прибавляется к цене, для продажи - вычитается).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.QuotingVolume">
      <summary>
            Объем, который необходимо скотировать.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.ProtectiveDirection">
      <summary>
            Направление защищаемой позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.BasePrice">
      <summary>
            Базовая цена защищаемой позиции, от которой будет рассчитываться <see cref="P:StockSharp.Algo.Strategies.ProtectiveStrategy.ProtectiveLevel" /> для определения <see cref="P:StockSharp.Algo.Strategies.ProtectiveStrategy.ProtectivePrice" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleFactory`2">
      <summary>
            Базовая фабрика для формирования свечек.
            </summary>
      <typeparam name="TCandle">Тип свечки, которую будет формировать данная фабрика.</typeparam>
      <typeparam name="TArg">Тип значения группировки свечек.</typeparam>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleFactory">
      <summary>
            Интерфейс фабрики для формирования свечек.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleFactory.Init(StockSharp.Algo.Candles.CandleBuilder)">
      <summary>
            Инициализировать фабрику.
            </summary>
      <param name="builder">Построитель свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleFactory.CreateToken(StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Создать идентификатор группировки.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Значения группировки свечек.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleFactory.ProcessValue(StockSharp.Algo.Candles.CandleToken,StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Обработать новые данные.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="currentCandle">Текущая свечка.</param>
      <param name="value">Новые данные, с помощью которых принимается решение о необходимости начала или окончания формирования текущей свечки.</param>
      <returns>Новая свечка. Если новую свечку нет необходимости создавать, то возвращается <paramref name="currentCandle" />.</returns>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleFactory.Builder">
      <summary>
            Построитель свечек.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleFactory.CandleType">
      <summary>
            Тип свечки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleFactory.CandleArg">
      <summary>
            Тип параметра свечки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleFactory`2.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Candles.CandleFactory`2" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleFactory`2.Init(StockSharp.Algo.Candles.CandleBuilder)">
      <summary>
            Инициализировать фабрику.
            </summary>
      <param name="builder">Построитель свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleFactory`2.CreateToken(StockSharp.BusinessEntities.Security,`1)">
      <summary>
            Создать идентификатор группировки.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Значения группировки свечек.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleFactory`2.CreateCandle(StockSharp.Algo.Candles.CandleToken{`0,`1},StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Создать новую свечку.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечку.</param>
      <returns>Созданная свечка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleFactory`2.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleToken{`0,`1},`0,StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Сформирована ли свечка до добавления данных.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечки.</param>
      <returns>True, свечку необходимо закончить, false, продолжить формировать.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleFactory`2.IsCandleFinishedAfterChange(StockSharp.Algo.Candles.CandleToken{`0,`1},`0,StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Сформирована ли свечка после добавления сделки.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечки.</param>
      <returns>True, свечку необходимо закончить, false, продолжить формировать.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleFactory`2.FirstInitCandle(`0,StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Заполнить первоначальные данные свечки на основе данных.
            </summary>
      <param name="candle">Свечка.</param>
      <param name="value">Данные.</param>
      <returns>Свечка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleFactory`2.UpdateCandle(StockSharp.Algo.Candles.CandleToken{`0,`1},`0,StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Обновить свечку данными.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleFactory`2.ProcessValue(StockSharp.Algo.Candles.CandleToken,StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Обработать новые данные.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="currentCandle">Текущая свечка.</param>
      <param name="value">Новые данные, с помощью которых принимается решение о необходимости начала или окончания формирования текущей свечки.</param>
      <returns>Новая свечка. Если новую свечку нет необходимости создавать, то возвращается <paramref name="currentCandle" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleFactory`2.Clone">
      <summary>
            Создать копию фабрики.
            </summary>
      <returns>Копия.</returns>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleFactory`2.Builder">
      <summary>
            Построитель свечек.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.TimeFrameCandleFactory">
      <summary>
            Фабрика для формирования свечек типа <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.TimeFrameCandleFactory.CreateToken(StockSharp.BusinessEntities.Security,System.TimeSpan)">
      <summary>
            Создать идентификатор группировки.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Значения группировки свечек.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.TimeFrameCandleFactory.CreateCandle(StockSharp.Algo.Candles.CandleToken{StockSharp.Algo.Candles.TimeFrameCandle,System.TimeSpan},StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Создать новую свечку.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечку.</param>
      <returns>Созданная свечка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.TimeFrameCandleFactory.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleToken{StockSharp.Algo.Candles.TimeFrameCandle,System.TimeSpan},StockSharp.Algo.Candles.TimeFrameCandle,StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Сформирована ли свечка до добавления данных.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечки.</param>
      <returns>True, свечку необходимо закончить, false, продолжить формировать.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.TickCandleFactory">
      <summary>
            Фабрика для формирования свечек типа <see cref="T:StockSharp.Algo.Candles.TickCandle" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.TickCandleFactory.CreateToken(StockSharp.BusinessEntities.Security,System.Int32)">
      <summary>
            Создать идентификатор группировки.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Значения группировки свечек.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.TickCandleFactory.CreateCandle(StockSharp.Algo.Candles.CandleToken{StockSharp.Algo.Candles.TickCandle,System.Int32},StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Создать новую свечку.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечку.</param>
      <returns>Созданная свечка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.TickCandleFactory.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleToken{StockSharp.Algo.Candles.TickCandle,System.Int32},StockSharp.Algo.Candles.TickCandle,StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Сформирована ли свечка до добавления данных.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечки.</param>
      <returns>True, свечку необходимо закончить, false, продолжить формировать.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.VolumeCandleFactory">
      <summary>
            Фабрика для формирования свечек типа <see cref="T:StockSharp.Algo.Candles.VolumeCandle" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.VolumeCandleFactory.CreateToken(StockSharp.BusinessEntities.Security,System.Decimal)">
      <summary>
            Создать идентификатор группировки.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Значения группировки свечек.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.VolumeCandleFactory.CreateCandle(StockSharp.Algo.Candles.CandleToken{StockSharp.Algo.Candles.VolumeCandle,System.Decimal},StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Создать новую свечку.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечку.</param>
      <returns>Созданная свечка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.VolumeCandleFactory.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleToken{StockSharp.Algo.Candles.VolumeCandle,System.Decimal},StockSharp.Algo.Candles.VolumeCandle,StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Сформирована ли свечка до добавления данных.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечки.</param>
      <returns>True, свечку необходимо закончить, false, продолжить формировать.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.RangeCandleFactory">
      <summary>
            Фабрика для формирования свечек типа <see cref="T:StockSharp.Algo.Candles.RangeCandle" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.RangeCandleFactory.CreateToken(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать идентификатор группировки.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Значения группировки свечек.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.RangeCandleFactory.CreateCandle(StockSharp.Algo.Candles.CandleToken{StockSharp.Algo.Candles.RangeCandle,StockSharp.BusinessEntities.Unit},StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Создать новую свечку.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечку.</param>
      <returns>Созданная свечка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.RangeCandleFactory.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleToken{StockSharp.Algo.Candles.RangeCandle,StockSharp.BusinessEntities.Unit},StockSharp.Algo.Candles.RangeCandle,StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Сформирована ли свечка до добавления данных.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечки.</param>
      <returns>True, свечку необходимо закончить, false, продолжить формировать.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.PnFCandleFactory">
      <summary>
            Фабрика для формирования свечек типа <see cref="T:StockSharp.Algo.Candles.PnFCandle" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.PnFCandleFactory.CreateToken(StockSharp.BusinessEntities.Security,StockSharp.Algo.Candles.PnFArg)">
      <summary>
            Создать идентификатор группировки.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Значения группировки свечек.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.PnFCandleFactory.CreateCandle(StockSharp.Algo.Candles.CandleToken{StockSharp.Algo.Candles.PnFCandle,StockSharp.Algo.Candles.PnFArg},StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Создать новую свечку.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечку.</param>
      <returns>Созданная свечка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.PnFCandleFactory.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleToken{StockSharp.Algo.Candles.PnFCandle,StockSharp.Algo.Candles.PnFArg},StockSharp.Algo.Candles.PnFCandle,StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Сформирована ли свечка до добавления данных.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечки.</param>
      <returns>True, свечку необходимо закончить, false, продолжить формировать.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.PnFCandleFactory.UpdateCandle(StockSharp.Algo.Candles.CandleToken{StockSharp.Algo.Candles.PnFCandle,StockSharp.Algo.Candles.PnFArg},StockSharp.Algo.Candles.PnFCandle,StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Обновить свечку данными.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные.</param>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleToken`2">
      <summary>
            Идентификатор регистрации процесса создания свечек определенного типа.
            </summary>
      <typeparam name="TCandle">Тип свечки, которую будет формировать данная фабрика.</typeparam>
      <typeparam name="TArg">Тип значения группировки свечек.</typeparam>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleToken">
      <summary>
            Идентификатор регистрации процесса создания свечек определенного типа.
            </summary>
      <remarks>
            Необходим для того, чтобы определять тип пришедших свечек через событие <see cref="E:StockSharp.Algo.Candles.CandleManager.CandlesStarted" />.
            Также, для того, чтобы выключать процесс создания свечек, когда этого больше не требуется.
            </remarks>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleToken.#ctor(System.Type,StockSharp.BusinessEntities.Security)">
      <summary>
            Создать идентификатор.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <param name="security">Инструмент, по которому необходимо формировать свечки.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleToken.ToString">
      <summary>
            Получить строковое представление.
            </summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleToken.Security">
      <summary>
             Инструмент, по которому необходимо формировать свечки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleToken.CandleType">
      <summary>
             Тип свечки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleToken.Arg">
      <summary>
             Параметр формирования свечки. Например, для <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" /> это значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleToken.Source">
      <summary>
            Источник свечек.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleToken`2.#ctor(StockSharp.BusinessEntities.Security,`1)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleToken`2" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо формировать свечки.</param>
      <param name="arg">Параметр формирования свечки.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleToken`2.Arg">
      <summary>
             Параметр формирования свечки. Например, для <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" /> это значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleToken`2.TypedArg">
      <summary>
            Типизированное значение <see cref="P:StockSharp.Algo.Candles.CandleToken`2.Arg" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.RenkoCandleFactory">
      <summary>
            Фабрика для формирования свечек типа <see cref="T:StockSharp.Algo.Candles.RenkoCandle" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.RenkoCandleFactory.CreateToken(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать идентификатор группировки.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Значения группировки свечек.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.RenkoCandleFactory.ProcessValue(StockSharp.Algo.Candles.CandleToken,StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Обработать новые данные.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="currentCandle">Текущая свечка.</param>
      <param name="value">Новые данные, с помощью которых принимается решение о необходимости начала или окончания формирования текущей свечки.</param>
      <returns>Новая свечка. Если новую свечку нет необходимости создавать, то возвращается <paramref name="currentCandle" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.PersistableHelper">
      <summary>
            Вспомогательный класс для работы с <see cref="T:StockSharp.Algo.Storages.IPersistable" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.PersistableHelper.Save(StockSharp.Algo.Storages.IPersistable)">
      <summary>
            Сохранить настройки.
            </summary>
      <param name="persistable">Сохраняемый объект.</param>
      <returns>Хранилище настроек.</returns>
    </member>
    <member name="T:StockSharp.Algo.History.Rts.SecurityDailyData">
      <summary>
            Дневаная информация по инструменту.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.Date">
      <summary>
            Дата.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.AveragePrice">
      <summary>
            Средняя цена.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.CalculatedPrice">
      <summary>
            Расчетная цена.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.Open">
      <summary>
            Цена открытия.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.High">
      <summary>
            Максимум дня.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.Low">
      <summary>
            Минимум дня.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.Close">
      <summary>
            Цена закрытия.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.VolumeInTrades">
      <summary>
            Количество сделок за день.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.VolumeInRubles">
      <summary>
            Объем в рублях.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.Volume">
      <summary>
            Объем в контрактах.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.OpenInterestInRubles">
      <summary>
            Открытый интерес в рублях.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.OpenInterest">
      <summary>
            Открытый интерес.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.Rts.FortsDailyData">
      <summary>
            Класс для доступа с историческим дневным данный рынка FORTS.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.Rts.FortsDailyData.GetSecurityData(StockSharp.BusinessEntities.Security,System.DateTime,System.DateTime)">
      <summary>
            Возвращает список исторических данных по выбранному инструменту за выбранный период.
            </summary>
      <remarks>
            Отсутствующие значения (например, если не было сделок) замещаются нулями.
            </remarks>
      <param name="security">Инструмент.</param>
      <param name="fromDate">Дата начала периода.</param>
      <param name="toDate">Дата конца периода.</param>
      <returns>Исторические данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Rts.FortsDailyData.GetYesterdaySecurityData(StockSharp.BusinessEntities.Security)">
      <summary>
            Возвращает вчерашние данные по выбранному инструменту.
            </summary>
      <remarks>
            Дата определяется на основе системного времени.
            </remarks>
      <param name="security">Инструмент.</param>
      <returns>Вчерашние данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Rts.FortsDailyData.GetYesterdaySecurityData(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.ITrader)">
      <summary>
            Возвращает вчерашние данные по выбранному инструменту.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="trader">Шлюз для определения текущего времени через <see cref="P:StockSharp.BusinessEntities.ITrader.MarketTime" />.</param>
      <returns>Вчерашние данные.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleContainer">
      <summary>
            Стандартный контейнер, хранящий данные свечек.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleContainer.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleContainer" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleContainer.AddCandles(StockSharp.Algo.Candles.CandleToken,System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Candle})">
      <summary>
            Добавить свечки для идентификатора группировки.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="candles">Свечки.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleContainer.GetCandles(StockSharp.Algo.Candles.CandleToken,System.DateTime)">
      <summary>
            Получить для идентификатора группировки все ассоциированные с ним свечки на период <paramref name="time" />.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="time">Период свечки.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleContainer.GetCandles(StockSharp.Algo.Candles.CandleToken)">
      <summary>
            Получить для идентификатора группировки все ассоциированные с ним свечки.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleContainer.GetCandle(StockSharp.Algo.Candles.CandleToken,System.Int32)">
      <summary>
            Получить свечку по индексу.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="candleIndex">Порядковый номер свечки с конца.</param>
      <returns>Найденая свечка. Если свечки не существует, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleContainer.GetCandles(StockSharp.Algo.Candles.CandleToken,Ecng.ComponentModel.Range{System.DateTime})">
      <summary>
            Получить свечки по идентификатору группировки и диапазону дат.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="timeRange">Диапазон дат, в которые должны входить свечки. Учитывается значение <see cref="P:StockSharp.Algo.Candles.Candle.Time" />.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleContainer.GetCandles(StockSharp.Algo.Candles.CandleToken,System.Int32)">
      <summary>
            Получить свечки по идентификатору группировки и общему количеству.
            </summary>
      <param name="token">Идентификатор группировки.</param>
      <param name="candleCount">Количество свечек, которое необходимо вернуть.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleContainer.MaxCandleCount">
      <summary>
            Максимальное количество свечек, которые нужно хранить.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.TradeGenerator">
      <summary>
            Генератор тиковых сделок случайным методом.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.TradeGenerator.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Testing.TradeGenerator" />.
            </summary>
      <param name="security">Инструмент, для которого необходимо генерировать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.TradeGenerator.Generate(System.DateTime)">
      <summary>
            Сгенерировать случайную сделку.
            </summary>
      <param name="time">Время сделки.</param>
      <returns>Случайная сделка.</returns>
    </member>
    <member name="P:StockSharp.Algo.Testing.TradeGenerator.GenerateDirection">
      <summary>
            Генерировать значение для <see cref="P:StockSharp.BusinessEntities.Trade.OrderDirection" />. По-умолчанию отключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.TradeGenerator.IdGenerator">
      <summary>
            Генератор номера сделки <see cref="P:StockSharp.BusinessEntities.Trade.Id" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.RandomWalkTradeGenerator">
      <summary>
            Генератор сделок на основе нормального распределения.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RandomWalkTradeGenerator.#ctor(StockSharp.BusinessEntities.Security,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.RandomWalkTradeGenerator" />.
            </summary>
      <param name="security">Инструмент, для которого необходимо генерировать данные.</param>
      <param name="startPrice">Цена, от которой начинается расчёт нормального распределения.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RandomWalkTradeGenerator.Generate(StockSharp.BusinessEntities.Trade,System.DateTime)">
      <summary>
            Сгенерировать маркет-данные.
            </summary>
      <param name="data">Маркет-данные.</param>
      <param name="time">Текущее время.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RandomWalkTradeGenerator.Clone">
      <summary>
            Создать копию генератора.
            </summary>
      <returns>Копия.</returns>
    </member>
    <member name="T:StockSharp.Algo.Testing.MarketEmulator">
      <summary>
            Базовый класс эмулятора биржи.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.IMarketEmulator">
      <summary>
            Интерфейс, описывающий эмулятор биржи.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку в эмуляторе.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку в эмуляторе.
            </summary>
      <param name="order">Заявка, которую нужно отменить.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.UpdateQuotes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MarketDepth})">
      <summary>
            Обновить эмулятор новыми данными о стаканах.
            </summary>
      <param name="marketDepths">Новые стаканы.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.UpdateTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade})">
      <summary>
            Обновить эмулятор новыми данными о сделках.
            </summary>
      <param name="newTrades">Новые сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.Reset">
      <summary>
            Сброосить состояние эмулятора на первоначальное.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.Start">
      <summary>
            Запустить эмулятор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.Stop">
      <summary>
            Остановить эмулятор.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IMarketEmulator.Settings">
      <summary>
            Настройки эмулятора биржи.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IMarketEmulator.Orders">
      <summary>
            Получить все заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IMarketEmulator.OrderRegisterFails">
      <summary>
            Получить все ошибки при регистрации заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IMarketEmulator.OrderCancelFails">
      <summary>
            Получить все ошибки при снятии заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IMarketEmulator.MyTrades">
      <summary>
            Получить все собственные сделки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.NewMyTrades">
      <summary>
            Событие появления собственных новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.NewOrder">
      <summary>
            Событие появления новой заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.OrderChanged">
      <summary>
            Событие изменения состояния заявки (снята, удовлетворена).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.OrderFailed">
      <summary>
            Событие об ошибке, связанной с заявкам.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.ProcessDataError">
      <summary>
            Событие, сигнализирующее об ошибке при получении или обработке новых данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IMarketEmulator.IsStarted">
      <summary>
            Запущен ли эмулятор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Testing.MarketEmulator" />.
            </summary>
      <param name="trader">Шлюз к торговой системе.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку в эмуляторе.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку в эмуляторе.
            </summary>
      <param name="order">Заявка, которую нужно отменить.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.UpdateQuotes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MarketDepth})">
      <summary>
            Обновить эмулятор новыми данными о стаканах.
            </summary>
      <param name="depths">Новые стаканы.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.UpdateTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade})">
      <summary>
            Обновить эмулятор новыми данными о сделках.
            </summary>
      <param name="newTrades">Новые сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.Reset">
      <summary>
            Сброосить состояние эмулятора на первоначальное.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.Start">
      <summary>
            Запустить эмулятор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.Stop">
      <summary>
            Остановить эмулятор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.Emulate">
      <summary>
            Произвести эмуляцию заявок.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.EmulReason">
      <summary>
            Причина вызова эмуляции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.Settings">
      <summary>
            Настройки эмулятора биржи.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.OrderRegisterFails">
      <summary>
            Получить все ошибки при регистрации заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.OrderCancelFails">
      <summary>
            Получить все ошибки при снятии заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.Orders">
      <summary>
            Получить все заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.MyTrades">
      <summary>
            Получить все собственные сделки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.NewOrder">
      <summary>
            Событие появления новой заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.OrderChanged">
      <summary>
            Событие изменения состояния заявки (снята, удовлетворена).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.OrderFailed">
      <summary>
            Событие об ошибке, связанной с заявкой.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.ProcessDataError">
      <summary>
            Событие, сигнализирующее об ошибке при получении или обработке новых данных.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.NewMyTrades">
      <summary>
            Событие появления собственных новых сделок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.IsStarted">
      <summary>
            Запущен ли эмулятор.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.ActiveOrders">
      <summary>
            Очередь активных заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.ActiveOrderCount">
      <summary>
            Количество активных заявок.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.MarketEmulator.EmulationReason">
      <summary>
            Причина вызова эмуляции. 
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketEmulator.EmulationReason.ActiveOrderProcessing">
      <summary>
            Обработка нового или активного виртуального ордера.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketEmulator.EmulationReason.NewMarketDepths">
      <summary>
            Поступление нового реального стакана.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketEmulator.EmulationReason.NewTrades">
      <summary>
            Поступление новых сделок.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.SyncMarketEmulator">
      <summary>
            Эмулятор биржи, работающий в одном потоке.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.SyncMarketEmulator.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.SyncMarketEmulator" />.
            </summary>
      <param name="trader">Шлюз к торговой системе.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.SyncMarketEmulator.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку в эмуляторе.
            </summary>
      <param name="order">Заявка, которую нужно отменить.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.SyncMarketEmulator.UpdateQuotes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MarketDepth})">
      <summary>
            Обновить эмулятор новыми данными о стаканах.
            </summary>
      <param name="depths">Новые стаканы.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.SyncMarketEmulator.UpdateTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade})">
      <summary>
            Обновить эмулятор новыми данными о сделках.
            </summary>
      <param name="newTrades">Новые сделки.</param>
    </member>
    <member name="T:StockSharp.Algo.Testing.ParallelMarketEmulator">
      <summary>
            Эмулятор биржи, работающий в отдельном потоке.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.ParallelMarketEmulator.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.ParallelMarketEmulator" />.
            </summary>
      <param name="trader">Шлюз к торговой системе.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.ParallelMarketEmulator.Start">
      <summary>
            Запустить эмулятор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.ParallelMarketEmulator.Stop">
      <summary>
            Остановить эмулятор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.ParallelMarketEmulator.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку в эмуляторе.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.ParallelMarketEmulator.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку в эмуляторе.
            </summary>
      <param name="order">Заявка, которую нужно отменить.</param>
    </member>
    <member name="T:StockSharp.Algo.Strategies.TimeFrameStrategy">
      <summary>
            Торговая стратегия, основанное на тайм-фрейме.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.#ctor(System.TimeSpan)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.TimeFrameStrategy" />.
            </summary>
      <param name="timeFrame">Таймфрейм стратегии.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.Load(StockSharp.Algo.Storages.SettingsStorage)">
      <summary>
            Загрузить настройки стратегии.
            </summary>
      <param name="settings">Настройки.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.Save(StockSharp.Algo.Storages.SettingsStorage)">
      <summary>
            Сохранить настройки стратегии.
            </summary>
      <param name="settings">Настройки.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.OnStarting">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.Strategies.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.OnProcess">
      <summary>
            Реализация торгового алгоритма.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TimeFrameStrategy.TimeFrame">
      <summary>
            Таймфрейм стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TimeFrameStrategy.Interval">
      <summary>
            Интервал запуска стратегии. По умолчанию равен <see cref="P:StockSharp.Algo.Strategies.TimeFrameStrategy.TimeFrame" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.LastTradeQuotingStrategy">
      <summary>
            Котирование по цене последней сделки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.LastTradeQuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.LastTradeQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.LastTradeQuotingStrategy.#ctor(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.LastTradeQuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <param name="bestPriceOffset">Отступ от лучшей цены, на которую может уйти котируемая заявка.</param>
      <returns>Стратегия.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.LastTradeQuotingStrategy.GetNewPrice">
      <summary>
            Получить новую цену для заявки.
            </summary>
      <returns>Новая цена заявки.</returns>
    </member>
    <member name="T:StockSharp.Algo.Logging.SmsLogListener">
      <summary>
            Логгер, отсылающий данные через SMS с помощью Google Calendar. 
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.SmsLogListener.#ctor(System.String,System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.SmsLogListener" />.
            </summary>
      <param name="login">Логин в Google.</param>
      <param name="password">Пароль в Google.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.SmsLogListener.#ctor(System.String,System.String,System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.SmsLogListener" />.
            </summary>
      <param name="login">Логин в Google.</param>
      <param name="password">Пароль в Google.</param>
      <param name="appName">Название сервиса.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.SmsLogListener.CreateGoogleEntry(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Создать Google сообщение.
            </summary>
      <param name="message">Отладочное сообщение.</param>
      <returns>Google сообщение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Logging.SmsLogListener.OnWriteMessage(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Записать сообщение.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="T:StockSharp.Algo.PnL.StrategyPnLManager">
      <summary>
            Менеджер прибыли-убытка для конкретной стратегии <see cref="P:StockSharp.Algo.PnL.StrategyPnLManager.Strategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.StrategyPnLManager.#ctor(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать менеджер прибыли-убытка.
            </summary>
      <param name="strategy">Торговая стратегия, для которой необходимо учитывать прибыль-убыток.</param>
    </member>
    <member name="M:StockSharp.Algo.PnL.StrategyPnLManager.GetCurencyMultiplier(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить множитель для валюты, в которой торгуется инструмент. Необходимо для сложения прибылей-убытков, расчитанных в разных валютах.
            </summary>
      <param name="security">Инструмент, для котого необходимо получить множитель.</param>
      <returns>Множитель для валюты инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.PnL.StrategyPnLManager.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.StrategyPnLManager.Strategy">
      <summary>
            Торговая стратегия, для которой необходимо учитывать прибыль-убыток.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.StrategyPnLManager.Trades">
      <summary>
            Все сделки, по которым была посчитана прибыль-убыток.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Equity.EquityManager">
      <summary>
            Менеджер построения кривой эквити.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Equity.EquityManager.#ctor(StockSharp.BusinessEntities.ITrader,StockSharp.Algo.PnL.IPnLManager)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Equity.EquityManager" />.
            </summary>
      <param name="trader">Шлюз к торговой системе.</param>
      <param name="manager">Менеджер прибыли-убытка, по данным которого будет рассчитываться <see cref="P:StockSharp.Algo.Equity.EquityManager.Equity" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Equity.EquityManager.DisposeManaged">
      <summary>
            Освободить ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Equity.EquityManager.Interval">
      <summary>
            Интервал обработки изменения прибыли-убытка.
            </summary>
      <remarks>
            Значение по-умолчанию равно 1 минуте.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Equity.EquityManager.PnLManager">
      <summary>
            Менеджер прибыли-убытка, по данным которого будет рассчитываться <see cref="P:StockSharp.Algo.Equity.EquityManager.Equity" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Equity.EquityManager.Trader">
      <summary>
            Шлюз к торговой системе.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Equity.EquityManager.Equity">
      <summary>
            Данные по эквити (ликвидационная стоимость).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Equity.EquityManager.InitialEquity">
      <summary>
            Начальное значение кривой.
            </summary>
      <remarks>
            Данные <see cref="P:StockSharp.Algo.Equity.EquityManager.Equity" /> строятся как <see cref="P:StockSharp.Algo.Equity.EquityManager.InitialEquity" /> + <see cref="P:StockSharp.Algo.PnL.IPnLManager.PnL" />.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Equity.EquityManager.Parameters">
      <summary>
            Вычисляемые параметры кривой эквити.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Equity.EquityManager.NewEquityData">
      <summary>
            Событие появления нового временного отрезка по эквити.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.Hydra.HydraClient">
      <summary>
            Клиент для доступа к серверу истории Hydra.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.HydraClient.#ctor(System.String,System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.History.Hydra.HydraClient" />.
            </summary>
      <param name="login">Логин.</param>
      <param name="password">Пароль.</param>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.HydraClient.#ctor(System.String,System.String,System.Uri)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.History.Hydra.HydraClient" />.
            </summary>
      <param name="login">Логин.</param>
      <param name="password">Пароль.</param>
      <param name="address">Адрес сервера.</param>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.HydraClient.GetSecurityIds">
      <summary>
            Получить все идентификаторы инструментов.
            </summary>
      <returns>Идентификаторы инструментов.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.HydraClient.GetSecurities(System.String[])">
      <summary>
            Получить инструменты по идентификаторам.
            </summary>
      <param name="securityIds">Идентификаторы инструментов.</param>
      <returns>Инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.HydraClient.GetSecuritiesData(System.String[],System.DateTime)">
      <summary>
            Получить файлы с историческими маркет-данными (по ключу записано имя файла, по значению сам файл).
            </summary>
      <param name="securityIds">Идентификаторы инструментов.</param>
      <param name="date">Дата, для которой необходимо получить маркет-данные.</param>
      <returns>Маркет-данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.HydraClient.GetUpdateScripts(System.Version)">
      <summary>
            Получить скрипты для обновления хранилища клиентской части.
            </summary>
      <param name="version">Текущая версия клиента.</param>
      <returns>Скрипты для обновления хранилища клиентской части.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.HydraClient.GetConversions(StockSharp.BusinessEntities.CurrencyTypes,StockSharp.BusinessEntities.CurrencyTypes,System.DateTime,System.DateTime)">
      <summary>
            Получить курсы между двумя валютами за указанный период.
            </summary>
      <param name="currencyFrom">Валюта, из которой необходимо сделать перевод.</param>
      <param name="currencyTo">Валюта, дял которой необходимо получить курс.</param>
      <param name="from">Время начала период.</param>
      <param name="to">Время окончания периода.</param>
      <returns>Курсы валюты.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.HydraClient.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Hydra.HydraClient.Login">
      <summary>
            Логин.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Hydra.HydraClient.Password">
      <summary>
            Пароль.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Hydra.HydraClient.Address">
      <summary>
            Адрес сервера.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.ProcessResults">
      <summary>
            Результаты работы одной итерации торговой стратегии.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.ProcessResults.Continue">
      <summary>
            Продолжить работу дальше.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.ProcessResults.Stop">
      <summary>
            Прекратить работу стратегии.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Positions.TraderPositionManager">
      <summary>
            Менеджер позиции для всего шлюза <see cref="T:StockSharp.BusinessEntities.ITrader" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.TraderPositionManager.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать менеджер позиции.
            </summary>
      <param name="trader">Шлюз к торговой системе, для которого необходимо учитывать позицию.</param>
    </member>
    <member name="M:StockSharp.Algo.Positions.TraderPositionManager.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.TraderPositionManager.Trades">
      <summary>
            Все сделки, по которым была посчитана позиция.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.TraderPositionManager.Trader">
      <summary>
            Шлюз к торговой системе, для которого необходимо учитывать позицию.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.BaseTrader">
      <summary>
            Базовый класс для создания шлюзов к торговым системам.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.#ctor">
      <summary>
            Инициализировать базовый класс для создания шлюзов.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.Connect">
      <summary>
            Подключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnConnect">
      <summary>
            Подключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.Disconnect">
      <summary>
            Отключиться от торговой системы.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnDisconnect">
      <summary>
            Отключиться от торговой системы.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.Reconnect">
      <summary>
            Переподключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetPosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security)">
      <summary>
            Найти позицию по портфелю и инструменту.
            </summary>
      <param name="portfolio">Портфель, по которому нужно найти позицию.</param>
      <param name="security">Инструмент, по которому нужно найти позицию.</param>
      <returns>Позиция. Если позиции не найдена, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить стакан котировок.
            </summary>
      <param name="security">Инструмент, по которому нужно получить стакан.</param>
      <returns>Найденный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку на бирже.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,System.Decimal,System.Decimal)">
      <summary>
            Перерегистрировать заявку на бирже.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять и на основе нее зарегистрировать новую.</param>
      <param name="price">Цена новой заявки.</param>
      <param name="volume">Объем новой заявки.</param>
      <returns>Новая заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку на бирже.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять.</param>
      <param name="newOrder">Новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.ReRegisterOrderPair(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать пару заявок на бирже.
            </summary>
      <param name="oldOrder1">Первая заявка, которую нужно снять.</param>
      <param name="newOrder1">Первая новая заявка, которую нужно зарегистрировать.</param>
      <param name="oldOrder2">Вторая заявка, которую нужно снять.</param>
      <param name="newOrder2">Вторая новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку на бирже.
            </summary>
      <param name="order">Заявка, которую нужно отменять.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.InitNewOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Инициализировать новую заявку номером транзакции, информацией о шлюзе и т.д.
            </summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnRegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку на бирже.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку на бирже.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять.</param>
      <param name="newOrder">Новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnReRegisterOrderPair(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать пару заявок на бирже.
            </summary>
      <param name="oldOrder1">Первая заявка, которую нужно снять.</param>
      <param name="newOrder1">Первая новая заявка, которую нужно зарегистрировать.</param>
      <param name="oldOrder2">Вторая заявка, которую нужно снять.</param>
      <param name="newOrder2">Вторая новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnCancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку на бирже.
            </summary>
      <param name="order">Заявка, которую нужно отменять.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.CancelOrders(System.Nullable{System.Boolean},StockSharp.BusinessEntities.Portfolio,System.Nullable{StockSharp.BusinessEntities.OrderDirections},System.String,StockSharp.BusinessEntities.Security)">
      <summary>
            Отменить группу заявок на бирже по фильтру.
            </summary>
      <param name="isStopOrder">True, если нужно отменить только стоп-заявки, false - если только обычный и null - если оба типа.</param>
      <param name="portfolio">Портфель. Если значение равно null, то портфель не попадает в фильтр снятия заявок.</param>
      <param name="direction">Направление заявки. Если значение равно null, то направление не попадает в фильтр снятия заявок.</param>
      <param name="classCode">Код класса. Если переданная строка пустая, то код не попадает в фильтр снятия заявок.</param>
      <param name="security">Инструмент. Если значение равно null, то инструмент не попадает в фильтр снятия заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать новую информацию (например, <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" /> или <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.UnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение новой информации.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RegisterQuotes(StockSharp.BusinessEntities.BasketSecurity)">
      <summary>
            Начать получать котировки (стаканы) по корзине инструментов.
            Значение котировок можно получить через метод <see cref="M:StockSharp.BusinessEntities.ITrader.GetMarketDepth(StockSharp.BusinessEntities.Security)" />.
            </summary>
      <param name="basketSecurity">Корзина инструментов, по которой необходимо начать получать котировки.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.UnRegisterQuotes(StockSharp.BusinessEntities.BasketSecurity)">
      <summary>
            Остановить получение котировок по корзине инструментов.
            </summary>
      <param name="basketSecurity">Корзина инструментов, по которой необходимо остановить получение котировок.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RegisterQuotes(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать котировки (стакан) по инструменту.
            Значение котировок можно получить через метод <see cref="M:StockSharp.BusinessEntities.ITrader.GetMarketDepth(StockSharp.BusinessEntities.Security)" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать котировки.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.UnRegisterQuotes(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение котировок по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение котировок.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать сделки (тиковые данные) по инструменту. Новые сделки будут приходить через
            событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewTrades" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.UnRegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение сделок (тиковые данные) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Начать получать новую информацию по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.UnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Остановить получение новой информации по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.ProcessEvents(System.Action)">
      <summary>
            Обработать поступившие из шлюза данные. Всю обработку полученных данных необходимо провести в функции, передающаяся в качестве аргумента handler.
            По окончанию выполнения будут вызваны событие о новых изменения (например, таких как <see cref="E:StockSharp.Algo.BaseTrader.NewSecurities" /> или <see cref="E:StockSharp.Algo.BaseTrader.OrdersChanged" />).
            </summary>
      <param name="handler">Функция, в которой необходимо обработать поступившие данные.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseOrderFailed(StockSharp.BusinessEntities.Order,System.Exception,System.Boolean)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.OrdersRegisterFailed" />, <see cref="E:StockSharp.Algo.BaseTrader.OrdersCancelFailed" />, <see cref="E:StockSharp.Algo.BaseTrader.StopOrdersRegisterFailed" /> или <see cref="E:StockSharp.Algo.BaseTrader.StopOrdersRegisterFailed" /> 
            в зависимости от типа и биржевого номера заявки <see cref="P:StockSharp.BusinessEntities.OrderFail.Order" />.
            </summary>
      <param name="order">Заявка, которая не была принята торговой системой.</param>
      <param name="exception">Системная информация об ошибке.</param>
      <param name="isQuikStopFailure">Являются ли стоп-заявки в Quik причиной ошибки.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseOrderFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.OrdersRegisterFailed" />, <see cref="E:StockSharp.Algo.BaseTrader.OrdersCancelFailed" />, <see cref="E:StockSharp.Algo.BaseTrader.StopOrdersRegisterFailed" /> или <see cref="E:StockSharp.Algo.BaseTrader.StopOrdersRegisterFailed" /> 
            в зависимости от типа и биржевого номера заявки <see cref="P:StockSharp.BusinessEntities.OrderFail.Order" />.
            </summary>
      <param name="fail">Описание ошибки.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewMyTrades" />.
            </summary>
      <param name="trades">Мои сделки, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewTrades" />.
            </summary>
      <param name="trades">Cделки, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="M:StockSharp.Algo.BaseTrader.RaiseNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})" /> или <see cref="M:StockSharp.Algo.BaseTrader.RaiseNewStopOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})" /> в зависимости от типа заявки.
            </summary>
      <param name="order">Заявка, которая была зарегистрирована в торговой системе.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseOrderChanged(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="M:StockSharp.Algo.BaseTrader.RaiseOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})" /> или <see cref="M:StockSharp.Algo.BaseTrader.RaiseStopOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})" /> в зависимости от типа заявки.
            </summary>
      <param name="order">Заявка, которая была изменена торговой системой.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewOrders" />.
            </summary>
      <param name="orders">Заявки, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewStopOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewStopOrders" />.
            </summary>
      <param name="stopOrders">Стоп-заявки, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.OrdersChanged" />.
            </summary>
      <param name="orders">Заявки, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseStopOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.StopOrdersChanged" />.
            </summary>
      <param name="stopOrders">Стоп-заявки, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseOrdersRegisterFailed(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderFail})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.OrdersRegisterFailed" />.
            </summary>
      <param name="fails">Информация об ошибках, которую нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseOrdersCancelFailed(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderFail})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.OrdersCancelFailed" />.
            </summary>
      <param name="fails">Информация об ошибках, которую нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseStopOrdersRegisterFailed(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderFail})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.StopOrdersRegisterFailed" />.
            </summary>
      <param name="fails">Информация об ошибках, которую нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseStopOrdersCancelFailed(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderFail})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.StopOrdersCancelFailed" />.
            </summary>
      <param name="fails">Информация об ошибках, которую нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewSecurities(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewSecurities" />.
            </summary>
      <param name="securities">Инструменты, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseSecuritiesChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.SecuritiesChanged" />.
            </summary>
      <param name="securities">Инструменты, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewPortfolios(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewPortfolios" />.
            </summary>
      <param name="portfolios">Портфели, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaisePortfoliosChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.PortfoliosChanged" />.
            </summary>
      <param name="portfolios">Портфели, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewPositions(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewPositions" />.
            </summary>
      <param name="positions">Позиции, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaisePositionsChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.PositionsChanged" />.
            </summary>
      <param name="positions">Позиции, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseQuotesChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MarketDepth})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.QuotesChanged" />.
            </summary>
      <param name="marketDepths">Стаканы, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseConnected">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.Connected" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseDisconnected">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.Disconnected" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseConnectionError(System.Exception)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.ConnectionError" />.
            </summary>
      <param name="exception">Ошибка соединения.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseProcessDataError(System.Exception)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.ProcessDataError" />.
            </summary>
      <param name="exception">Ошибка обработки данных.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewDataExported">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewDataExported" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseConnectionRestored">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.ReConnectionSettings.ConnectionRestored" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseConnectionAttemptError(System.Exception)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.ReConnectionSettings.ConnectionAttemptError" />.
            </summary>
      <param name="exception">Ошибка соединения.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseExportTimeOut">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.ReConnectionSettings.ExportTimeOut" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseMarketTimeChanged">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.MarketTimeChanged" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseLog(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.Log" />.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseLog(System.Func{System.String})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.Log" />.
            </summary>
      <param name="getMessage">Функция, возвращающая текст для <see cref="P:StockSharp.Algo.Logging.LogMessage.Message" />.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseLog(StockSharp.Algo.Logging.ErrorTypes,System.Func{System.String})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.Log" />.
            </summary>
      <param name="type">Тип сообщения.</param>
      <param name="getMessage">Функция, возвращающая текст для <see cref="P:StockSharp.Algo.Logging.LogMessage.Message" />.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetSecurity(System.String)">
      <summary>
            Получить инструмент по коду. Если инструмент не найден, то создается объект <see cref="T:StockSharp.BusinessEntities.Security" />,
            и инициализируется свойство <see cref="P:StockSharp.BusinessEntities.Security.Id" /> значением, переданным в id.
            </summary>
      <param name="id">Идентификатор инструмента.</param>
      <returns>Инструмент.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetSecurity(System.String,System.Action{StockSharp.BusinessEntities.Security},System.String)">
      <summary>
            Получить инструмент по коду. Если инструмент не найден, то для создания инструмента вызывается <see cref="M:StockSharp.Algo.IEntityFactory.CreateSecurity(System.String)" />.
            </summary>
      <param name="id">Идентификатор инструмента.</param>
      <param name="changeSecurity">Обработчик, инициализирующий инструмент.</param>
      <param name="nativeSecurityId">Идентификатор инструмента, используемый в торговой системе (например, число или <see cref="T:System.Guid" />).</param>
      <returns>Инструмент.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetSecurity(System.String,System.Func{System.String,StockSharp.BusinessEntities.Security},System.Action{StockSharp.BusinessEntities.Security},System.String)">
      <summary>
            Получить инструмент по коду. Если инструмент не найден, то для создания инструмента вызывается <paramref name="createSecurity" />.
            </summary>
      <param name="id">Идентификатор инструмента.</param>
      <param name="createSecurity">Обработчик, создающий инструмент.</param>
      <param name="changeSecurity">Обработчик, инициализирующий инструмент.</param>
      <param name="nativeSecurityId">Идентификатор инструмента, используемый в торговой системе (например, число или <see cref="T:System.Guid" />).</param>
      <returns>Инструмент.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetPosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security,System.Action{StockSharp.BusinessEntities.Position})">
      <summary>
            Получить позицию по портфелю и инструменту. Если позиция не найдена, то для ее создания вызывается <see cref="M:StockSharp.Algo.IEntityFactory.CreatePosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security)" />.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо получить позицию.</param>
      <param name="security">Инструмент, по которому необходимо получить позицию.</param>
      <param name="changePosition">Обработчик, изменяющий позицию.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetPosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security,System.Func{StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Position},System.Action{StockSharp.BusinessEntities.Position})">
      <summary>
            Получить позицию по портфелю и инструменту. Если позиция не найдена, то для ее создания вызывается <paramref name="createPosition" />.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо получить позицию.</param>
      <param name="security">Инструмент, по которому необходимо получить позицию.</param>
      <param name="createPosition">Обработчик, создающий позицию.</param>
      <param name="changePosition">Обработчик, изменяющий позицию.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetTrade(StockSharp.BusinessEntities.Security,System.Int64,System.Func{System.Int64,StockSharp.BusinessEntities.Trade})">
      <summary>
            Получить сделку по инструменту и номеру. Если сделка не зарегистрирована, то она создается через <paramref name="createTrade" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="id">Номер сделки.</param>
      <param name="createTrade">Обработчик, создающий сделку.</param>
      <returns>Сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetOrder(StockSharp.BusinessEntities.Security,System.Int64,System.Func{System.Int64,StockSharp.BusinessEntities.Order},System.Action{StockSharp.BusinessEntities.Order})">
      <summary>
            Получить заявку по инструменту и номеру. Если заявка не зарегистрирована, то она создается через <paramref name="createOrder" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="id">Номер заявки.</param>
      <param name="createOrder">Обработчик, создающий заявку.</param>
      <param name="changeOrder">Обработчик, изменяющий заявку.</param>
      <returns>Заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.AddMyTrade(StockSharp.BusinessEntities.Security,System.Int64,System.Int64,StockSharp.BusinessEntities.Trade)">
      <summary>
            Добавить собственную сделку на основе информации об инструменте, тиковой сделке и номере заявки. Если заявка с указанным номером
            <paramref name="orderId" /> отсутствует, то информация о сделке сохраняется до тех пор, пока не будет получена необходимая заявка.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="orderId">Номер заявки. Если передается нулевой значение, то заявка будет искаться по <paramref name="orderTransactionId" />.</param>
      <param name="orderTransactionId">Номер транзакции заявки. Если передается нулевой значение, то заявка будет искаться по <paramref name="orderId" />.</param>
      <param name="trade">Тиковая сделка.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.AddMyTrade(StockSharp.BusinessEntities.Security,System.Int64,System.Int64,System.Int64,System.Func{System.Int64,StockSharp.BusinessEntities.Trade},System.Action{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Добавить собственную сделку на основе информации об инструменте, тиковой сделке и номере заявки. Если заявка с указанным номером
            <paramref name="orderId" /> отсутствует, то информация о сделке сохраняется до тех пор, пока не будет получена необходимая заявка.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="orderId">Номер заявки. Если передается нулевой значение, то заявка будет искаться по <paramref name="orderTransactionId" />.</param>
      <param name="orderTransactionId">Номер транзакции заявки. Если передается нулевой значение, то заявка будет искаться по <paramref name="orderId" />.</param>
      <param name="tradeId">Номер сделки.</param>
      <param name="createTrade">Обработчик, создающий тиковую сделку, если она отсутствует в момент получения моей сделки.</param>
      <param name="initMyTrade">Обработчик, изменяющий мою сделку.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetPortfolio(System.String)">
      <summary>
            Получить портфель по названию. Если портфель не найден, то создается объект <see cref="T:StockSharp.BusinessEntities.Portfolio" />,
            и инициализируется свойство <see cref="P:StockSharp.BusinessEntities.Portfolio.Name" /> значением, переданным в name.
            </summary>
      <param name="name">Название портфеля.</param>
      <returns>Портфель.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetPortfolio(System.String,System.Action{StockSharp.BusinessEntities.Portfolio})">
      <summary>
            Получить портфель по названию. Если портфель не зарегистрирован, то он создается через <see cref="M:StockSharp.Algo.IEntityFactory.CreatePortfolio(System.String)" />.
            </summary>
      <param name="name">Название портфеля.</param>
      <param name="changePortfolio">Обработчик, изменяющий портфель.</param>
      <returns>Портфель.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetPortfolio(System.String,System.Func{System.String,StockSharp.BusinessEntities.Portfolio},System.Action{StockSharp.BusinessEntities.Portfolio})">
      <summary>
            Получить портфель по названию. Если портфель не зарегистрирован, то он создается через <paramref name="createPortfolio" />.
            </summary>
      <param name="name">Название портфеля.</param>
      <param name="createPortfolio">Обработчик, создающий портфель.</param>
      <param name="changePortfolio">Обработчик, изменяющий портфель.</param>
      <returns>Портфель.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetOrderByTransactionId(System.Int64)">
      <summary>
            Получить заявку по номеру транзакции <see cref="P:StockSharp.BusinessEntities.Order.TransactionId" />.
            </summary>
      <param name="transactionId">Номер транзакции.</param>
      <returns>Заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetStopOrderByTransactionId(System.Int64)">
      <summary>
            Получить стоп-заявку по номеру транзакции <see cref="P:StockSharp.BusinessEntities.Order.TransactionId" />.
            </summary>
      <param name="transactionId">Номер транзакции.</param>
      <returns>Стоп-заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.AddDerivedOrder(StockSharp.BusinessEntities.Security,System.Int64,StockSharp.BusinessEntities.Order,System.Action{StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order})">
      <summary>
            Добавить ассоциацию между номером обычной заявки и стоп-заявкой. Необходимо использовать, когда заявки и стоп-заявки приходят
            в разных потоках, и стоп-заявка с информацией о производной заявке пришла раньше, чем сама заявка.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="derivedOrderId">Номер производной заявки.</param>
      <param name="stopOrder">Стоп-заявка.</param>
      <param name="handler">Обработчик, который будет вызван, как только придет информация о производной заявке.
            Первым параметром идет стоп-заявка, вторым - производная.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.CreateSecurityId(System.String,System.String)">
      <summary>
            Сгенерировать <see cref="P:StockSharp.BusinessEntities.Security.Id" /> инструмента.
            </summary>
      <param name="secCode">Код инструмента.</param>
      <param name="secClass">Класс инструмента.</param>
      <returns>
        <see cref="P:StockSharp.BusinessEntities.Security.Id" /> инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetSecurityClassInfo(System.String)">
      <summary>
            Получить описание инструмента по классу из <see cref="P:StockSharp.Algo.BaseTrader.SecurityClassInfo" />.
            </summary>
      <param name="secClass">Класс инструмента.</param>
      <returns>Описание инструмента. Если класс не найден в <see cref="P:StockSharp.Algo.BaseTrader.SecurityClassInfo" />, то будет возвращено значение <see cref="P:StockSharp.Algo.BaseTrader.DefaultSecurityClassInfo" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.ProcessSecurityAction(System.String,System.Action{StockSharp.BusinessEntities.Security},System.Boolean)">
      <summary>
            Обработать действие, ассоциированное с инструментом.
            </summary>
      <remarks>Необходимо в том случае, если информация по инструментам получается позднее, чем требуется обработка действия с инструментом.
            Например, позиция по инструменту пришла раньше, чем сама информация об инструменте.</remarks>
      <param name="nativeSecurityId">Идентификатор инструмента, используемый в торговой системе (например, число или <see cref="T:System.Guid" />).</param>
      <param name="action">Действие.</param>
      <param name="ignoreIfNotExist">Не обрабатывать действие, если инструмент не найден.
            True, если обработка не требуется в случае отсутствия инструмента, иначе, false, и действие будет сохранено для последующей обработки.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.StartMarketTimeExport">
      <summary>
            Начать экспорт события об изменении времени.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.StopMarketTimeExport">
      <summary>
            Завершить экспорт события об изменении времени.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnMarketTimeChanged">
      <summary>
            Обработчик события изменения <see cref="P:StockSharp.Algo.BaseTrader.MarketTime" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.StartExport">
      <summary>
            Запустить экспорт данных из торговой системы в программу (получение портфелей, инструментов, заявок и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.StopExport">
      <summary>
            Остановить экспорт данных из торговой системы в программу, запущенный через <see cref="M:StockSharp.BusinessEntities.ITrader.StartExport" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.ReStartExport">
      <summary>
            Перезапустить экспорт данных из торговой системы через методы <see cref="M:StockSharp.BusinessEntities.ITrader.StopExport" /> и <see cref="M:StockSharp.BusinessEntities.ITrader.StartExport" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.ClearPositions">
      <summary>
            Очистить позиции <see cref="P:StockSharp.Algo.BaseTrader.Positions" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.DisposeManaged">
      <summary>
            Освободить занятые ресурсы. В частности, отключиться от торговой системы через <see cref="M:StockSharp.Algo.BaseTrader.Disconnect" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.Load(StockSharp.Algo.Storages.SettingsStorage)">
      <summary>
            Загрузить настройки.
            </summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.Save(StockSharp.Algo.Storages.SettingsStorage)">
      <summary>
            Сохранить настройки.
            </summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.ReConnectionSettings">
      <summary>
            Настройки переподсоединения <see cref="T:StockSharp.BusinessEntities.ITrader" /> к торговой системе.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.EntityFactory">
      <summary>
            Фабрика бизнес-сущностей (<see cref="T:StockSharp.BusinessEntities.Security" />, <see cref="T:StockSharp.BusinessEntities.Order" /> и т.д.).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.MarketTimeChangedInterval">
      <summary>
            Интервал вызова события <see cref="E:StockSharp.Algo.BaseTrader.MarketTimeChanged" />.
            </summary>
      <remarks>
            Значение по умолчанию равно 10 миллисекундам.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.Name">
      <summary>
            Имя источника.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewMyTrades">
      <summary>
            Событие появления собственных новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewTrades">
      <summary>
            Событие появления всех новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewOrders">
      <summary>
            Событие появления новых заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewStopOrders">
      <summary>
            Событие появления новых стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.OrdersChanged">
      <summary>
            Событие изменения состояния заявков (снята, удовлетворена).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.StopOrdersChanged">
      <summary>
            Событие изменения стоп-заявов.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.OrdersRegisterFailed">
      <summary>
            Событие об ошибках, связанных с регистрацией заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.OrdersCancelFailed">
      <summary>
            Событие об ошибках, связанных со снятием заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.StopOrdersRegisterFailed">
      <summary>
            Событие об ошибках, связанных с регистрацией стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.StopOrdersCancelFailed">
      <summary>
            Событие об ошибках, связанных со снятием стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewSecurities">
      <summary>
            Событие появления новых инструментов.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.SecuritiesChanged">
      <summary>
            Событие изменения параметров инструментов.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewPortfolios">
      <summary>
            Событие появления новых портфелей.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.PortfoliosChanged">
      <summary>
            Событие изменения параметров портфелей.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewPositions">
      <summary>
            Событие появления новых позиций.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.PositionsChanged">
      <summary>
            Событие изменения параметров позиций.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.QuotesChanged">
      <summary>
            Событие изменения стаканов с котировками.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.MarketTimeChanged">
      <summary>
            Событие, сигнализирующее об изменении текущего времени.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.Connected">
      <summary>
            Событие успешного подключения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.Disconnected">
      <summary>
            Событие успешного отключения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.ConnectionError">
      <summary>
            Событие ошибки подключения (например, соединения было разорвано).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.ProcessDataError">
      <summary>
            Событие, сигнализирующее об ошибке при получении или обработке новых данных с сервера.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewDataExported">
      <summary>
            Событие, сигнализирующее об ошибке при получении или обработке новых данных с сервера.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.Log">
      <summary>
            Событие нового отладочного сообщения.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.TransactionIdGenerator">
      <summary>
            Генератор идентификаторов транзакций.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.SecurityIdGenerator">
      <summary>
            Генератор идентификаторов инструментов <see cref="P:StockSharp.BusinessEntities.Security.Id" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.DefaultSecurityClassInfo">
      <summary>
            Описания класса инструмента по умолчанию.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.SecurityClassInfo">
      <summary>
            Описание классов инструментов, в зависимости от которых будут проставляться параметры в <see cref="P:StockSharp.BusinessEntities.Security.Type" /> и <see cref="P:StockSharp.BusinessEntities.Security.Exchange" />.
            Если информация по классу отсутствует, то будет поставлены значения <see cref="F:StockSharp.BusinessEntities.SecurityTypes.Equity" /> и <see cref="P:StockSharp.BusinessEntities.Exchange.Micex" /> соответственно.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.Securities">
      <summary>
            Список всех загруженных инструментов.
            Вызывать необходимо после того, как пришло событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewSecurities" />. Иначе будет возвращено постое множество.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.MarketTimeOffset">
      <summary>
            Временное смещение. Неоходимо устанавливать, когда торговая программа работает во временной зоне, отличной от биржевой.
            Значение <see cref="P:StockSharp.Algo.BaseTrader.MarketTime" /> будет корректироваться в зависимости от установленного значения.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.MarketTime">
      <summary>
            Получить биржевое время. Значение зависит от <see cref="P:StockSharp.Algo.BaseTrader.MarketTimeOffset" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.Orders">
      <summary>
            Получить все заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.StopOrders">
      <summary>
            Получить все стоп-заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.OrderRegisterFails">
      <summary>
            Получить все ошибки при регистрации заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.OrderCancelFails">
      <summary>
            Получить все ошибки при снятии заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.Trades">
      <summary>
            Получить все сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.MyTrades">
      <summary>
            Получить все собственные сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.Portfolios">
      <summary>
            Получить все портфели.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.Positions">
      <summary>
            Получить все позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.IsConnected">
      <summary>
            Проверить соединение.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.IsExportStarted">
      <summary>
            Запущен ли экспорт. Экспорт запускается через метод <see cref="M:StockSharp.Algo.BaseTrader.StartExport" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.IsSupportAtomicReRegister">
      <summary>
            Поддерживается ли перерегистрация заявок через метод <see cref="M:StockSharp.BusinessEntities.ITrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)" />
            в виде одной транзакции.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.MarketPriceTypes">
      <summary>
            Типы рыночных цен.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.MarketPriceTypes.Opposite">
      <summary>
            Встречная цена (для быстрого закрытия позы).
            </summary>
    </member>
    <member name="F:StockSharp.Algo.MarketPriceTypes.Following">
      <summary>
            Попутная цена (для котирования на краю спреда).
            </summary>
    </member>
    <member name="F:StockSharp.Algo.MarketPriceTypes.Middle">
      <summary>
            Середина спреда.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.Finam.FinamHistorySource">
      <summary>
            Источник для скачивания исторических сделок с Finam.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.History.Finam.FinamHistorySource.FinamMarketIdField">
      <summary>
            Ключ, по которому в <see cref="P:StockSharp.BusinessEntities.Security.ExtensionInfo" /> будет присутствовать номер финамовского идентификатора рынка.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.History.Finam.FinamHistorySource.FinamSecurityIdField">
      <summary>
            Ключ, по которому в <see cref="P:StockSharp.BusinessEntities.Security.ExtensionInfo" /> будет присутствовать номер финамовского идентификатора инструмента.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.Finam.FinamHistorySource.#ctor(StockSharp.Algo.History.ISecurityStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.History.Finam.FinamHistorySource" />.
            </summary>
      <param name="securityStorage">Интерфейс для доступа к хранилищу информации об инструментах.</param>
    </member>
    <member name="M:StockSharp.Algo.History.Finam.FinamHistorySource.GetTrades(StockSharp.BusinessEntities.Security,System.DateTime)">
      <summary>
            Получить исторические сделки.
            </summary>
      <param name="security">Инструмент, для которого необходимо получить все сделки. Если значение равно null, то возвращаются сделки по всем инструментам.</param>
      <param name="time">Время торговой сессии, для которой необходимо получить сделки.</param>
      <returns>Исторические сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Finam.FinamHistorySource.DownloadSecurityInfo">
      <summary>
            Загрузить информацию об инструментах.
            </summary>
      <returns>Информация об инструментах.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Finam.FinamHistorySource.GetCandles(StockSharp.Algo.History.Finam.FinamSecurityInfo,System.DateTime,System.DateTime,System.TimeSpan)">
      <summary>
            Загрузить свечи.
            </summary>
      <param name="fsi">Идентификатор инструмента Finam.</param>
      <param name="beginDate">Дата начала данных.</param>
      <param name="endDate">Дата конца данных.</param>
      <param name="tf">Тайм-фрейм (1min, 5min, 10min, 15min, 30min, 1hour, 1day).</param>
      <returns>Загруженные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Finam.FinamHistorySource.GetNewSecurities">
      <summary>
            Получить новые инструменты.
            </summary>
      <returns>Новые инструменты.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Candle">
      <summary>
            Базовый класс для свечки (содержит основные параметры).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Candle.ToString">
      <summary>
            Получить строковое представление.
            </summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.Security">
      <summary>
            Инструмент.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.Time">
      <summary>
            Период свечки (временная отметка).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.OpenPrice">
      <summary>
            Цена открытия.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.ClosePrice">
      <summary>
            Цена закрытия.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.HighPrice">
      <summary>
            Максимальная цена.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.LowPrice">
      <summary>
            Минимальная цена.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.TotalPrice">
      <summary>
            Суммарный оборот по сделкам.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.OpenVolume">
      <summary>
            Объем открытия.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.CloseVolume">
      <summary>
            Объем закрытия.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.HighVolume">
      <summary>
            Максимальный объем.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.LowVolume">
      <summary>
            Минимальный объем.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.TotalVolume">
      <summary>
            Суммарный объем по сделкам.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.Arg">
      <summary>
            Параметр свечки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.TimeFrameCandle">
      <summary>
            Свечка, группируемая по тайм-фрейму.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame">
      <summary>
            Тайм-фрейм.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.TimeFrameCandle.Arg">
      <summary>
            Параметр свечки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.TickCandle">
      <summary>
            Свечка, группируемая по количеству сделок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.TickCandle.TradeCount">
      <summary>
            Максимальное количество сделок, которое может содержать свечка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.TickCandle.Arg">
      <summary>
            Параметр свечки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.VolumeCandle">
      <summary>
            Свечка, группируемая по количеству контрактов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.VolumeCandle.Volume">
      <summary>
            Максимальное количество контрактов, которое может содержать свечка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.VolumeCandle.Arg">
      <summary>
            Параметр свечки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.RangeCandle">
      <summary>
            Свечка, группируемая по ценовому диапазону.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.RangeCandle.PriceRange">
      <summary>
            Дельта цены, в рамках которой свечка может содержать сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.RangeCandle.Arg">
      <summary>
            Параметр свечки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.PnFTypes">
      <summary>
            Типы символов.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Candles.PnFTypes.X">
      <summary>
            Крестики (цена растет).
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Candles.PnFTypes.O">
      <summary>
            Нолики (цена падает).
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.PnFArg">
      <summary>
            Значение параметров пункто-цифрового графика (график крестики-нолики).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.PnFArg.ToString">
      <summary>
            Получить строковое представление.
            </summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.PnFArg.Clone">
      <summary>
            Создать копию объекта <see cref="T:StockSharp.Algo.Candles.PnFArg" />.
            </summary>
      <returns>Копия.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.PnFArg.OnEquals(StockSharp.Algo.Candles.PnFArg)">
      <summary>
            Сравнить на эквивалентность.
            </summary>
      <param name="other">Значение параметров пункто-цифрового графика, с которым необходимо сделать сравнение.</param>
      <returns>True, если значения равны. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.PnFArg.GetHashCode">
      <summary>
            Рассчитать хеш-код объекта <see cref="T:StockSharp.Algo.Candles.PnFArg" />.
            </summary>
      <returns>Хеш-код.</returns>
    </member>
    <member name="P:StockSharp.Algo.Candles.PnFArg.BoxSize">
      <summary>
            Изменение цены, при превышении которого регистрируется новый <see cref="F:StockSharp.Algo.Candles.PnFTypes.X" /> или <see cref="F:StockSharp.Algo.Candles.PnFTypes.O" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.PnFArg.ReversalAmount">
      <summary>
            Величина противоположного движения цены, при котором происходит смена <see cref="F:StockSharp.Algo.Candles.PnFTypes.X" /> на <see cref="F:StockSharp.Algo.Candles.PnFTypes.O" /> (или наоборот).
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.PnFCandle">
      <summary>
            Свечка пункто-цифрового графика (график крестики-нолики).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.PnFCandle.PnFArg">
      <summary>
            Значение параметров.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.PnFCandle.Type">
      <summary>
            Тип символов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.PnFCandle.Arg">
      <summary>
            Параметр свечки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.RenkoCandle">
      <summary>
            Свечка Рэнко графика.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.RenkoCandle.BoxSize">
      <summary>
            Изменение цены, при превышении которого регистрируется новая свечка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.RenkoCandle.Arg">
      <summary>
            Параметр свечки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.ShrinkRules">
      <summary>
            Правила округления цены.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.ShrinkRules.Auto">
      <summary>
            Автоматически определять, к меньшему или большему значению округлять.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.ShrinkRules.Less">
      <summary>
            Округлять к меньшему значению.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.ShrinkRules.More">
      <summary>
            Округлять к большему значению.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.TraderHelper">
      <summary>
            Вспомогательный класс для предоставления различной алгоритмической функциональности.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetFilteredQuotes(StockSharp.BusinessEntities.Security,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Получить отфильтрованный стакан инструмента от всех активных заявок.
            </summary>
      <param name="security">Инструмент, по которому необходимо получить стакан.</param>
      <param name="orders">Заявки, которые необходимо игнорировать.</param>
      <returns>Отфильтрованный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetFilteredQuotes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Получить отфильтрованный стакан от всех активных заявок.
            </summary>
      <param name="quotes">Исходный стакан, который необходимо отфильтровать.</param>
      <param name="orders">Заявки, которые необходимо игнорировать.</param>
      <returns>Отфильтрованный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetFilteredQuotes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Отфильтровать стакан от собственных заявок.
            </summary>
      <param name="quotes">Исходный стакан, который необходимо отфильтровать.</param>
      <param name="ownOrders">Активные заявки по данному инструменту.</param>
      <param name="orders">Заявки, которые необходимо игнорировать.</param>
      <returns>Отфильтрованный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetMarketPrice(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.OrderDirections,StockSharp.BusinessEntities.Unit,StockSharp.Algo.MarketPriceTypes)">
      <summary>
            Высчитать рыночную цену по инструменту в зависимости от направления заявки.
            </summary>
      <param name="security">Инструмент, по которому вычисляется рыночная цена.</param>
      <param name="direction">Направление заявки.</param>
      <param name="priceDelta">Дельта от лучшей цены.</param>
      <param name="priceType">Тип рыночной цены.</param>
      <returns>Рыночная цена.</returns>
      <remarks>Для корректной работы метода необходимо запустить экспорт стакана.</remarks>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetMarketPrice(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.OrderDirections,StockSharp.BusinessEntities.Unit,StockSharp.Algo.MarketPriceTypes)">
      <summary>
            Высчитать рыночную цену по стакану в зависимости от направления заявки.
            </summary>
      <param name="depth">Стакан, по которому нужно высчитать рыночную цену.</param>
      <param name="direction">Направление заявки. Если это покупка, то будет использоваться
            значение <see cref="P:StockSharp.BusinessEntities.Security.BestAsk" />, иначе <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />.</param>
      <param name="priceDelta">Дельта от лучшей цены.</param>
      <param name="priceType">Тип рыночной цены.</param>
      <returns>Рыночная цена.</returns>
      <remarks>Для корректной работы метода необходимо запустить экспорт стакана.</remarks>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetMarketPrice(StockSharp.BusinessEntities.MarketDepthPair,StockSharp.BusinessEntities.OrderDirections,StockSharp.BusinessEntities.Unit,StockSharp.Algo.MarketPriceTypes)">
      <summary>
            Высчитать рыночную цену по лучшей паре котировок в зависимости от направления заявки.
            </summary>
      <param name="bestPair">Лучшая пара котировок, по которой вычисляется рыночная цена.</param>
      <param name="direction">Направление заявки. Если это покупка, то будет использоваться
            значение <see cref="P:StockSharp.BusinessEntities.Security.BestAsk" />, иначе <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />.</param>
      <param name="priceDelta">Дельта от лучшей цены.</param>
      <param name="priceType">Тип рыночной цены.</param>
      <returns>Рыночная цена. Если информации в стакане недостаточно, будет возвращено 0.</returns>
      <remarks>Для корректной работы метода необходимо запустить экспорт стакана.</remarks>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ShrinkPrice(StockSharp.BusinessEntities.Security,System.Decimal,StockSharp.Algo.ShrinkRules)">
      <summary>
            Обрезать цену, чтобы она стала кратной минимальному шагу, а так же ограничить количество знаков после запятой.
            </summary>
      <param name="security">Инструмент, из которого берется значения <see cref="P:StockSharp.BusinessEntities.Security.MinStepSize" /> и <see cref="P:StockSharp.BusinessEntities.Security.Decimals" />.</param>
      <param name="price">Цена, которую нужно сделать кратной.</param>
      <param name="rule">Правило округления цены.</param>
      <returns>Кратная цена.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPosition(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Получить позицию по Моей сделке.
            </summary>
      <param name="trade">Моя сделка, по которой рассчитывается позиция. При покупке объем сделки <see cref="P:StockSharp.BusinessEntities.Trade.Volume" />
            берется с положительным знаком, при продаже - с отрицательным.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPosition(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить позицию по заявке.
            </summary>
      <param name="order">Заявка, по которой рассчитывается позиция. При покупке позиция берется с положительным знаком, при продаже - с отрицательным.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPosition(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Получить позицию по портфелю.
            </summary>
      <param name="portfolio">Портфель, для которого необходимо получить позицию.</param>
      <returns>Позиция по портфелю.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPosition(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Получить позицию по Моим сделкам.
            </summary>
      <param name="trades">Мои сделки, по которым рассчитывается позиция через метод <see cref="M:StockSharp.Algo.TraderHelper.GetPosition(StockSharp.BusinessEntities.MyTrade)" />.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetOrderVolume(StockSharp.BusinessEntities.Position)">
      <summary>
            Получить объем заявки сопоставимый с размером позиции.
            </summary>
      <param name="position">Позиция по инструменту.</param>
      <returns>Объем заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPnL(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Рассчитать прибыль-убыток на основе сделок.
            </summary>
      <param name="trades">Сделки, по которым необходимо рассчитывать прибыль-убыток.</param>
      <returns>Прибыль-убыток.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPnL(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Рассчитать прибыль-убыток для сделки.
            </summary>
      <param name="trade">Сделка, для которой необходимо рассчитывать прибыль-убыток.</param>
      <returns>Прибыль-убыток.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPnL(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Рассчитать прибыль-убыток на основе портфеля.
            </summary>
      <param name="portfolio">Портфель, для которого необходимо расcчитать прибыль-убыток.</param>
      <returns>Прибыль-убыток.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetSlippage(StockSharp.BusinessEntities.MyTrade,System.Boolean)">
      <summary>
            Рассчитать проскальзывание по сделке. В качестве ожидаемой цены берется <see cref="P:StockSharp.BusinessEntities.Order.Price" />.
            </summary>
      <param name="trade">Моя сделка, для которой необходимо рассчитать проскальзывание.</param>
      <param name="calcNegative">Считать ли отрицательное проскальзывание. Если false, то отрицательное значение проскальзывания заменяется нулем.</param>
      <returns>Значение проскальзывания.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetSlippage(StockSharp.BusinessEntities.MyTrade,System.Decimal,System.Boolean)">
      <summary>
            Рассчитать проскальзывание по сделке.
            </summary>
      <param name="trade">Моя сделка, для которой необходимо рассчитать проскальзывание.</param>
      <param name="estimatedPrice">Ожидаемая цена заявки.</param>
      <param name="calcNegative">Считать ли отрицательное проскальзывание. Если false, то отрицательное значение проскальзывания заменяется нулем.</param>
      <returns>Значение проскальзывания.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(System.Collections.Generic.IEnumerable{Ecng.ComponentModel.Range{System.TimeSpan}},StockSharp.BusinessEntities.ITrader)">
      <summary>
            Проверить, является ли текущее время торгуемым (началась ли сессия, не закончилась ли, нет ти клиринга).
            </summary>
      <param name="timeBounds">Временные интервалы работы биржи. Например, для FORTS можно передавать значения 10:30-13:59 и 14:04-23:49.</param>
      <param name="trader">Шлюз с торговой системой. В качестве текущего времени берется значение <see cref="P:StockSharp.BusinessEntities.ITrader.MarketTime" />.</param>
      <returns>True, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(System.Collections.Generic.IEnumerable{Ecng.ComponentModel.Range{System.TimeSpan}},System.DateTime)">
      <summary>
            Проверить, является ли переданное время торгуемым (началась ли сессия, не закончилась ли, нет ти клиринга).
            </summary>
      <param name="timeBounds">Временные интервалы работы биржи. Например, для FORTS можно передавать значения 10:30-13:59 и 14:04-23:49.</param>
      <param name="dateTime">Передаваемое время, которое нужно проверить.</param>
      <returns>True, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.BusinessEntities.Security,System.DateTime)">
      <summary>
            Проверить, является ли текущее время торгуемым (началась ли сессия, не закончилась ли, нет ти клиринга).
            </summary>
      <param name="security">Инструмент, хранящий информацию о бирже <see cref="P:StockSharp.BusinessEntities.Security.Exchange" />. Если она равна null, то инструмент торгуется
            круглосуточно. Иначе, информация передается в метод <see cref="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.BusinessEntities.Exchange,System.DateTime)" />.</param>
      <param name="dateTime">Передаваемое время, которое нужно проверить.</param>
      <returns>True, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.BusinessEntities.Exchange,StockSharp.BusinessEntities.ITrader)">
      <summary>
            Проверить, является ли текущее время торгуемым (началась ли сессия, не закончилась ли, нет ти клиринга).
            </summary>
      <param name="exchange">Информация о бирже, хранящая временные интервалы работы биржи <see cref="P:StockSharp.BusinessEntities.Exchange.WorkingTime" />.
            Например, для FORTS будут значения 10:30-13:59 и 14:04-23:49.</param>
      <param name="trader">Шлюз с торговой системой. В качестве текущего времени берется значение <see cref="P:StockSharp.BusinessEntities.ITrader.MarketTime" />.</param>
      <returns>True, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.BusinessEntities.Exchange,System.DateTime)">
      <summary>
            Проверить, является ли текущее время торгуемым (началась ли сессия, не закончилась ли, нет ти клиринга).
            </summary>
      <param name="exchange">Информация о бирже, хранящая временные интервалы работы биржи <see cref="P:StockSharp.BusinessEntities.Exchange.WorkingTime" />.
            Например, для FORTS будут значения 10:30-13:59 и 14:04-23:49.</param>
      <param name="dateTime">Передаваемое время, которое нужно проверить.</param>
      <returns>True, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.BusinessEntities.WorkingTime,StockSharp.BusinessEntities.ITrader)">
      <summary>
            Проверить, является ли текущее время торгуемым (началась ли сессия, не закончилась ли, нет ти клиринга).
            </summary>
      <param name="workingTime">Информация о режиме работы биржы.</param>
      <param name="trader">Шлюз с торговой системой. В качестве текущего времени берется значение <see cref="P:StockSharp.BusinessEntities.ITrader.MarketTime" />.</param>
      <returns>True, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.BusinessEntities.WorkingTime,System.DateTime)">
      <summary>
            Проверить, является ли время торгуемым (началась ли сессия, не закончилась ли, нет ли клиринга).
            </summary>
      <param name="workingTime">Информация о режиме работы биржы.</param>
      <param name="dateTime">Передаваемое время, которое нужно проверить.</param>
      <returns>True, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeDate(StockSharp.BusinessEntities.WorkingTime,System.DateTime,System.Boolean)">
      <summary>
            Проверить, является ли дата торгуемой.
            </summary>
      <param name="workingTime">Информация о режиме работы биржы.</param>
      <param name="date">Передаваемая дата, которую необходимо проверить.</param>
      <param name="checkHolidays">Проверять ли переданную дату на день недели (суббота и воскресенье являются выходными и для них будет возвращено false).</param>
      <returns>True, если торгуемая дата, иначе, неторгуемая.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ReRegisterClone(StockSharp.BusinessEntities.Order,System.Decimal)">
      <summary>
            Создать копию заявки для перерегистрации с новым объемом, равным <see cref="P:StockSharp.BusinessEntities.Order.Balance" /> заявки <paramref name="oldOrder" />.
            </summary>
      <param name="oldOrder">Оригинальная заявка.</param>
      <param name="newPrice">Цена новой заявки.</param>
      <returns>Новая заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ReRegisterClone(StockSharp.BusinessEntities.Order,System.Decimal,System.Decimal)">
      <summary>
            Создать копию заявки для перерегистрации.
            </summary>
      <param name="oldOrder">Оригинальная заявка.</param>
      <param name="newPrice">Цена новой заявки.</param>
      <param name="newVolume">Объем новой заявки.</param>
      <returns>Новая заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Convert(StockSharp.BusinessEntities.Currency,StockSharp.BusinessEntities.CurrencyTypes)">
      <summary>
            Сконвертировать одну валюту в другую.
            </summary>
      <param name="currencyFrom">Валюта, из которой нужно произвести конвертацию.</param>
      <param name="currencyTypeTo">Код валюты, в которую нужно произвести конвертацию.</param>
      <returns>Сконвертированная валюта.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Convert(StockSharp.BusinessEntities.CurrencyTypes,StockSharp.BusinessEntities.CurrencyTypes)">
      <summary>
            Получить курс конвертации одной валюту в другую.
            </summary>
      <param name="from">Код валюты, из которой нужно произвести конвертацию.</param>
      <param name="to">Код валюты, в которую нужно произвести конвертацию.</param>
      <returns>Курс.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Convert(StockSharp.BusinessEntities.CurrencyTypes,StockSharp.BusinessEntities.CurrencyTypes,System.DateTime)">
      <summary>
            Получить курс конвертации одной валюту в другую на определенную дату.
            </summary>
      <param name="from">Код валюты, из которой нужно произвести конвертацию.</param>
      <param name="to">Код валюты, в которую нужно произвести конвертацию.</param>
      <param name="date">Дата курса.</param>
      <returns>Курс.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Sparse(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Создать из обычного стакана разреженный с минимальным шагом цены равный <see cref="P:StockSharp.BusinessEntities.Security.MinStepSize" />.
            <remarks>
            В разреженном стакане показаны котировки на те цены, по которым не выставлены заявки. Объем таких котировок равен 0.
            </remarks></summary>
      <param name="depth">Обычный стакан.</param>
      <returns>Разреженный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Sparse(StockSharp.BusinessEntities.MarketDepth,System.Decimal)">
      <summary>
            Создать из обычного стакана разреженный.
            <remarks>
            В разреженном стакане показаны котировки на те цены, по которым не выставлены заявки. Объем таких котировок равен 0.
            </remarks></summary>
      <param name="depth">Обычный стакан.</param>
      <param name="minStepSize">Минимальный шаг цены.</param>
      <returns>Разреженный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Sparse(StockSharp.BusinessEntities.MarketDepthPair,System.Decimal)">
      <summary>
            Создать из пары котировок разреженную коллекцию котировок, которая будет входить в диапазон между парой.
            <remarks>
            В разреженной коллекции показаны котировки на те цены, по которым не выставлены заявки. Объем таких котировок равен 0.
            </remarks></summary>
      <param name="pair">Пара обычных котировок.</param>
      <param name="minStepSize">Минимальный шаг цены.</param>
      <returns>Разреженная коллекция котировок.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Sparse(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},System.Decimal)">
      <summary>
            Создать из обычных котировок разреженную коллекцию котировок.
            <remarks>
            В разреженной коллекции показаны котировки на те цены, по которым не выставлены заявки. Объем таких котировок равен 0.
            </remarks></summary>
      <param name="quotes">Обычные котировки. Коллекция должна содержать одинаково направленные котировки (только биды или только оффера).</param>
      <param name="minStepSize">Минимальный шаг цены.</param>
      <returns>Разреженная коллекция котировок.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Join(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Объединить первоначальный стакан, и его разреженное представление.
            </summary>
      <param name="original">Первоначальный стакан.</param>
      <param name="rare">Разреженный стакан.</param>
      <returns>Объединенный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Group(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)">
      <summary>
            Сгруппировать стакан по ценовому диапазону.
            </summary>
      <param name="depth">Стакан, который необходимо сгруппировать.</param>
      <param name="priceRange">Ценовой диапазон, по которому необходимо произвести группировку.</param>
      <returns>Сгруппированный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.UnGroup(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Разгруппировать стакан, сгруппированный через метод <see cref="M:StockSharp.Algo.TraderHelper.Group(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)" />.
            </summary>
      <param name="depth">Сгруппированный стакан.</param>
      <returns>Разгруппированный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Group(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},StockSharp.BusinessEntities.Unit)">
      <summary>
            Сгруппировать котировки по ценовому диапазону.
            </summary>
      <param name="quotes">Котировки, которые необходимо сгруппировать.</param>
      <param name="priceRange">Ценовой диапазон, по которому необходимо произвести группировку.</param>
      <returns>Сгруппированные котировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetDelta(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Вычислить изменение между стаканами.
            </summary>
      <param name="from">Первый стакан.</param>
      <param name="to">Второй стакан.</param>
      <returns>Стакан, хранищий только изменения.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.AddDelta(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Прибавить изменение к первому стакану.
            </summary>
      <param name="from">Первый стакан.</param>
      <param name="delta">Изменение.</param>
      <returns>Измененный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsCanceled(StockSharp.BusinessEntities.Order)">
      <summary>
            Проверить, отменена ли заявка.
            </summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>True, если заявка отменена, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsMatched(StockSharp.BusinessEntities.Order)">
      <summary>
            Проверить, исполнена ли полностью заявка.
            </summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>True, если заявка полностью исполнена, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsMatchedPartially(StockSharp.BusinessEntities.Order)">
      <summary>
            Проверить, реализована ли часть объема в заявке.
            </summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>True, если часть объема реализована, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsMatchedEmpty(StockSharp.BusinessEntities.Order)">
      <summary>
            Проверить, что не реализован ни один контракт в заявке.
            </summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>True, если ни один контракт не реализована, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetMatchedVolume(StockSharp.BusinessEntities.Order)">
      <summary>
            Расcчитать реализованную часть объема для заявки.
            </summary>
      <param name="order">Заявка, для которой необходимо расcчитать реализованную часть объема.</param>
      <returns>Реализованная часть объема.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetAveragePrice(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить средневзрешанную цену исполнения заявки.
            </summary>
      <param name="order">Заявка, для которой необходимо получить средневзрешанную цену исполнения.</param>
      <returns>Средневзвешанная цена. Если заявка не была исполнена ни по одному контракту, то возвращается 0.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetAveragePrice(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Получить средневзрешанную цену исполнения по собственным сделкам.
            </summary>
      <param name="trades">Сделки, для которых необходимо получить средневзрешанную цену исполнения.</param>
      <returns>Средневзвешанная цена. Если сделки отсутствуют, то возвращается 0.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetAveragePrice(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade})">
      <summary>
            Получить средневзрешанную цену исполнения по тиковым сделкам.
            </summary>
      <param name="trades">Сделки, для которых необходимо получить средневзрешанную цену исполнения.</param>
      <returns>Средневзвешанная цена. Если сделки отсутствуют, то возвращается 0.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetTheoreticalTrades(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Order)">
      <summary>
            Получить вероятные сделки по стакану для заданной заявки.
            </summary>
      <param name="depth">Стакан, который в момент вызова функции отражает ситуацию на рынке.</param>
      <param name="order">Заявку, для которой необходимо расcчитать вероятные сделки.</param>
      <returns>Вероятные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetTheoreticalTrades(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.OrderDirections,System.Int32)">
      <summary>
            Получить вероятные сделки по стакану для рыночной цены и заданного объема.
            </summary>
      <param name="depth">Стакан, который в момент вызова функции отражает ситуацию на рынке.</param>
      <param name="orderDirection">Направление заявки.</param>
      <param name="volume">Объем, который предполагается реализовать.</param>
      <returns>Вероятные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetTheoreticalTrades(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.OrderDirections,System.Int32,System.Decimal)">
      <summary>
            Получить вероятные сделки по стакану для заданных цены и объема.
            </summary>
      <param name="depth">Стакан, который в момент вызова функции отражает ситуацию на рынке.</param>
      <param name="orderDirection">Направление заявки.</param>
      <param name="volume">Объем, который предполагается реализовать.</param>
      <param name="price">Цена, по которой предполагает выставить заявку. Если она равна 0, то будет рассматриваться вариант рыночной заявки.</param>
      <returns>Вероятные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Invert(StockSharp.BusinessEntities.OrderDirections)">
      <summary>
            Поменять направление заявки на противоположное.
            </summary>
      <param name="direction">Первоначальное направление.</param>
      <returns>Противоположное направление.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetDirection(StockSharp.BusinessEntities.Position)">
      <summary>
            Получить направление заявки для позиции.
            </summary>
      <remarks>
            Положительное значение равно <see cref="F:StockSharp.BusinessEntities.OrderDirections.Buy" />, отрицательное - <see cref="F:StockSharp.BusinessEntities.OrderDirections.Sell" />, нулевое - null.
            </remarks>
      <param name="position">Значение позиции.</param>
      <returns>Направление заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetDirection(System.Decimal)">
      <summary>
            Получить направление заявки для позиции.
            </summary>
      <remarks>
            Положительное значение равно <see cref="F:StockSharp.BusinessEntities.OrderDirections.Buy" />, отрицательное - <see cref="F:StockSharp.BusinessEntities.OrderDirections.Sell" />, нулевое - null.
            </remarks>
      <param name="position">Значение позиции.</param>
      <returns>Направление заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.CancelOrders(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},System.Nullable{System.Boolean},StockSharp.BusinessEntities.Portfolio,System.Nullable{StockSharp.BusinessEntities.OrderDirections},System.String,StockSharp.BusinessEntities.Security)">
      <summary>
            Отменить группу заявок на бирже по фильтру.
            </summary>
      <param name="trader">Шлюз взаимодействия с торговыми системами.</param>
      <param name="orders">Группа заявок, из которой необходимо найти требуемые заявки и отменить их.</param>
      <param name="isStopOrder">True, если нужно отменить только стоп-заявки, false - если только обычный и null - если оба типа.</param>
      <param name="portfolio">Портфель. Если значение равно null, то портфель не попадает в фильтр снятия заявок.</param>
      <param name="direction">Направление заявки. Если значение равно null, то направление не попадает в фильтр снятия заявок.</param>
      <param name="classCode">Код класса. Если переданная строка пустая, то код не попадает в фильтр снятия заявок.</param>
      <param name="security">Инструмент. Если значение равно null, то инструмент не попадает в фильтр снятия заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.BusinessEntities.Security)">
      <summary>
            Отфильтровать заявки для заданного инструмента.
            </summary>
      <param name="orders">Все заявки, в которых необходимо искать требуемые.</param>
      <param name="security">Инструмент, для которого нужно отфильтровать заявки.</param>
      <returns>Отфильтрованные заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Отфильтровать заявки для заданного портфеля.
            </summary>
      <param name="orders">Все заявки, в которых необходимо искать требуемые.</param>
      <param name="portfolio">Портфель, для которого нужно отфильтровать заявки.</param>
      <returns>Отфильтрованные заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade},StockSharp.BusinessEntities.Security)">
      <summary>
            Отфильтровать сделки для заданного инструмента.
            </summary>
      <param name="trades">Все сделки, в которых необходимо искать требуемые.</param>
      <param name="security">Инструмент, для которого нужно отфильтровать сделки.</param>
      <returns>Отфильтрованные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade},System.DateTime,System.DateTime)">
      <summary>
            Отфильтровать сделки для заданного временного периода.
            </summary>
      <param name="trades">Все сделки, в которых необходимо искать требуемые.</param>
      <param name="from">Дата, с которой нужно искать сделки.</param>
      <param name="to">Дата, до которой нужно искать сделки.</param>
      <returns>Отфильтрованные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position},StockSharp.BusinessEntities.Security)">
      <summary>
            Отфильтровать позиции для заданного инструмента.
            </summary>
      <param name="positions">Все позиции, в которых необходимо искать требуемые.</param>
      <param name="security">Инструмент, для которого нужно отфильтровать позиции.</param>
      <returns>Отфильтрованные позиции.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position},StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Отфильтровать позиции для заданного портфеля.
            </summary>
      <param name="positions">Все позиции, в которых необходимо искать требуемые.</param>
      <param name="portfolio">Портфель, для которого нужно отфильтровать позиции.</param>
      <returns>Отфильтрованные позиции.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade},StockSharp.BusinessEntities.Security)">
      <summary>
            Отфильтровать собственные сделки для заданного инструмента.
            </summary>
      <param name="myTrades">Все собственные сделки, в которых необходимо искать требуемые.</param>
      <param name="security">Инструмент, по которому нужно найти сделки.</param>
      <returns>Отфильтрованные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade},StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Отфильтровать собственные сделки для заданного портфеля.
            </summary>
      <param name="myTrades">Все собственные сделки, в которых необходимо искать требуемые.</param>
      <param name="portfolio">Портфель, для которого нужно отфильтровать сделки.</param>
      <returns>Отфильтрованные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade},StockSharp.BusinessEntities.Order)">
      <summary>
            Отфильтровать собственные сделки для заданной заявки.
            </summary>
      <param name="myTrades">Все собственные сделки, в которых необходимо искать требуемые.</param>
      <param name="order">Заявка, для которой нужно отфильтровать сделки.</param>
      <returns>Отфильтрованные заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsFullEmpty(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Определить, является ли стакан пустым.
            </summary>
      <param name="depth">Стакан.</param>
      <returns>True, если стакан пустой, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsHalfEmpty(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Определить, является ли стакан пустым на половину.
            </summary>
      <param name="depth">Стакан.</param>
      <returns>True, если стакан пустой на половину, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetTPlusNDate(StockSharp.BusinessEntities.WorkingTime,System.DateTime,System.Int32)">
      <summary>
            Получить T+N дату.
            </summary>
      <param name="time">Информация о режиме работы биржы.</param>
      <param name="date">Начальная дата T.</param>
      <param name="n">Размер N.</param>
      <returns>Конечная дата T+N.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.SyncMarketTime(StockSharp.BusinessEntities.ITrader,StockSharp.BusinessEntities.Exchange,System.Int32)">
      <summary>
            Синхронизировать <see cref="P:StockSharp.BusinessEntities.ITrader.MarketTimeOffset" /> между локальным временем на компьютере и временем биржи <see cref="P:StockSharp.BusinessEntities.Exchange.TimeZoneInfo" />.
            </summary>
      <remarks>Если не удалось получить время биржи через NTP сервер, возвращается разница между
            часовым поясом <see cref="P:StockSharp.BusinessEntities.Exchange.TimeZoneInfo" /> и локальным часовым поясом.</remarks>
      <param name="trader">Шлюз к торговой системе, который необходимо синхронизовать.</param>
      <param name="exchange">Информация о бирже.</param>
      <param name="timeout">Таймаут синхронизации в милисекундах.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPrice(StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.BusinessEntities.OrderDirections})">
      <summary>
            Получить цену, которую необходимо оплатить для совершения торговой операции.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="direction">Направление торговой операции.</param>
      <returns>Цена.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetFreeMoney(StockSharp.BusinessEntities.Portfolio,System.Boolean)">
      <summary>
            Получить размер свободных денежных средств в портфеле.
            </summary>
      <param name="portfolio">Портфель</param>
      <param name="useLeverage">Использовать ли для рассчета размер плеча.</param>
      <returns>Размер свободных денежных средств.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.SecurityList">
      <summary>
            Класс для представления в виде списка инструментов, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.SecurityList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.OrderFailList">
      <summary>
            Класс для представления в виде списка заявок с ошибками, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.OrderFailList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.OrderFailList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.StrategyInfo">
      <summary>
            Информация о стратегии, хранящаяся во внешнем хранилище.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StrategyInfo.Id">
      <summary>
            Уникальный идентификатор стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StrategyInfo.Name">
      <summary>
            Название стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StrategyInfo.StrategyType">
      <summary>
            Тип стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StrategyInfo.SecurityId">
      <summary>
            Идентификатор инструмента.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StrategyInfo.PortfolioId">
      <summary>
            Название портфеля.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StrategyInfo.Settings">
      <summary>
            Словарь, содержащий настройки стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StrategyInfo.MyTrades">
      <summary>
            Собственные сделки стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StrategyInfo.Orders">
      <summary>
            Заявки стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StrategyInfo.OrderFails">
      <summary>
            Заявки с ошибками стратегии.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Positions.StrategyPositionManager">
      <summary>
            Менеджер позиции для конкретной стратегии <see cref="P:StockSharp.Algo.Positions.StrategyPositionManager.Strategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.StrategyPositionManager.#ctor(StockSharp.Algo.Strategies.Strategy,System.Boolean)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Positions.StrategyPositionManager" />.
            </summary>
      <param name="strategy">Торговая стратегия, для которой необходимо учитывать позицию.</param>
      <param name="byOrders">Расчитывать позицию по реализованному объему у заявок (true) или по сделкам (false).</param>
    </member>
    <member name="M:StockSharp.Algo.Positions.StrategyPositionManager.ProcessOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Обработчик заявки. Вызывается при <see cref="P:StockSharp.Algo.Positions.StrategyPositionManager.ByOrders" /> равным true.
            </summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Positions.StrategyPositionManager.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.StrategyPositionManager.ByOrders">
      <summary>
            Расчитывать позицию по реализованному объему у заявок (true) или по сделкам (false).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.StrategyPositionManager.Trades">
      <summary>
            Все сделки, по которым была посчитана позиция.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.StrategyPositionManager.Strategy">
      <summary>
            Торговая стратегия, для которой необходимо учитывать позицию.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyHelper">
      <summary>
            Вспомогательный класс для работы с классом <see cref="T:StockSharp.Algo.Strategies.Strategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.BuyAtMarket(StockSharp.Algo.Strategies.Strategy,System.Decimal)">
      <summary>
            Создать инициализированный объект заявки на покупку по рыночной цене.
            </summary>
      <remarks>
            Заявка не регистрируется, а только создается объект.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="volume">Объем. Если передается значение 0, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SellAtMarket(StockSharp.Algo.Strategies.Strategy,System.Decimal)">
      <summary>
            Создать инициализированный объект заявки на продажу по рыночной цене.
            </summary>
      <remarks>
            Заявка не регистрируется, а только создается объект.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="volume">Объем. Если передается значение 0, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.BuyAtLimit(StockSharp.Algo.Strategies.Strategy,System.Decimal,System.Decimal)">
      <summary>
            Создать инициализированный объект заявки на покупку.
            </summary>
      <remarks>
            Заявка не регистрируется, а только создается объект.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="price">Цена.</param>
      <param name="volume">Объем. Если передается значение 0, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SellAtLimit(StockSharp.Algo.Strategies.Strategy,System.Decimal,System.Decimal)">
      <summary>
            Создать инициализированный объект заявки на продажу.
            </summary>
      <remarks>
            Заявка не регистрируется, а только создается объект.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="price">Цена.</param>
      <param name="volume">Объем. Если передается значение 0, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.CreateOrder(StockSharp.Algo.Strategies.Strategy,StockSharp.BusinessEntities.OrderDirections,System.Decimal,System.Decimal)">
      <summary>
            Создать инициализированный объект заявки.
            </summary>
      <remarks>
            Заявка не регистрируется, а только создается объект.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="direction">Направление заявки.</param>
      <param name="price">Цена.</param>
      <param name="volume">Объем. Если передается значение 0, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.ClosePosition(StockSharp.Algo.Strategies.Strategy,System.Decimal)">
      <summary>
            Закрыть открытую позицию по рынку (выставить заявку типа <see cref="F:StockSharp.BusinessEntities.OrderTypes.Market" />).
            </summary>
      <remarks>
            Рыночная заявка не работает на всех биржах.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="slippage">Уровень проскальзывания, допустимый при регистрации заявки. Используется, если заявка регистрируется лимиткой.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.TradingStorage">
      <summary>
            Базовый класс, описывающий внешнее хранилище (база данных, файл и т.д.) торговых сущностей и данных.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.TradingStorage.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.TradingStorage" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.TradingStorage.AddTradeStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.Trade})">
      <summary>
            Добавить хранилище тиковых сделок.
            </summary>
      <param name="storage">Хранилище тиковых сделок</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.TradingStorage.AddMarketDepthStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.Trade})">
      <summary>
            Добавить хранилище стаканов.
            </summary>
      <param name="storage">Хранилище стаканов.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.TradingStorage.AddCandleStorage``2(StockSharp.Algo.Storages.IMarketDataStorage{``0},``1)">
      <summary>
            Добавить хранилище свечек.
            </summary>
      <typeparam name="TCandle">Тип свечки.</typeparam>
      <typeparam name="TArg">Тип параметра свечки.</typeparam>
      <param name="storage">Хранилище свечек.</param>
      <param name="arg">Параметр свечки.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.TradingStorage.GetTradeStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище тиковых сделок для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.TradingStorage.GetTradeStorage(StockSharp.BusinessEntities.Security,System.String)">
      <summary>
            Получить хранилище тиковых сделок для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="basePath">Путь к директории со сделками.</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.TradingStorage.GetMarketDepthStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище стаканов для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.TradingStorage.GetMarketDepthStorage(StockSharp.BusinessEntities.Security,System.String)">
      <summary>
            Получить хранилище стаканов для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="basePath">Путь к директории со стаканами.</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.TradingStorage.GetCandleStorage``2(StockSharp.BusinessEntities.Security,``1)">
      <summary>
            Получить хранилище свечек для заданного инструмента.
            </summary>
      <typeparam name="TCandle">Тип свечки.</typeparam>
      <typeparam name="TArg">Тип параметра свечки.</typeparam>
      <param name="security">Инструмент.</param>
      <param name="arg">Параметр свечки.</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.TradingStorage.GetCandleStorage``2(StockSharp.BusinessEntities.Security,``1,System.String)">
      <summary>
            Получить хранилище свечек для заданного инструмента.
            </summary>
      <typeparam name="TCandle">Тип свечки.</typeparam>
      <typeparam name="TArg">Тип параметра свечки.</typeparam>
      <param name="security">Инструмент.</param>
      <param name="arg">Параметр свечки.</param>
      <param name="basePath">Путь к директории со стаканами.</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="P:StockSharp.Algo.Storages.TradingStorage.Storage">
      <summary>
            Специальный интерфейс для прямого доступа к хранилищу.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.TradingStorage.Exchanges">
      <summary>
            Биржи, полученные из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.TradingStorage.Securities">
      <summary>
            Инструменты, полученные из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.TradingStorage.Portfolios">
      <summary>
            Портфели, полученные из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.TradingStorage.Positions">
      <summary>
            Позиции, полученные из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.TradingStorage.MyTrades">
      <summary>
            Собственные сделки, полученные из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.TradingStorage.Orders">
      <summary>
            Заявки, полученные из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.TradingStorage.OrderFails">
      <summary>
            Заявки с ошибками, полученные из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.TradingStorage.Strategies">
      <summary>
            Информация о стратегиях, полученная из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.TradingStorage.BasePath">
      <summary>
            Директория, где будут сохранять тиковые сделки и стаканы.
            </summary>
      <remarks>По умолчанию указана текущая директория.</remarks>
    </member>
    <member name="T:StockSharp.Algo.Logging.Log4NetLogger">
      <summary>
            Вспомогательный класс для логирования сообщений, основанный на log4net.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Logging.IExnternalLogger">
      <summary>
            Интерфейс внешнего приемника сообщений от <see cref="T:StockSharp.Algo.Logging.ILogSource" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.IExnternalLogger.WriteMessage(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Записать сообщение.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.Log4NetLogger.#ctor(System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.Log4NetLogger" />.
            </summary>
      <param name="configFile">Путь к конфигурационному файлу log4net.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.Log4NetLogger.Info(System.String,System.String)">
      <summary>
             Отравить информационное сообщение.
            </summary>
      <param name="message">Текст сообщения.</param>
      <param name="source">Источник сообщения.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.Log4NetLogger.Warning(System.String,System.String)">
      <summary>
             Отправить сообщение-предупреждение.
            </summary>
      <param name="message">Текст сообщения.</param>
      <param name="source">Источник сообщения.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.Log4NetLogger.Error(System.String,System.String)">
      <summary>
             Отправить сообщение об ошибке.
            </summary>
      <param name="message">Текст сообщения.</param>
      <param name="source">Источник сообщения.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.Log4NetLogger.Debug(System.String,System.String)">
      <summary>
             Отправить отладочное сообщение.
            </summary>
      <param name="message">Текст сообщения.</param>
      <param name="source">Источник сообщения.</param>
    </member>
    <member name="T:StockSharp.Algo.Logging.Log4NetLogListener">
      <summary>
            Логгер, отсылающий сообщения в <see cref="T:StockSharp.Algo.Logging.Log4NetLogger" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Logging.ExternalLogListener">
      <summary>
            Логгер, отсылающий сообщения во внешний приемник <see cref="T:StockSharp.Algo.Logging.IExnternalLogger" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.ExternalLogListener.#ctor(StockSharp.Algo.Logging.IExnternalLogger)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.ExternalLogListener" />.
            </summary>
      <param name="logger">Внешний приемник сообщений.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.ExternalLogListener.OnWriteMessage(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Записать сообщение.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="P:StockSharp.Algo.Logging.ExternalLogListener.Logger">
      <summary>
            Внешний приемник сообщений.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.Log4NetLogListener.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.Log4NetLogListener" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.Log4NetLogListener.#ctor(System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.Log4NetLogListener" />.
            </summary>
      <param name="configFile">Путь к конфигурационному файлу log4net.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.Log4NetLogListener.#ctor(StockSharp.Algo.Logging.Log4NetLogger)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.Log4NetLogListener" />.
            </summary>
      <param name="logger">Вспомогательный класс для логирования сообщений, основанный на log4net.</param>
    </member>
    <member name="T:StockSharp.Algo.Reporting.XmlStrategyReport">
      <summary>
            Генератор отчета для стратегии в формате Xml.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Reporting.XmlStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
      <summary>
            Создать генератор Xml отчетов.
            </summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Xml.</param>
    </member>
    <member name="M:StockSharp.Algo.Reporting.XmlStrategyReport.Generate">
      <summary>
            Сгенерировать отчет в формате Xml.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Reporting.XmlStrategyReport.FileName">
      <summary>
            Название файла, в котором сгенерируется отчет в формате Xml.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.ProcessStates">
      <summary>
            Состояния торгового алгоритма.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.ProcessStates.Stopped">
      <summary>
            Остановлен.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.ProcessStates.Stopping">
      <summary>
            Останавливается.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.ProcessStates.Started">
      <summary>
            Запущен.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Logging.ErrorTypes">
      <summary>
            Типы ошибок.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Logging.ErrorTypes.None">
      <summary>
            Без ошибок.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Logging.ErrorTypes.Warning">
      <summary>
            Предупреждение.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Logging.ErrorTypes.Error">
      <summary>
            Ошибка.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Slippage.StrategySlippageManager">
      <summary>
            Менеджер проскальзывания для конкретной стратегии <see cref="P:StockSharp.Algo.Slippage.StrategySlippageManager.Strategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.StrategySlippageManager.#ctor(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать менеджер проскальзывания.
            </summary>
      <param name="strategy">Торговая стратегия, для которой необходимо учитывать проскальзывание.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.StrategySlippageManager.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.StrategySlippageManager.Orders">
      <summary>
            Все заявки, зарегистрированные для мониторинга.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.StrategySlippageManager.Trades">
      <summary>
            Все сделки, по которым было посчитано проскальзывание.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.StrategySlippageManager.Strategy">
      <summary>
            Торговая стратегия, для которой необходимо учитывать проскальзывание.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.PnL.PortfolioPnLManager">
      <summary>
            Менеджер прибыли-убытка для конкретного портфеля.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.PortfolioPnLManager.#ctor(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Создать менеджер прибыли-убытка.
            </summary>
      <param name="portfolio">Портфель, для которого необходимо учитывать прибыль-убыток.</param>
    </member>
    <member name="M:StockSharp.Algo.PnL.PortfolioPnLManager.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PortfolioPnLManager.Portfolio">
      <summary>
            Портфель, для которого необходимо учитывать прибыль-убыток.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PortfolioPnLManager.PnL">
      <summary>
            Значение прибыли-убытка с учетом открытой позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PortfolioPnLManager.RelatedValue">
      <summary>
            Относительное значение прибыли-убытка без учета открытой позиции.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Latency.SecurityLatencyManager">
      <summary>
            Менеджер задержки для конкретного инструмента <see cref="P:StockSharp.Algo.Latency.SecurityLatencyManager.Security" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.SecurityLatencyManager.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать менеджер задержки.
            </summary>
      <param name="security">Инструмент, для которого необходимо вычислять задержку.</param>
    </member>
    <member name="M:StockSharp.Algo.Latency.SecurityLatencyManager.OnOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Обработчик события появления изменения заявок.
            </summary>
      <param name="orders">Заявки.</param>
    </member>
    <member name="P:StockSharp.Algo.Latency.SecurityLatencyManager.Orders">
      <summary>
            Все заявки, зарегистрированные для мониторинга.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Latency.SecurityLatencyManager.Security">
      <summary>
            Инструмент, для которого необходимо вычислять задержку.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleBuilderContainer">
      <summary>
            Стандартный контейнер данных.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleBuilderContainer">
      <summary>
            Интерфейс контейнера, хранящего данные.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleBuilderContainer.AddValue(StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Добавить данные для свечки.
            </summary>
      <param name="candle">Свечка, для которой нужно добавить данные.</param>
      <param name="value">Новые данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleBuilderContainer.GetValues(StockSharp.Algo.Candles.Candle)">
      <summary>
            Получить все данные по свечке.
            </summary>
      <param name="candle">Свечка, по которой нужно найти данные.</param>
      <returns>Найденные данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleBuilderContainer.AddValues(System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.ICandleBuilderSourceValue})">
      <summary>
            Добавить данные.
            </summary>
      <param name="values">Данные.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleBuilderContainer.Values">
      <summary>
            Все накопленные данные.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilderContainer.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleBuilderContainer" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilderContainer.AddValue(StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.ICandleBuilderSourceValue)">
      <summary>
            Добавить данные для свечки.
            </summary>
      <param name="candle">Свечка, для которой нужно добавить данные.</param>
      <param name="value">Новые данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilderContainer.GetValues(StockSharp.Algo.Candles.Candle)">
      <summary>
            Получить все данные по свечке.
            </summary>
      <param name="candle">Свечка, по которой нужно найти данные.</param>
      <returns>Найденные данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleBuilderContainer.AddValues(System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.ICandleBuilderSourceValue})">
      <summary>
            Добавить данные.
            </summary>
      <param name="values">Данные.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleBuilderContainer.MaxCandleCount">
      <summary>
            Максимальное количество свечек, которые нужно хранить.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleBuilderContainer.MaxValueCount">
      <summary>
            Максимальное количество данных, которое нужно хранить.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleBuilderContainer.Values">
      <summary>
            Все накопленные данные.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleSourceList">
      <summary>
            Коллекция источников свечек.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleHelper">
      <summary>
            Вспомогательный класс для работы со свечками.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCurrentTimeFrameCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleToken)">
      <summary>
            Получить текущую временную свечку.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="token">Идентификатор группировки.</param>
      <returns>Найденная свечка (null, если свечка по заданным критериям не существует).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCurrentTimeFrameCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.TimeSpan)">
      <summary>
            Получить текущую временную свечку.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечку.</param>
      <param name="timeFrame">Тайм-фрейм, по которому нужно искать свечку.</param>
      <returns>Найденная свечка (null, если свечка по заданным критериям не существует).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.TimeSpan,System.DateTime)">
      <summary>
            Получить временную свечку за определенную дату.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечку.</param>
      <param name="timeFrame">Тайм-фрейм, по которому нужно искать свечку.</param>
      <param name="time">Дата свечки.</param>
      <returns>Найденная свечка (null, если свечка по заданным критериям не существует).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleToken,System.DateTime)">
      <summary>
            Получить временную свечку за определенную дату.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="token">Идентификатор группировки.</param>
      <param name="time">Дата свечки.</param>
      <returns>Найденная свечка (null, если свечка по заданным критериям не существует).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.RegisterTimeFrameCandles(StockSharp.Algo.Candles.ICandleSource,StockSharp.BusinessEntities.Security,System.TimeSpan)">
      <summary>
            Зарегистрировать группировку свечек по признаку тайм-фрейм. Через событие <see cref="E:StockSharp.Algo.Candles.ICandleSource.CandlesStarted" />
            будут приходить объекты класса <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" />.
            </summary>
      <param name="source">Источник свечек.</param>
      <param name="security">Инструмент, по которому нужно фильтровать сделки для формирования свечек.</param>
      <param name="timeFrame">Тайм-фрейм, по которому будут группироваться свечки.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.RegisterTickCandles(StockSharp.Algo.Candles.ICandleSource,StockSharp.BusinessEntities.Security,System.Int32)">
      <summary>
            Зарегистрировать группировку свечек по признаку максимального количества сделок. Через событие <see cref="E:StockSharp.Algo.Candles.ICandleSource.CandlesStarted" />
            будут приходить объекты класса <see cref="T:StockSharp.Algo.Candles.TickCandle" />.
            </summary>
      <param name="source">Источник свечек.</param>
      <param name="security">Инструмент, по которому нужно фильтровать сделки для формирования свечек.</param>
      <param name="tradeCount">Максимальное количество сделок, по которому будут группироваться свечки.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.RegisterVolumeCandles(StockSharp.Algo.Candles.ICandleSource,StockSharp.BusinessEntities.Security,System.Decimal)">
      <summary>
            Зарегистрировать группировку свечек по признаку максимального количества контрактов. Через событие <see cref="E:StockSharp.Algo.Candles.ICandleSource.CandlesStarted" />
            будут приходить объекты класса <see cref="T:StockSharp.Algo.Candles.VolumeCandle" />.
            </summary>
      <param name="source">Источник свечек.</param>
      <param name="security">Инструмент, по которому нужно фильтровать сделки для формирования свечек.</param>
      <param name="volume">Максимальное количество контрактов, по которому будут группироваться свечки.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.RegisterRangeCandles(StockSharp.Algo.Candles.ICandleSource,StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Зарегистрировать группировку свечек по признаку ценового диапазона. Через событие <see cref="E:StockSharp.Algo.Candles.ICandleSource.CandlesStarted" />
            будут приходить объекты класса <see cref="T:StockSharp.Algo.Candles.RangeCandle" />.
            </summary>
      <param name="source">Источник свечек.</param>
      <param name="security">Инструмент, по которому нужно фильтровать сделки для формирования свечек.</param>
      <param name="priceRange">Дельта цены, по которой будут группироваться свечки.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.RegisterPnFCandles(StockSharp.Algo.Candles.ICandleSource,StockSharp.BusinessEntities.Security,StockSharp.Algo.Candles.PnFArg)">
      <summary>
            Зарегистрировать группировку свечек графика крестики-нолики. Через событие <see cref="E:StockSharp.Algo.Candles.ICandleSource.CandlesStarted" />
            будут приходить объекты класса <see cref="T:StockSharp.Algo.Candles.PnFCandle" />.
            </summary>
      <param name="source">Источник свечек.</param>
      <param name="security">Инструмент, по которому нужно фильтровать сделки для формирования свечек.</param>
      <param name="arg">Значение параметров пункто-цифрового графика.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetLastTimeFrameCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.TimeSpan)">
      <summary>
            Получить последнюю свечку.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечку.</param>
      <param name="timeFrame">Тайм-фрейм, по которому нужно искать свечку.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetLastTimeFrameCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleToken)">
      <summary>
            Получить последнюю свечку.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="token">Идентификатор группировки.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetLastTickCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Int32)">
      <summary>
            Получить последнюю свечку.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечку.</param>
      <param name="tradeCount">Признак максимального количества сделок <see cref="P:StockSharp.Algo.Candles.TickCandle.TradeCount" />.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetLastTickCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleToken)">
      <summary>
            Получить последнюю свечку.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="token">Идентификатор группировки.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetLastVolumeCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Int32)">
      <summary>
            Получить последнюю свечку.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечку.</param>
      <param name="volume">Признак максимального количества контрактов <see cref="P:StockSharp.Algo.Candles.VolumeCandle.Volume" />.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetLastVolumeCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleToken)">
      <summary>
            Получить последнюю свечку.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="token">Идентификатор группировки.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetLastRangeCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Получить последнюю свечку.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечку.</param>
      <param name="priceRange">Признак ценового диапазона <see cref="P:StockSharp.Algo.Candles.RangeCandle.PriceRange" />.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetLastRangeCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleToken)">
      <summary>
            Получить последнюю свечку.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="token">Идентификатор группировки.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetLastPnFCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,StockSharp.Algo.Candles.PnFArg)">
      <summary>
            Получить последнюю свечку.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечку.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.PnFCandle.Arg" />.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetLastPnFCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleToken)">
      <summary>
            Получить последнюю свечку.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="token">Идентификатор группировки.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleToken,System.Int32)">
      <summary>
            Получить по ее порядковому номеру с конца.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="token">Идентификатор группировки.</param>
      <param name="candleIndex">Порядковый номер свечки с конца.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.TimeSpan,System.Int32)">
      <summary>
            Получить по ее порядковому номеру с конца.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечку.</param>
      <param name="timeFrame">Тайм-фрейм, по которому нужно искать свечку.</param>
      <param name="candleIndex">Порядковый номер свечки с конца.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTickCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleToken,System.Int32)">
      <summary>
            Получить по ее порядковому номеру с конца.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="token">Идентификатор группировки.</param>
      <param name="candleIndex">Порядковый номер свечки с конца.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTickCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Int32,System.Int32)">
      <summary>
            Получить по ее порядковому номеру с конца.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечку.</param>
      <param name="tradeCount">Признак максимального количества сделок <see cref="P:StockSharp.Algo.Candles.TickCandle.TradeCount" />.</param>
      <param name="candleIndex">Порядковый номер свечки с конца.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetVolumeCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleToken,System.Int32)">
      <summary>
            Получить по ее порядковому номеру с конца.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="token">Идентификатор группировки.</param>
      <param name="candleIndex">Порядковый номер свечки с конца.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetVolumeCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Int32,System.Int32)">
      <summary>
            Получить по ее порядковому номеру с конца.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечку.</param>
      <param name="volume">Признак максимального количества контрактов <see cref="P:StockSharp.Algo.Candles.VolumeCandle.Volume" />.</param>
      <param name="candleIndex">Порядковый номер свечки с конца.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetRangeCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleToken,System.Int32)">
      <summary>
            Получить по ее порядковому номеру с конца.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="token">Идентификатор группировки.</param>
      <param name="candleIndex">Порядковый номер свечки с конца.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetRangeCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit,System.Int32)">
      <summary>
            Получить по ее порядковому номеру с конца.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечку.</param>
      <param name="priceRange">Признак ценового диапазона <see cref="P:StockSharp.Algo.Candles.RangeCandle.PriceRange" />.</param>
      <param name="candleIndex">Порядковый номер свечки с конца.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetPnFCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleToken,System.Int32)">
      <summary>
            Получить по ее порядковому номеру с конца.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="token">Идентификатор группировки.</param>
      <param name="candleIndex">Порядковый номер свечки с конца.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetPnFCandle(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,StockSharp.Algo.Candles.PnFArg,System.Int32)">
      <summary>
            Получить по ее порядковому номеру с конца.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечку.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.PnFCandle.Arg" />.</param>
      <param name="candleIndex">Порядковый номер свечки с конца.</param>
      <returns>Найденная свечка (null, если нет ни одной свечки).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.TimeSpan,Ecng.ComponentModel.Range{System.DateTime})">
      <summary>
            Получить свечки по инструменту, тайм-фрейму и диапазону дат.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечки.</param>
      <param name="timeFrame">Тайм-фрейм, по которому нужно искать свечки.</param>
      <param name="timeRange">Диапазон дат, в которые должны входить свечки. Учитывается значение <see cref="P:StockSharp.Algo.Candles.Candle.Time" />.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.TimeSpan,System.Int32)">
      <summary>
            Получить свечки по инструменту, тайм-фрейму и общему количеству.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечки.</param>
      <param name="timeFrame">Тайм-фрейм, по которому нужно искать свечки.</param>
      <param name="candleCount">Количество свечек, которое необходимо вернуть.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.TimeSpan)">
      <summary>
            Получить все свечки по инструменту и тайм-фрейму.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечки.</param>
      <param name="timeFrame">Тайм-фрейм, по которому нужно искать свечки.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTickCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Int32,Ecng.ComponentModel.Range{System.DateTime})">
      <summary>
            Получить свечки по инструменту, признаку максимального количества сделок и диапазону дат.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечки.</param>
      <param name="tradeCount">Признак максимального количества сделок <see cref="P:StockSharp.Algo.Candles.TickCandle.TradeCount" />.</param>
      <param name="timeRange">Диапазон дат, в которые должны входить свечки. Учитывается значение <see cref="P:StockSharp.Algo.Candles.Candle.Time" />.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTickCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Int32,System.Int32)">
      <summary>
            Получить свечки по инструменту, признаку максимального количества сделок и общему количеству.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечки.</param>
      <param name="tradeCount">Признак максимального количества сделок <see cref="P:StockSharp.Algo.Candles.TickCandle.TradeCount" />.</param>
      <param name="candleCount">Количество свечек, которое необходимо вернуть.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTickCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Int32)">
      <summary>
            Получить все свечки по инструменту и признаку максимального количества сделок.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечки.</param>
      <param name="tradeCount">Признак максимального количества сделок <see cref="P:StockSharp.Algo.Candles.TickCandle.TradeCount" />.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetVolumeCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Int32,Ecng.ComponentModel.Range{System.DateTime})">
      <summary>
            Получить свечки по инструменту, признаку максимального количества контрактов и диапазону дат.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечки.</param>
      <param name="volume">Признак максимального количества контрактов <see cref="P:StockSharp.Algo.Candles.VolumeCandle.Volume" />.</param>
      <param name="timeRange">Диапазон дат, в которые должны входить свечки. Учитывается значение <see cref="P:StockSharp.Algo.Candles.Candle.Time" />.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetVolumeCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Int32,System.Int32)">
      <summary>
            Получить свечки по инструменту, признаку максимального количества контрактов и общему количеству.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечки.</param>
      <param name="volume">Признак максимального количества контрактов <see cref="P:StockSharp.Algo.Candles.VolumeCandle.Volume" />.</param>
      <param name="candleCount">Количество свечек, которое необходимо вернуть.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetVolumeCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Int32)">
      <summary>
            Получить все свечки по инструменту и признаку максимального количества контрактов.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечки.</param>
      <param name="volume">Признак максимального количества контрактов <see cref="P:StockSharp.Algo.Candles.VolumeCandle.Volume" />.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetRangeCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit,Ecng.ComponentModel.Range{System.DateTime})">
      <summary>
            Получить свечки по инструменту, по признаку ценового диапазона и диапазону дат.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечки.</param>
      <param name="priceRange">Признак ценового диапазона <see cref="P:StockSharp.Algo.Candles.RangeCandle.PriceRange" />.</param>
      <param name="timeRange">Диапазон дат, в которые должны входить свечки. Учитывается значение <see cref="P:StockSharp.Algo.Candles.Candle.Time" />.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetRangeCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit,System.Int32)">
      <summary>
            Получить свечки по инструменту, по признаку ценового диапазона и общему количеству.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечки.</param>
      <param name="priceRange">Признак ценового диапазона <see cref="P:StockSharp.Algo.Candles.RangeCandle.PriceRange" />.</param>
      <param name="candleCount">Количество свечек, которое необходимо вернуть.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetRangeCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Получить все свечки по инструменту, по признаку ценового диапазона.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечки.</param>
      <param name="priceRange">Признак ценового диапазона <see cref="P:StockSharp.Algo.Candles.RangeCandle.PriceRange" />.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetPnFCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,StockSharp.Algo.Candles.PnFArg,Ecng.ComponentModel.Range{System.DateTime})">
      <summary>
            Получить свечки по инструменту, по значению <see cref="P:StockSharp.Algo.Candles.PnFCandle.Arg" /> и диапазону дат.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечки.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.PnFCandle.Arg" />.</param>
      <param name="timeRange">Диапазон дат, в которые должны входить свечки. Учитывается значение <see cref="P:StockSharp.Algo.Candles.Candle.Time" />.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetPnFCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,StockSharp.Algo.Candles.PnFArg,System.Int32)">
      <summary>
            Получить свечки по инструменту, по значению <see cref="P:StockSharp.Algo.Candles.PnFCandle.Arg" /> и общему количеству.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечки.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.PnFCandle.Arg" />.</param>
      <param name="candleCount">Количество свечек, которое необходимо вернуть.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetPnFCandles(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,StockSharp.Algo.Candles.PnFArg)">
      <summary>
            Получить свечки по инструменту и значению <see cref="P:StockSharp.Algo.Candles.PnFCandle.Arg" />.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно искать свечки.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.PnFCandle.Arg" />.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsTimeFrameCandlesRegistered(StockSharp.Algo.Candles.ICandleSource,StockSharp.BusinessEntities.Security,System.TimeSpan)">
      <summary>
            Зарегистрирована ли группировка свечек по признаку тайм-фрейм.
            </summary>
      <param name="source">Источник свечек.</param>
      <param name="security">Инструмент, для которого зарегистрирована группировка.</param>
      <param name="timeFrame">Тайм-фрейм.</param>
      <returns>True, если зарегистрирована. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsTickCandlesRegistered(StockSharp.Algo.Candles.ICandleSource,StockSharp.BusinessEntities.Security,System.Int32)">
      <summary>
            Зарегистрирована ли группировка свечек по признаку максимального количества сделок.
            </summary>
      <param name="source">Источник свечек.</param>
      <param name="security">Инструмент, для которого зарегистрирована группировка.</param>
      <param name="tradeCount">Максимальное количество сделок.</param>
      <returns>True, если зарегистрирована. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsVolumeCandlesRegistered(StockSharp.Algo.Candles.ICandleSource,StockSharp.BusinessEntities.Security,System.Int32)">
      <summary>
            Зарегистрирована ли группировка свечек по признаку максимального количества контрактов.
            </summary>
      <param name="source">Источник свечек.</param>
      <param name="security">Инструмент, для которого зарегистрирована группировка.</param>
      <param name="volume">Максимальное количество контрактов.</param>
      <returns>True, если зарегистрирована. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsRangeCandlesRegistered(StockSharp.Algo.Candles.ICandleSource,StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Зарегистрирована ли группировка свечек по признаку ценового диапазона.
            </summary>
      <param name="source">Источник свечек.</param>
      <param name="security">Инструмент, для которого зарегистрирована группировка.</param>
      <param name="priceRange">Ценовой диапазон.</param>
      <returns>True, если зарегистрирована. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsPnFCandlesRegistered(StockSharp.Algo.Candles.ICandleSource,StockSharp.BusinessEntities.Security,StockSharp.Algo.Candles.PnFArg)">
      <summary>
            Зарегистрирована ли группировка свечек графика крестики-нолики.
            </summary>
      <param name="source">Источник свечек.</param>
      <param name="security">Инструмент, для которого зарегистрирована группировка.</param>
      <param name="arg">Значение параметров пункто-цифрового графика (график крестики-нолики).</param>
      <returns>True, если зарегистрирована. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleTime(System.TimeSpan,StockSharp.BusinessEntities.ITrader)">
      <summary>
            Получить время формирования свечки.
            </summary>
      <param name="timeFrame">Тайм-фрейм, по которому необходимо получить время формирования свечки.</param>
      <param name="trader">Шлюз к торговой системе, по котому через свойство <see cref="P:StockSharp.BusinessEntities.ITrader.MarketTime" /> вычисляется текущее время.</param>
      <returns>Время формирования свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleTime(System.TimeSpan,System.DateTime)">
      <summary>
            Получить время формирования свечки.
            </summary>
      <param name="timeFrame">Тайм-фрейм, по которому необходимо получить время формирования свечки.</param>
      <param name="currentTime">Текущее время, входящее в диапазон временных рамок.</param>
      <returns>Время формирования свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBounds(System.TimeSpan,StockSharp.BusinessEntities.ITrader)">
      <summary>
            Получить временные рамки свечки.
            </summary>
      <param name="timeFrame">Тайм-фрейм, по которому необходимо получить временные рамки.</param>
      <param name="trader">Шлюз к торговой системе.</param>
      <returns>Временные рамки свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBounds(System.TimeSpan,System.DateTime)">
      <summary>
            Получить временные рамки свечки.
            </summary>
      <param name="timeFrame">Тайм-фрейм, по которому необходимо получить временные рамки.</param>
      <param name="currentTime">Текущее время, входящее в диапазон временных рамок.</param>
      <returns>Временные рамки свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBounds(System.TimeSpan,System.DateTime,StockSharp.BusinessEntities.Exchange)">
      <summary>
            Получить временные рамки свечки относительно времени работы биржи.
            </summary>
      <param name="timeFrame">Тайм-фрейм, по которому необходимо получить временные рамки.</param>
      <param name="currentTime">Текущее время, входящее в диапазон временных рамок.</param>
      <param name="exchange">Информация о бирже, из которой будет взято время работы <see cref="P:StockSharp.BusinessEntities.Exchange.WorkingTime" />.</param>
      <returns>Временные рамки свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBounds(System.TimeSpan,System.DateTime,StockSharp.BusinessEntities.WorkingTime)">
      <summary>
            Получить временные рамки свечки относительно режиме работы биржи.
            </summary>
      <param name="timeFrame">Тайм-фрейм, по которому необходимо получить временные рамки.</param>
      <param name="currentTime">Текущее время, входящее в диапазон временных рамок.</param>
      <param name="time">Информация о режиме работы биржы.</param>
      <returns>Временные рамки свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleLength(StockSharp.Algo.Candles.Candle)">
      <summary>
            Получить длину свечки.
            </summary>
      <param name="candle">Свечка, для которой необходимо получить длины.</param>
      <returns>Длина свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBody(StockSharp.Algo.Candles.Candle)">
      <summary>
            Получить тело свечки.
            </summary>
      <param name="candle">Свечка, для которой необходимо получить тело.</param>
      <returns>Тело свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleTopShadow(StockSharp.Algo.Candles.Candle)">
      <summary>
            Получить длину верхней тени свечки.
            </summary>
      <param name="candle">Свечка, для которой необходимо получить длины верхней тени.</param>
      <returns>Длина верхней тени свечки. Если 0, то тень отсутствует.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBottomShadow(StockSharp.Algo.Candles.Candle)">
      <summary>
            Получить длину нижней тени свечки.
            </summary>
      <param name="candle">Свечка, для которой необходимо получить длины нижней тени.</param>
      <returns>Длина нижней тени свечки. Если 0, то тень отсутствует.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsCandleWhiteOrBlack(StockSharp.Algo.Candles.Candle)">
      <summary>
            Белая ли или черная свечка.
            </summary>
      <param name="candle">Свечка, для которой необходимо определить цвет.</param>
      <returns>True, если свечка белая, false, если черная, и null, если свечка плоская.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsCandleMarubozu(StockSharp.Algo.Candles.Candle)">
      <summary>
            Бестеневая ли свечка тени.
            </summary>
      <param name="candle">Свечка, для которой необходимо определить наличие теней.</param>
      <returns>True, если свечка не имеет теней, false, если имеет.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsCandleSpinningTop(StockSharp.Algo.Candles.Candle)">
      <summary>
            Нейтральная ли свечка сделкам.
            </summary>
      <remarks>
            Нейтральность определяется как ситуация, когда в период свечки ни покупатели ни продавцы не создали тренд.
            </remarks>
      <param name="candle">Свечка, для которой необходимо рассчитать, нейтральна ли она.</param>
      <returns>True, если свечка нейтральна, false, если не нейтральная.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsCandleHammer(StockSharp.Algo.Candles.Candle)">
      <summary>
            Является ли свечка молотом.
            </summary>
      <param name="candle">Свечка, которую необходимо проверить на паттерн.</param>
      <returns>True, если является, false, если нет.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsCandleDragonflyOrGravestone(StockSharp.Algo.Candles.Candle)">
      <summary>
            Является ли свечка стрекозой или надгробьем.
            </summary>
      <param name="candle">Свечка, которую необходимо проверить на паттерн.</param>
      <returns>True, если стрекоза, false, если надгробье, null - ни то, ни другое.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsCandleBullishOrBearish(StockSharp.Algo.Candles.Candle)">
      <summary>
            Бычья ли или медвежья свечка.
            </summary>
      <param name="candle">Свечка, которую необходимо проверить на тренд.</param>
      <returns>True, если бычья, false, если медвежья, null - ни то, ни другое.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCount(StockSharp.BusinessEntities.Security,Ecng.ComponentModel.Range{System.DateTime},System.TimeSpan)">
      <summary>
            Получить количество временных интервалов в пределах заданного отрезка времени.
            </summary>
      <param name="security">Инструмент, по которому вычисляется время работы биржи через свойство <see cref="P:StockSharp.BusinessEntities.Security.Exchange" />.</param>
      <param name="range">Заданный отрезок времени, для которого нужно получить количество временных интервалов.</param>
      <param name="timeFrame">Размер временного интервала.</param>
      <returns>Полученное количество временных интервалов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCount(StockSharp.BusinessEntities.Exchange,Ecng.ComponentModel.Range{System.DateTime},System.TimeSpan)">
      <summary>
            Получить количество временных интервалов в пределах заданного отрезка времени.
            </summary>
      <param name="exchange">Информация о бирже, по которому вычисляется время работы через свойство <see cref="P:StockSharp.BusinessEntities.Exchange.WorkingTime" />.</param>
      <param name="range">Заданный отрезок времени, для которого нужно получить количество временных интервалов.</param>
      <param name="timeFrame">Размер временного интервала.</param>
      <returns>Полученное количество временных интервалов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCount(StockSharp.BusinessEntities.WorkingTime,Ecng.ComponentModel.Range{System.DateTime},System.TimeSpan)">
      <summary>
            Получить количество временных интервалов в пределах заданного отрезка времени.
            </summary>
      <param name="workingTime">Режим работы биржи.</param>
      <param name="range">Заданный отрезок времени, для которого нужно получить количество временных интервалов.</param>
      <param name="timeFrame">Размер временного интервала.</param>
      <returns>Полученное количество временных интервалов.</returns>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StopLossStrategy">
      <summary>
            Стратегия защиты убытка.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StopLossStrategy.#ctor(StockSharp.BusinessEntities.MyTrade,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать стратегию <see cref="T:StockSharp.Algo.Strategies.StopLossStrategy" />.
            </summary>
      <param name="trade">Защищаемая позиция.</param>
      <param name="protectiveLevel">
            Защитный уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />,
            то задается конкретная цена. Иначе, указывается величина сдвига от защищаемой сделки <paramref name="trade" />.
            </param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StopLossStrategy.NeedActivate">
      <summary>
            Нужно ли активировать защитную стратегию.
            </summary>
      <returns>True, если требуется активация. Иначе, false.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StopLossStrategy.IsTrailing">
      <summary>
            Использовать ли механизм скольжения (при увеличении прибыли автоматически увеличивать рубеж защиты убытка). По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StopLossStrategy.ProtectivePrice">
      <summary>
            Абсолютное значение цены, при достижении которой автивизируется защитная стратегия.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.StrategyStorageMonitor">
      <summary>
            Специальный класс, сохраняющий данные из стратегий <see cref="P:StockSharp.Algo.Storages.StrategyStorageMonitor.Strategies" /> во внешнее хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.StrategyStorageMonitor.#ctor(StockSharp.Algo.Storages.ITradingStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.StrategyStorageMonitor" />.
            </summary>
      <param name="storage">Интерфейс, описывающий внешнее хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StrategyStorageMonitor.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StrategyStorageMonitor.Storage">
      <summary>
            Интерфейс, описывающий внешнее хранилище.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.StrategyStorageMonitor.Strategies">
      <summary>
            Стратегии, данные которых необходимо сохранять.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleManager">
      <summary>
            Интерфейс менеджера свечек.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleManager.Sources">
      <summary>
            Источники свечек.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleManager.Container">
      <summary>
            Kонтейнер данных.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.StrategyDebug">
      <summary>
            API для программной приостановки исполнения стратегии.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.StrategyDebug.Get(StockSharp.Algo.Testing.IEmulationTrader)">
      <summary>
            Получить API для программной приостановки исполнения стратегии.
            </summary>
      <param name="trader">Интерфейс шлюза-эмулятора биржи.</param>
      <returns>API для программной приостановки исполнения стратегии.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.StrategyDebug.Break">
      <summary>
            Приостановить исполнение стратегии. Для возобновления необходимо вызвать <see cref="M:StockSharp.Algo.Testing.StrategyDebug.Resume" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.StrategyDebug.Resume">
      <summary>
            Возобновить исполнение стратегии.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.StrategyDebug.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.StrategyDebug.BreakOnNewMyTrade">
      <summary>
            Приостанавливать эмуляцию при возникновении собственной сделки. По умолчанию отключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.StrategyDebug.BreakOnNewOrder">
      <summary>
            Приостанавливать эмуляцию при регистрации нового ордера. По умолчанию отключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.StrategyDebug.BreakOnTime">
      <summary>
            Приостановить эмуляцию при достижении данного момента времени. По умолчанию отключено (значение установлено в null).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.StrategyDebug.BreakOnNewTrade">
      <summary>
            Приостановить эмуляцию на получении новой сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.StrategyDebug.BreakOnNewDepth">
      <summary>
            Приостановить эмуляцию на получении нового стакана.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.MarketEmulatorSettings">
      <summary>
            Настройки эмулятора биржи.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulatorSettings.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.MarketEmulatorSettings" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.Slippage">
      <summary>
            Максимальный уровень проскальзывания, который может происходить при исполнении заявки.
            По умолчанию проскальзование отсутствует.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.Failing">
      <summary>
            Процентное значение ошибки регистрации новых заявок.
            Значение может быть от 0 (не будет ни одной ошибки) до 100. По умолчанию значение равно 0.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.Latency">
      <summary>
            Максимальное значение задержки выставляемых заявок.
            По умолчанию равно <see cref="F:System.TimeSpan.Zero" />, что означает мгновенное принятие биржей выставляемых заявок.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.PnL.SecurityPnLManager">
      <summary>
            Менеджер прибыли-убытка для конкретного инструмента <see cref="P:StockSharp.Algo.PnL.SecurityPnLManager.Security" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.SecurityPnLManager.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать менеджер прибыли-убытка.
            </summary>
      <param name="security">Инструмент, для которого необходимо учитывать прибыль-убыток.</param>
    </member>
    <member name="M:StockSharp.Algo.PnL.SecurityPnLManager.Init">
      <summary>
            Инициализировать первоначальное состояние менеджера прибыли-убытка.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.SecurityPnLManager.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.SecurityPnLManager.Security">
      <summary>
            Инструмент, для которого необходимо учитывать прибыль-убыток.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.SecurityPnLManager.PnL">
      <summary>
            Значение прибыли-убытка с учетом открытой позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.SecurityPnLManager.RelatedValue">
      <summary>
            Относительное значение прибыли-убытка без учета открытой позиции.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleManager">
      <summary>
            Менеджер свечек.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleManager" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.#ctor(StockSharp.Algo.Candles.ICandleContainer)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleManager" />.
            </summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleManager" />.
            </summary>
      <param name="trader">Шлюз к торговой системе для создания источника тиковых сделок по-умолчанию.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.GetToken(System.Type,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Найти идентификатор группировки свечек по заданным параметрам.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <param name="security">Инструмент, для которого зарегистрирована группировка.</param>
      <param name="arg">Параметр формирования свечки. Например, для <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" /> это значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.</param>
      <returns>Идентификатор группировки. Если такой группировки не зарегистрировано, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.IsSupport(System.Type,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Возможно ли зарегистрировать группировку свечек.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <param name="security">Инструмент, по которому нужно фильтровать сделки для формирования свечек.</param>
      <param name="arg">Параметр формирования свечки. Например, для <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" /> это значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.</param>
      <returns>True, если через данный источник возможно зарегистрировать группировку свечек, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.Register(System.Type,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Зарегистрировать группировку свечек.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <param name="security">Инструмент, по которому нужно фильтровать сделки для формирования свечек.</param>
      <param name="arg">Параметр формирования свечки. Например, для <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" /> это значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.</param>
      <returns>Идентификатор группировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.UnRegister(StockSharp.Algo.Candles.CandleToken)">
      <summary>
            Удалить группировку свечек.
            </summary>
      <param name="token">Идентификатор группировки, полученный при регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.RaiseCandlesStarted(StockSharp.Algo.Candles.CandleToken,System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Candle})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.CandleManager.CandlesStarted" />.
            </summary>
      <param name="token">Идентификатор.</param>
      <param name="candles">Свечки, которые необходимо передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.RaiseCandlesChanged(StockSharp.Algo.Candles.CandleToken,System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Candle})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.CandleManager.CandlesChanged" />.
            </summary>
      <param name="token">Идентификатор.</param>
      <param name="candles">Свечки, которые необходимо передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.RaiseCandlesFinished(StockSharp.Algo.Candles.CandleToken,System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Candle})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.CandleManager.CandlesFinished" />.
            </summary>
      <param name="token">Идентификатор.</param>
      <param name="candles">Свечки, которые необходимо передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.RaiseProcessDataError(System.Exception)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.CandleManager.ProcessDataError" />.
            </summary>
      <param name="error">Информация об ошибке.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleManager.Sources">
      <summary>
            Источники свечек.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleManager.Container">
      <summary>
            Kонтейнер данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleManager.Tokens">
      <summary>
            Все зарегистрированные идентификаторы группировок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleManager.CandlesStarted">
      <summary>
            Событие начала формирования свечек.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleManager.CandlesChanged">
      <summary>
            Событие изменения свечек.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleManager.CandlesFinished">
      <summary>
            Событие окончания формирования свечек.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleManager.ProcessDataError">
      <summary>
            Событие ошибки формирования свечек.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.BasketStrategyFinishModes">
      <summary>
            Условия окончания работы дочерних стратегий.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.First">
      <summary>
            Если закончилась хотя бы одна стратегия.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.All">
      <summary>
            Если закончились все стратегии.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.TraderStorageFilters">
      <summary>
            Фильтры данных, которые необходимо сохранять.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.None">
      <summary>
            Не соранять ничего.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.NewSecurity">
      <summary>
            Сохранять инструмент при его появлении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.SecurityChanged">
      <summary>
            Сохранять инструмент при его изменении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.NewOrder">
      <summary>
            Сохранять заявку при ее появлении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.OrderChanged">
      <summary>
            Сохранять заявку при ее изменении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.RegisterOrderFailed">
      <summary>
            Сохранять ошибку регистрации заявки.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.RegisterCancelFailed">
      <summary>
            Сохранять ошибку снятия заявки.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.NewTrade">
      <summary>
            Сохранять сделку при его появлении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.NewMyTrade">
      <summary>
            Сохранять инструмент при ее появлении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.NewPosition">
      <summary>
            Сохранять позицию при ее появлении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.PositionChanged">
      <summary>
            Сохранять позицию при ее изменении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.NewPortfolio">
      <summary>
            Сохранять портфель при его появлении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.PortfolioChanged">
      <summary>
            Сохранять портфель при его изменении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.QuotesChanged">
      <summary>
            Сохранять стакан котировок.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.SettingsStorage">
      <summary>
            Специальный класс для сохранения и загрузки настроек. Поддерживает еирархическую вложенность через метод <see cref="M:StockSharp.Algo.Storages.SettingsStorage.SetValue``1(System.String,``0)" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.SettingsStorage.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.SettingsStorage" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.SettingsStorage.SetValue``1(System.String,``0)">
      <summary>
            Добавить значение в настройки.
            </summary>
      <typeparam name="T">Тип значения. Если тип значения равен <see cref="T:StockSharp.Algo.Storages.SettingsStorage" />, то образуется иерархия.</typeparam>
      <param name="name">Название значения.</param>
      <param name="value">Значение.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.SettingsStorage.Contains(System.String)">
      <summary>
            Проверить, содержится ли значение в настройках.
            </summary>
      <param name="name">Название значения.</param>
      <returns>True, если значение содержится, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SettingsStorage.GetValue``1(System.String,``0)">
      <summary>
            Получить значение из настроек.
            </summary>
      <typeparam name="T">Тип значения.</typeparam>
      <param name="name">Название значения.</param>
      <param name="defaultValue">Значения по умолчанию, если по названию <paramref name="name" /> не было найдено значения.</param>
      <returns>Значение. Если по названию <paramref name="name" /> не было найдено сохраненного значения, то будет возвращено <paramref name="defaultValue" />.</returns>
    </member>
    <member name="P:StockSharp.Algo.Storages.SettingsStorage.Names">
      <summary>
            Все названия значений, хранящиеся в настройках.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.MarketDataBuffer`1">
      <summary>
            Буфер маркет-данных.
            </summary>
      <typeparam name="TMarketData">Тип маркет-данных.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Storages.MarketDataBuffer`1.Add(StockSharp.BusinessEntities.Security,`0)">
      <summary>
            Добавить новую информацию в буфер.
            </summary>
      <param name="security">Инструмент, которому принадлежит новая информация.</param>
      <param name="data">Новая информация.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.MarketDataBuffer`1.Get">
      <summary>
            Получить накопленные данные из буфера и удалить их.
            </summary>
      <returns>Полученные данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.MarketDataBuffer`1.Get(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить накопленные данные из буфера и удалить их.
            </summary>
      <param name="security">Инструмент, которому принадлежат маркет-данных.</param>
      <returns>Полученные данные.</returns>
    </member>
    <member name="P:StockSharp.Algo.Storages.MarketDataBuffer`1.Size">
      <summary>
            Размер буфера.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.ReConnectionSettings">
      <summary>
            Настройки механизма отслеживания соединений <see cref="T:StockSharp.BusinessEntities.ITrader" /> с торговом системой.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ReConnectionSettings.Interval">
      <summary>
            Интервал, с которым будут происходить попытки <see cref="T:StockSharp.BusinessEntities.ITrader" /> установить соединение с торговой системой.
            </summary>
      <remarks>
            По умолчанию интервал равен 10 секунд.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.ReConnectionSettings.WorkingTime">
      <summary>
            Режим работы, во время которого необходимо производить подключения.
            Например, нет необходимости проводить подключение, когда окончены торги на бирже.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ReConnectionSettings.ConnectingAttemptCount">
      <summary>
            Количество попыток установить первоначальное соеднинение, если оно не было установлено (тайм-аут, сетевой сбой и т.д.).
            По-умолчанию количество попыток равно 0. Для установление беконечного количества попыток используется значение -1.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ReConnectionSettings.ReConnectingAttemptCount">
      <summary>
            Количество попыток переподсоединиться, если соединение было утеряно в процессе работы.
            По-умолчанию количество попыток равно 100. Для установление беконечного количества попыток используется значение -1.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ReConnectionSettings.IsReStartExport">
      <summary>
            Перезапускать ли экспорт после восстановления соединения. По-умолчанию режим выключен.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ReConnectionSettings.ConnectDisconnectTimeOutInterval">
      <summary>
            Время ожидания события успешного подключения/отключения. По-умолчанию значение равно 1 минуте.
            Если значение равно <see cref="F:System.TimeSpan.Zero" />, то мониторинг не производится.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ReConnectionSettings.ExportTimeOutInterval">
      <summary>
            Интервал для мониторинга потери передачи данных между роботом и торговой программой.
            </summary>
      <remarks>
            Если мониторинг уже был установлен до этого, то применяется новое значение для интервала.
            Если значение равно <see cref="F:System.TimeSpan.Zero" />, то мониторинг останавливается.
            По-умолчанию мониторинг выключен.
            </remarks>
    </member>
    <member name="E:StockSharp.Algo.ReConnectionSettings.ConnectionRestored">
      <summary>
            Событие об успешном восстановлении соединения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.ReConnectionSettings.ConnectionAttemptError">
      <summary>
            Событие об ошибке при попытке восстановить соединение.
            Возникает каждый раз при неудачной попытке восстановления соединения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.ReConnectionSettings.ExportTimeOut">
      <summary>
            Событие о тайм-ауте поступающих данных в программу. Событие позволяет узнать, как долго торговая программа не посылала данные роботу.
            Подобное событие сигнализирует о сбое передачи данных между роботом и торговой программой.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Positions.RawPositionManager">
      <summary>
            Менеджер позиции, рассчитывающий позицию напрямую через коллекцию объектов <see cref="T:StockSharp.BusinessEntities.MyTrade" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.RawPositionManager.AddNewTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Добавить новые сделки.
            </summary>
      <param name="trades">Новые сделки.</param>
    </member>
    <member name="P:StockSharp.Algo.Positions.RawPositionManager.Trades">
      <summary>
            Все сделки, по которым была посчитана позиция.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.Synthetic">
      <summary>
            Построитель синтетических позиций.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Derivatives.Synthetic" />.
            </summary>
      <param name="security">Инструмент (опцион или базовый актив).</param>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Buy">
      <summary>
            Получить синтетическую позицию для покупки опциона.
            </summary>
      <returns>Синтетическая позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Sell">
      <summary>
            Получить синтетическую позицию для продажи опциона.
            </summary>
      <returns>Синтетическая позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Position(StockSharp.BusinessEntities.OrderDirections)">
      <summary>
            Получить синтетическую позицию для опциона.
            </summary>
      <param name="direction">Направление основной позиции.</param>
      <returns>Синтетическая позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Buy(System.Decimal)">
      <summary>
            Получить опционную позицию для синтетической покупки базового актива.
            </summary>
      <param name="strike">Страйк.</param>
      <returns>Опционная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Buy(System.Decimal,System.DateTime)">
      <summary>
            Получить опционную позицию для синтетической покупки базового актива.
            </summary>
      <param name="strike">Страйк.</param>
      <param name="expiryDate">Дата экспирации опциона.</param>
      <returns>Опционная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Sell(System.Decimal)">
      <summary>
            Получить опционную позицию для синтетической продажи базового актива.
            </summary>
      <param name="strike">Страйк.</param>
      <returns>Опционная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Sell(System.Decimal,System.DateTime)">
      <summary>
            Получить опционную позицию для синтетической продажи базового актива.
            </summary>
      <param name="strike">Страйк.</param>
      <param name="expiryDate">Дата экспирации опциона.</param>
      <returns>Опционная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Position(System.Decimal,System.DateTime,StockSharp.BusinessEntities.OrderDirections)">
      <summary>
            Получить опционную позицию для синтетического базового актива.
            </summary>
      <param name="strike">Страйк.</param>
      <param name="expiryDate">Дата экспирации опциона.</param>
      <param name="direction">Направление основной позиции.</param>
      <returns>Опционная позиция.</returns>
    </member>
    <member name="T:StockSharp.Algo.Strategies.TakeProfitStrategy">
      <summary>
            Стратегия защиты прибыли.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TakeProfitStrategy.#ctor(StockSharp.BusinessEntities.MyTrade,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать стратегию <see cref="T:StockSharp.Algo.Strategies.TakeProfitStrategy" />.
            </summary>
      <param name="trade">Защищаемая позиция.</param>
      <param name="protectiveLevel">
            Защитный уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />,
            то задается конкретная цена. Иначе, указывается величина сдвига от защищаемой сделки <paramref name="trade" />.
            </param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TakeProfitStrategy.NeedActivate">
      <summary>
            Нужно ли активировать защитную стратегию.
            </summary>
      <returns>True, если требуется активация. Иначе, false.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TakeProfitStrategy.ProtectivePrice">
      <summary>
            Абсолютное значение цены, при достижении которой автивизируется защитная стратегия.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Positions.SecurityPositionManager">
      <summary>
            Менеджер позиции для конкретного инструмента <see cref="P:StockSharp.Algo.Positions.SecurityPositionManager.Security" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.SecurityPositionManager.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать менеджер позиции.
            </summary>
      <param name="security">Инструмент, для которого необходимо учитывать позицию.</param>
    </member>
    <member name="M:StockSharp.Algo.Positions.SecurityPositionManager.ProcessNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Обработчик события появления новых Моих Сделок.
            </summary>
      <param name="trades">Новые сделки, по который необходимо провести пересчет позиции.</param>
    </member>
    <member name="P:StockSharp.Algo.Positions.SecurityPositionManager.Trades">
      <summary>
            Все сделки, по которым была посчитана позиция.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.SecurityPositionManager.Security">
      <summary>
            Инструмент, для которого необходимо учитывать позицию.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.AutoProtectiveStrategy">
      <summary>
            Cтратегия автоматической защиты позиции.
            </summary>
      <remarks>
            Новые сделки в стратегию поступают через <see cref="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.ProcessNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})" /> или правило <see cref="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.MyTradesRule" />.
            Они автоматически защищаются с помощью <see cref="T:StockSharp.Algo.Strategies.TakeProfitStopLossStrategy" />.
            Дополнительно, <see cref="T:StockSharp.Algo.Strategies.AutoProtectiveStrategy" /> переворачивает стопы в случае переворота позиции.
            </remarks>
    </member>
    <member name="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.AutoProtectiveStrategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.Protect(System.Decimal)">
      <summary>
            Защитить позицию, которая была обновлена через <see cref="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.Item(StockSharp.BusinessEntities.Security)" />.
            </summary>
      <param name="position">Позиция.</param>
      <returns>Защитная стратегия. Если будет возвращено null, значит защита позиции игнорируется.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.Protect(System.Collections.Generic.IDictionary{StockSharp.BusinessEntities.MyTrade,System.Decimal})">
      <summary>
            Защитить сделки.
            </summary>
      <param name="trades">Сделки. По ключу указана защищаемая сделка, по значению указан объем, который необходимо защитить.</param>
      <returns>Защитные стратегии.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.Sort(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{StockSharp.BusinessEntities.MyTrade,StockSharp.Algo.Strategies.IProtectiveStrategy}})">
      <summary>
            Отсортировать защитные стратегии для указания наиболее худшей и лучшей по рыночным ценам (при частичной закрытие позиции в первую очередь
            снимаются наиболее худшие).
            </summary>
      <param name="strategies">Защитные стратегии в неотсортированном порядке.</param>
      <returns>Отсортированные порядки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.GetProtectiveTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade},System.Decimal)">
      <summary>
            Получить из всех сделок те, которые необходимо защитить.
            </summary>
      <param name="trades">Новые сделки.</param>
      <param name="maxVolume">Максимальный объем, который необъодимо защитить.</param>
      <returns>Сделки, которые необходимо защитить.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.ProcessNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Обработать сделки для коррекции объема защитных стратегий.
            </summary>
      <param name="trades">Сделки.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.TakeProfitLevel">
      <summary>
            Защитный уровень для тейк-профита. По-умолчанию уровень равен 0, что означает отключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.StopLossLevel">
      <summary>
            Защитный уровень для стоп-лосса. По-умолчанию уровень равен 0, что означает отключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.MyTradesRule">
      <summary>
            Правило появления новых сделок. Сделки, которые появляются от данного правила, автоматически транслируются в <see cref="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.ProcessNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.Item(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить или установить первоначальную позицию для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.TraderStorageMonitor">
      <summary>
            Специальный класс, сохраняющий данные из шлюзов <see cref="P:StockSharp.Algo.Storages.TraderStorageMonitor.Traders" /> во внешнее хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.TraderStorageMonitor.#ctor(StockSharp.Algo.Storages.ITradingStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.TraderStorageMonitor" />.
            </summary>
      <param name="storage">Интерфейс, описывающий внешнее хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.TraderStorageMonitor.Flush">
      <summary>
            Принудительно очистить кэш.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.TraderStorageMonitor.SaveSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Сохранить информацию по инструменту.
            </summary>
      <param name="security">Инструмент, информацию которого необходимо сохранить.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.TraderStorageMonitor.SaveOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Сохранить информацию по заявке.
            </summary>
      <param name="order">Заявка, информацию которой необходимо сохранить.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.TraderStorageMonitor.SaveRegisterOrderFail(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Сохранить информацию об ошибке регистрации заявки.
            </summary>
      <param name="fail">Описание ошибки, которая произошла при регистрации заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.TraderStorageMonitor.SaveCancelOrderFail(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Сохранить информацию об ошибке снятия заявки.
            </summary>
      <param name="fail">Описание ошибки, которая произошла при снятии заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.TraderStorageMonitor.SaveMyTrade(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Сохранить информацию по моей сделке.
            </summary>
      <param name="trade">Моя сделка, информацию которой необходимо сохранить.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.TraderStorageMonitor.SaveTrade(StockSharp.BusinessEntities.Trade)">
      <summary>
            Сохранить информацию по сделке.
            </summary>
      <param name="trade">Сделка, информацию которой необходимо сохранить.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.TraderStorageMonitor.SaveQuotes(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Сохранить информацию по стакану.
            </summary>
      <param name="depth">Стакан, информацию которого необходимо сохранить.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.TraderStorageMonitor.SavePortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Сохранить информацию по портфелю.
            </summary>
      <param name="portfolio">Портфель, информацию которого необходимо сохранить.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.TraderStorageMonitor.SavePosition(StockSharp.BusinessEntities.Position)">
      <summary>
            Сохранить информацию по позиции.
            </summary>
      <param name="position">Позиция, информацию которой необходимо сохранить.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.TraderStorageMonitor.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.TraderStorageMonitor.Storage">
      <summary>
            Интерфейс, описывающий внешнее хранилище.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.TraderStorageMonitor.Traders">
      <summary>
            Шлюзы, данные которых необходимо сохранять.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.TraderStorageMonitor.IsSuspended">
      <summary>
            Приостановлен ли процесс сохранения поступающих данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.TraderStorageMonitor.Filter">
      <summary>
            Фильтры данных, которые необходимо сохранять.
            По-умолчанию, выбраны все фильтры.
            Для установления нового фильтра необходимо использовать следующий вид записи:
            <code>
            // сохранять только новые инструменты, заявки и мои сделки
            Mode = TraderStorageFilters.NewSecurity | TraderStorageFilters.NewOrder | TraderStorageFilters.NewMyTrade;
            </code></summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.TraderStorageMonitor.MarketDepthTimeStep">
      <summary>
            Дискретный шаг во времени, определяющий, как часто надо сохранять изменения в стакане.
            По умолчанию значение равно <see cref="F:System.TimeSpan.Zero" />, что означает непрерывное сохранение изменений в стакане.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.SecurityIdGenerator">
      <summary>
            Генератор идентификаторов инструментов <see cref="P:StockSharp.BusinessEntities.Security.Id" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.SecurityIdGenerator.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.SecurityIdGenerator" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.SecurityIdGenerator.GenerateId(System.String,System.String,StockSharp.BusinessEntities.Exchange)">
      <summary>
            Сгенерировать <see cref="P:StockSharp.BusinessEntities.Security.Id" /> инструмента.
            </summary>
      <param name="secCode">Код инструмента.</param>
      <param name="secClass">Класс инструмента.</param>
      <param name="exchange">Биржа инструмента.</param>
      <returns>
        <see cref="P:StockSharp.BusinessEntities.Security.Id" /> инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.SecurityIdGenerator.GetCode(System.String)">
      <summary>
            Получить код инструмента по его идентификатору.
            </summary>
      <param name="secId">Идентификатор инструмента <see cref="P:StockSharp.BusinessEntities.Security.Id" />.</param>
      <returns>Код инструмента <see cref="P:StockSharp.BusinessEntities.Security.Code" />.</returns>
    </member>
    <member name="P:StockSharp.Algo.SecurityIdGenerator.Delimiter">
      <summary>
            Разделитель между кодом и классом инструмента.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.MarketDepthGenerator">
      <summary>
            Генератор стакана случайным методом.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDepthGenerator.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Testing.MarketDepthGenerator" />.
            </summary>
      <param name="security">Инструмент, для которого необходимо генерировать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDepthGenerator.Generate(System.DateTime)">
      <summary>
            Сгенерировать стакан.
            </summary>
      <param name="time">Биржевое время.</param>
      <returns>Сгенерированный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDepthGenerator.UpdateTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade})">
      <summary>
            Обновить генератор данными о реальных сделках.
            </summary>
      <param name="trades">Сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDepthGenerator.CreateQuote(System.Decimal,StockSharp.BusinessEntities.OrderDirections)">
      <summary>
            Создать случайным методом котировку.
            </summary>
      <param name="startPrice">Начальная цена, от которой случайным методом необходимо получить цену котировки.</param>
      <param name="direction">Направление котировки.</param>
      <returns>Случайная котировка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDepthGenerator.IsTimeToGenerate(System.DateTime)">
      <summary>
            Требуется ли генерация новых данных.
            </summary>
      <param name="time">Текущее время.</param>
      <returns>true если надо сгенерировать данные.</returns>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.UseTradeVolume">
      <summary>
            Использовать для генерации лучших котировок в стакане объем исторических сделок.
            </summary>
      <remarks>
            Значение по умолчанию true.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MinSpreadStepCount">
      <summary>
            Минимальная величина спреда между лучшими котировками в единицах числа шагов цены.
            Величина спреда будет выбрана случайно между <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MinSpreadStepCount" /> и <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxSpreadStepCount" />.
            </summary>
      <remarks>
            Значение по умолчанию 1.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxSpreadStepCount">
      <summary>
            Максимальная величина спреда между лучшими котировками в единицах числа шагов цены.
            Величина спреда будет выбрана случайно между <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MinSpreadStepCount" /> и <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxSpreadStepCount" />.
            </summary>
      <remarks>
            Значение по умолчанию <see cref="F:System.Int32.MaxValue" />.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxBidsDepth">
      <summary>
            Максимальная глубина бидов.
            </summary>
      <remarks>
            Значение по умолчанию равно 10.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxAsksDepth">
      <summary>
            Максимальная глубина офферов.
            </summary>
      <remarks>
            Значение по умолчанию равно 10.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.GenerateDepthOnEachTrade">
      <summary>
            Генерировать ли стаканы после каждой сделки. По умолчанию false.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxGenerations">
      <summary>
            Максимальное количество генераций после последнего поступления исходных данных для стакана.
            </summary>
      <remarks>
            Значение по умолчанию равно 20.
            </remarks>
    </member>
    <member name="T:StockSharp.Algo.Testing.TrendMarketDepthGenerator">
      <summary>
            Генератор стаканов, учитывающий последовательность сделок.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.TrendMarketDepthGenerator" />.
            </summary>
      <param name="security">Инструмент, для которого необходимо генерировать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.Init">
      <summary>
            Инициализировать состояние генератора.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.UpdateTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade})">
      <summary>
            Обновить генератор данными о реальных сделках.
            </summary>
      <param name="trades">Сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.Generate(StockSharp.BusinessEntities.MarketDepth,System.DateTime)">
      <summary>
            Сгенерировать стакан, имитируя спред по направлению изменения цены последних 2х сделок.
            </summary>
      <param name="data">Маркет-данные.</param>
      <param name="time">Текущее время.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.IsTimeToGenerate(System.DateTime)">
      <summary>
            Нужно ли генерировать ли новый стакан.
            </summary>
      <param name="time">Биржевое время.</param>
      <returns>true если надо сгенерировать данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.Clone">
      <summary>
            Создать копию генератора.
            </summary>
      <returns>Копия.</returns>
    </member>
    <member name="T:StockSharp.Algo.Logging.SoundLogListener">
      <summary>
            Логгер, проигрывающий музыку при получении сообщения.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.SoundLogListener.#ctor(System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.SoundLogListener" />.
            </summary>
      <param name="fileName">Путь к файлу со звуком, которое будет проиграно при получении сообщения.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.SoundLogListener.OnWriteMessage(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Записать сообщение.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="P:StockSharp.Algo.Logging.SoundLogListener.FileName">
      <summary>
            Путь к файлу со звуком, которое будет проиграно при получении сообщения.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Slippage.SecuritySlippageManager">
      <summary>
            Менеджер проскальзывания для конкретного инструмента <see cref="P:StockSharp.Algo.Slippage.SecuritySlippageManager.Security" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SecuritySlippageManager.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать менеджер проскальзывания.
            </summary>
      <param name="security">Инструмент, для которого необходимо учитывать проскальзывание.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SecuritySlippageManager.OnNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.NewOrders" />.
            </summary>
      <param name="orders">Новые заявки.</param>
    </member>
    <member name="P:StockSharp.Algo.Slippage.SecuritySlippageManager.Orders">
      <summary>
            Все заявки, зарегистрированные для мониторинга.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.SecuritySlippageManager.Trades">
      <summary>
            Все сделки, по которым было посчитано проскальзывание.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.SecuritySlippageManager.Security">
      <summary>
            Инструмент, для которого необходимо учитывать проскальзывание.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Logging.ConsoleLogListener">
      <summary>
            Логгер, записывающий данные в консольное окно.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.ConsoleLogListener.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Logging.ConsoleLogListener" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.ConsoleLogListener.OnWriteMessage(StockSharp.Algo.Logging.LogMessage)">
      <summary>
            Записать сообщение.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="T:StockSharp.Algo.Strategies.DeltaHedgeStrategy">
      <summary>
            Стратегия дельта хеджирования опционов.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.DeltaHedgeStrategy.#ctor(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.DeltaHedgeStrategy" />.
            </summary>
      <param name="tradingStrategy">Стратегия, содержащая в себе дочерние стратегии, которые торгуют по отдельному страйку.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.DeltaHedgeStrategy.OnStarting">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.Strategies.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.DeltaHedgeStrategy.CreateQuoting(StockSharp.BusinessEntities.OrderDirections,System.Decimal)">
      <summary>
            Создать стратегию котирования для изменения позиции.
            </summary>
      <param name="direction">Направление котирования.</param>
      <param name="volume">Объем котирования.</param>
      <returns>Стратегия котирования.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.DeltaHedgeStrategy.MaxRegisterAttemptCount">
      <summary>
            Максимальное количество попыток (в случае ошибки) зарегистрировать заявку на дельта-хеджирование. По-умолчанию, равно 3.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.DeltaHedgeStrategy.UseMarketQuoting">
      <summary>
            Котировать ли выставленную заявку по рыночной цене. По-умолчанию режим выключен.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.DeltaHedgeStrategy.PriceOffset">
      <summary>
            Отступ цены для выставляемой заявки. Определяет размер отступа от лучшей котировки (для покупки прибавляется к цене, для продажи - вычитается).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.DeltaHedgeStrategy.PositionOffset">
      <summary>
            Сдвиг в позиции по базовому активу, позволяющая не хеджировать часть опционной позиции.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Logging.LoggingHelper">
      <summary>
            Вспомогательный класс для работы с <see cref="T:StockSharp.Algo.Logging.ILogSource" />. 
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Logging.LoggingHelper.AddInfoLog(StockSharp.Algo.Logging.ILogReceiver,System.String,System.Object[])">
      <summary>
            Записать сообщение в лог.
            </summary>
      <param name="receiver">Получатель логов.</param>
      <param name="message">Текстовое сообщение.</param>
      <param name="args">Параметры текстового сообщения.
            Используются в случае, если message является форматирующей строкой.
            Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.LoggingHelper.AddWarningLog(StockSharp.Algo.Logging.ILogReceiver,System.String,System.Object[])">
      <summary>
            Записать предупреждение в лог.
            </summary>
      <param name="receiver">Получатель логов.</param>
      <param name="message">Текстовое сообщение.</param>
      <param name="args">Параметры текстового сообщения.
            Используются в случае, если message является форматирующей строкой.
            Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.LoggingHelper.AddErrorLog(StockSharp.Algo.Logging.ILogReceiver,System.Exception)">
      <summary>
            Записать ошибку в лог.
            </summary>
      <param name="receiver">Получатель логов.</param>
      <param name="exception">Описание ошибки.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.LoggingHelper.AddErrorLog(StockSharp.Algo.Logging.ILogReceiver,System.String,System.Object[])">
      <summary>
            Записать ошибку в лог.
            </summary>
      <param name="receiver">Получатель логов.</param>
      <param name="message">Текстовое сообщение.</param>
      <param name="args">Параметры текстового сообщения.
            Используются в случае, если message является форматирующей строкой.
            Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.LoggingHelper.AddOrderInfoLog(StockSharp.Algo.Logging.ILogReceiver,StockSharp.BusinessEntities.Order,System.String,System.Func{System.String})">
      <summary>
            Записать сообщение о заявке в лог.
            </summary>
      <param name="receiver">Получатель логов.</param>
      <param name="order">Заявка.</param>
      <param name="operation">Операция, которая проводится в заявокй.</param>
      <param name="getAdditionalInfo">Дополнительная информация о заявке.</param>
    </member>
    <member name="M:StockSharp.Algo.Logging.LoggingHelper.AddOrderErrorLog(StockSharp.Algo.Logging.ILogReceiver,StockSharp.BusinessEntities.Order,System.String,System.Func{System.String})">
      <summary>
            Записать ошибку о заявке в лог.
            </summary>
      <param name="receiver">Получатель логов.</param>
      <param name="order">Заявка.</param>
      <param name="operation">Операция, которая проводится в заявокй.</param>
      <param name="getAdditionalInfo">Дополнительная информация о заявке.</param>
    </member>
    <member name="T:StockSharp.Algo.Candles.RawConvertableCandleBuilderSource`1">
      <summary>
            Источник тиковых сделок, работающие непосредственно с коллекцией сделок.
            </summary>
      <typeparam name="TSourceValue">Тип исходных данных (например, <see cref="T:StockSharp.BusinessEntities.Trade" />).</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Candles.RawConvertableCandleBuilderSource`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.RawConvertableCandleBuilderSource`1" />.
            </summary>
      <param name="values">Данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.RawConvertableCandleBuilderSource`1.Init">
      <summary>
            Инициализировать источник.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.TradeCandleBuilderSource">
      <summary>
            Источник данных для <see cref="T:StockSharp.Algo.Candles.CandleBuilder" />, который создает <see cref="T:StockSharp.Algo.Candles.ICandleBuilderSourceValue" /> из тиковых сделок <see cref="T:StockSharp.BusinessEntities.Trade" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.TradeCandleBuilderSource.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.TradeCandleBuilderSource" />.
            </summary>
      <param name="trader">Торговый шлюз, через который будут получаться новые сделки, использую событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewTrades" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.TradeCandleBuilderSource.Init">
      <summary>
            Инициализировать источник.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.TradeCandleBuilderSource.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.TradeCandleBuilderSource.Trader">
      <summary>
            Торговый шлюз, через который будут получаться новые сделки, использую событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewTrades" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.MarketDepthCandleBuilderSource">
      <summary>
            Источник данных для <see cref="T:StockSharp.Algo.Candles.CandleBuilder" />, который создает <see cref="T:StockSharp.Algo.Candles.ICandleBuilderSourceValue" /> из стакана <see cref="T:StockSharp.BusinessEntities.MarketDepth" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.MarketDepthCandleBuilderSource.#ctor(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.MarketDepthCandleBuilderSource" />.
            </summary>
      <param name="depth">Стакан, при изменении которого будут транслировать <see cref="T:StockSharp.Algo.Candles.ICandleBuilderSourceValue" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.MarketDepthCandleBuilderSource.Init">
      <summary>
            Инициализировать источник.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.MarketDepthCandleBuilderSource.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.MarketDepthCandleBuilderSource.Depth">
      <summary>
            Стакан, при изменении которого будут транслировать <see cref="T:StockSharp.Algo.Candles.ICandleBuilderSourceValue" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.PositionList">
      <summary>
            Класс для представления в виде списка позиций, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.PositionList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.PositionList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.PortfolioList">
      <summary>
            Класс для представления в виде списка портфелей, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.PortfolioList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.PortfolioList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Testing.EmulationTrader">
      <summary>
            Эмуляционный шлюз. Использует исторические данные и/или случайно сгенерированные.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.#ctor(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.EmulationTrader" />.
            </summary>
      <param name="securities">Инструменты, с которыми будет вестись работа.</param>
      <param name="portfolios">Портфели, с которыми будет вестись работа.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.#ctor(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio},StockSharp.Algo.Storages.ITradingStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.EmulationTrader" />.
            </summary>
      <param name="securities">Инструменты, с которыми будет вестись работа.</param>
      <param name="portfolios">Портфели, с которыми будет вестись работа.</param>
      <param name="storage">Хранилище данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.StartMarketTimeExport">
      <summary>
            Начать экспорт события об изменении времени.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.StopMarketTimeExport">
      <summary>
            Завершить экспорт события об изменении времени.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.OnConnect">
      <summary>
            Подключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.OnDisconnect">
      <summary>
            Отключиться от торговой системы.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.StartExport">
      <summary>
            Запустить экспорт данных из торговой системы в программу (получение портфелей, инструментов, заявок и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.Start(System.DateTime,System.DateTime)">
      <summary>
            Начать эмуляцию.
            </summary>
      <param name="startDate">Дата в истории, с которой необходимо начать эмуляцию.</param>
      <param name="stopDate">Дата в истории, на которой необходимо закончить эмуляцию (дата включается).</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.Stop">
      <summary>
            Остановить эмуляцию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.Suspend">
      <summary>
            Приостановить эмуляцию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.Resume">
      <summary>
            Возобновить эмуляцию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.OnRegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку на бирже.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.OnCancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку на бирже.
            </summary>
      <param name="order">Заявка, которую нужно отменять.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Начать получать новую информацию по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.UnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Остановить получение новой информации по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.RegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать новую информацию (например, <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" /> или <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.UnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение новой информации.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.RegisterQuotes(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать котировки (стакан) по инструменту.
            Значение котировок можно получить через метод <see cref="M:StockSharp.BusinessEntities.ITrader.GetMarketDepth(StockSharp.BusinessEntities.Security)" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать котировки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.UnRegisterQuotes(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение котировок по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение котировок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.RegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать сделки (тиковые данные) по инструменту. Новые сделки будут приходить через событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewTrades" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.UnRegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение сделок (тиковые данные) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.DepthGenerators">
      <summary>
            Генераторы стаканов для инструментов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.TradeGenerators">
      <summary>
            Генераторы сделок для инструментов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.State">
      <summary>
            Состояние эмулятора.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.EmulationTrader.StateChanged">
      <summary>
            Событие о изменении состояния эмулятора <see cref="P:StockSharp.Algo.Testing.EmulationTrader.State" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.Storage">
      <summary>
            Интерфейс, описывающий внешнее хранилище.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.WorkingTime">
      <summary>
            Рабочее время биржи для генерации событий.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.MarketEmulator">
      <summary>
            Эмулятор биржи.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.MarketTime">
      <summary>
            Получить биржевое время. Значение зависит от <see cref="P:StockSharp.BusinessEntities.ITrader.MarketTimeOffset" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.DaysInMemory">
      <summary>
            Максимальный размер данных в днях. По-умолчанию для x86 хранится 5 дней на поток (см. <see cref="P:StockSharp.Algo.Testing.EmulationTrader.LoadingThreadCount" />), для x64 - 10 дней.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.LoadingThreadCount">
      <summary>
            Количество потоков, загружающих данные для тестирования из хранилища.
            </summary>
      <remarks>
            Увеличивает скорость тестирования, так как поток тестирования не ожидает подгрузки данных. Увеличивает потребление памяти.
            </remarks>
    </member>
    <member name="T:StockSharp.Algo.IDailyInfoSoap">
      <summary>
            Интерфейс для доступа к сервису валют.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.IDailyInfoSoap.GetCursOnDate(System.DateTime)">
      <summary>
            Получить курсы валют на определенную дату.
            </summary>
      <param name="date">Дата курсов.</param>
      <returns>Курсы валют.</returns>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.BlackScholes">
      <summary>
            Модель расчета значений "греков" по формуле Блэка-Шоулза.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Derivatives.BlackScholes" />.
            </summary>
      <param name="option">Опцион.</param>
    </member>
    <member name="F:StockSharp.Algo.Derivatives.BlackScholes.SecurityLastTradePrice">
      <summary>
            Вариант определения цены инструмента по цене последней сделки <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Derivatives.BlackScholes.SecurityBestBidPrice">
      <summary>
            Вариант определения цены инструмента по цене лучшего бида <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Derivatives.BlackScholes.SecurityBestAskPrice">
      <summary>
            Вариант определения цены инструмента по цене лучшего оффера <see cref="P:StockSharp.BusinessEntities.Security.BestAsk" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Derivatives.BlackScholes.SecuritySpreadPrice">
      <summary>
            Вариант определения цены инструмента по середине спреда.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Premium">
      <summary>
            Рассчитать премию опциона.
            </summary>
      <returns>Премия опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Premium(System.Decimal)">
      <summary>
            Рассчитать премию опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Премия опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Delta">
      <summary>
            Рассчитать дельту опциона.
            </summary>
      <returns>Дельта опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Delta(System.Decimal)">
      <summary>
            Рассчитать дельту опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Дельта опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Gamma">
      <summary>
            Рассчитать гамму опциона.
            </summary>
      <returns>Гамма опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Gamma(System.Decimal)">
      <summary>
            Рассчитать гамму опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Гамма опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Vega">
      <summary>
            Рассчитать вегу опциона.
            </summary>
      <returns>Вега опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Vega(System.Decimal)">
      <summary>
            Рассчитать вегу опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Вега опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Theta">
      <summary>
            Рассчитать тету опциона.
            </summary>
      <returns>Тета опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Theta(System.Decimal)">
      <summary>
            Рассчитать тету опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Тета опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Rho">
      <summary>
            Рассчитать ро опциона.
            </summary>
      <returns>Ро опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Rho(System.Decimal)">
      <summary>
            Рассчитать ро опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Ро опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.IV(System.Decimal)">
      <summary>
            Рассчитать подразумеваемую волатильность (Implied  Volatility).
            </summary>
      <param name="premium">Премия по опциону.</param>
      <returns>Подразумеваевая волатильность.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.IV">
      <summary>
            Создать стакан волатильности.
            </summary>
      <returns>Стакан волатильности.</returns>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.Option">
      <summary>
            Опцион.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.RiskFree">
      <summary>
            Безрисковая процентная ставка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.Dividend">
      <summary>
            Размер дивиденда по акциям.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.SecurityPriceMode">
      <summary>
            Вариант определения цены инструмента. По-умолчанию равно <see cref="F:StockSharp.Algo.Derivatives.BlackScholes.SecurityLastTradePrice" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset">
      <summary>
            Базовый актив.
            </summary>
    </member>
  </members>
</doc>