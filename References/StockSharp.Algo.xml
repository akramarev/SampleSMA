<?xml version="1.0"?>
<doc>
  <assembly>
    <name>StockSharp.Algo</name>
  </assembly>
  <members>
    <member name="T:StockSharp.Algo.BasketPortfolio">
      <summary>
            Корзина портфелей.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketPortfolio.InnerPortfolios">
      <summary>
            Портфели, из которых создана данная корзина.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketPortfolio.InnerPositions">
      <summary>
            Позиции, из которых создана данная корзина.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.WeightedPortfolio">
      <summary>
            Корзина портфелей, основанная на весах <see cref="P:StockSharp.Algo.WeightedPortfolio.Weights" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.WeightedPortfolio.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.WeightedPortfolio" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.WeightedPortfolio.Weights">
      <summary>
            Инструменты и их весовые коэффициенты в корзине.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.WeightedPortfolio.InnerPortfolios">
      <summary>
            Портфели, из которых создана данная корзина.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.WeightedPortfolio.InnerPositions">
      <summary>
            Позиции, из которых создана данная корзина.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.BasketPosition">
      <summary>
            Корзина позиций, которые принадлежат <see cref="T:StockSharp.Algo.BasketPortfolio" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketPosition.InnerPositions">
      <summary>
            Позиции, из которых создана данная корзина.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.BaseCandleSource`1">
      <summary>
            Базовый реализация интерфейса <see cref="T:StockSharp.Algo.Candles.ICandleSource`1" />.
            </summary>
      <typeparam name="TValue">Тип данных.</typeparam>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleSource`1">
      <summary>
            Источник данных.
            </summary>
      <typeparam name="TValue">Тип данных.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleSource`1.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)">
      <summary>
            Запросить получение данных.
            </summary>
      <param name="series">Серия свечек, для которой необходимо начать получать данные.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleSource`1.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Прекратить получение данных, запущенное через <see cref="M:StockSharp.Algo.Candles.ICandleSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)" />.
            </summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleSource`1.SpeedPriority">
      <summary>
            Приоритет источника по скорости (0 - самый оптимальный).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.ICandleSource`1.Processing">
      <summary>
            Событие появления нового значения для обработки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.ICandleSource`1.Stopped">
      <summary>
            Событие окончания обработки серии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.ICandleSource`1.ProcessDataError">
      <summary>
            Событие ошибки транслирования данных.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleSource`1.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Candles.BaseCandleSource`1" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleSource`1.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)">
      <summary>
            Запросить получение данных.
            </summary>
      <param name="series">Серия свечек, для которой необходимо начать получать данные.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleSource`1.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Прекратить получение данных, запущенное через <see cref="M:StockSharp.Algo.Candles.BaseCandleSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)" />.
            </summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleSource`1.RaiseProcessing(StockSharp.Algo.Candles.CandleSeries,`0)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.BaseCandleSource`1.Processing" />.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="values">Новые данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleSource`1.RaiseProcessDataError(System.Exception)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.BaseCandleSource`1.ProcessDataError" />.
            </summary>
      <param name="error">Описание ошибки.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.BaseCandleSource`1.RaiseStopped(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.BaseCandleSource`1.Stopped" />.
            </summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.BaseCandleSource`1.SpeedPriority">
      <summary>
            Приоритет источника по скорости (0 - самый оптимальный).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.BaseCandleSource`1.Processing">
      <summary>
            Событие появления нового значения для обработки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.BaseCandleSource`1.Stopped">
      <summary>
            Событие окончания обработки серии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.BaseCandleSource`1.ProcessDataError">
      <summary>
            Событие ошибки транслирования данных.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.BaseCandleBuilderSource">
      <summary>
            Базовый источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSource">
      <summary>
            Источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.BaseCandleBuilderSource.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Candles.Compression.BaseCandleBuilderSource" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.BaseCandleBuilderSource.RaiseProcessing(StockSharp.Algo.Candles.CandleSeries,System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.BaseCandleSource`1.Processing" />.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="values">Новые данные.</param>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1">
      <summary>
            Построитель свечек. Через источник <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSource" /> подключается к событию <see cref="E:StockSharp.Algo.Candles.ICandleSource`1.Processing" />,
            и на основе полученных данных строит свечки по заданным критериям.
            </summary>
      <typeparam name="TCandle">Тип свечки, которую будет формировать построитель.</typeparam>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.ICandleBuilder">
      <summary>
            Интерфейс построителя свечек.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleManagerSource">
      <summary>
            Источник свечек для <see cref="T:StockSharp.Algo.Candles.ICandleManager" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleManagerSource.CandleManager">
      <summary>
            Менеджер свечек, которому принадлежит данный источник.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilder.CandleType">
      <summary>
            Тип свечки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilder.Sources">
      <summary>
            Источники данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilder.Container">
      <summary>
            Kонтейнер данных.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.IStorageCandleSource">
      <summary>
            Интерфейс источника свечек для <see cref="T:StockSharp.Algo.Candles.ICandleManager" />, который загружает данные из внешнего хранилища.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.IStorageCandleSource.StorageRegistry">
      <summary>
            Хранилище данных.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderContainer)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1" />.
            </summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)">
      <summary>
            Запустить получение свечек для указанной серии.
            </summary>
      <param name="series">Серия свечек, для которой необходимо начать получать свечки.</param>
      <param name="from">Начальная дата, с которой необходимо получать свечки.</param>
      <param name="to">Конечная дата, до которой необходимо получать свечки.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Остановить получение свечек, запущенное через <see cref="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)" />.
            </summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.OnStopped(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Метод-обработчик события <see cref="E:StockSharp.Algo.Candles.CandleSeries.Stopped" />.
            </summary>
      <param name="series">Серия свечек, для которой был было вызвано событие.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.OnNewValues(StockSharp.Algo.Candles.CandleSeries,System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue})">
      <summary>
            Обработать новые данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="values">Новые данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.CreateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Создать новую свечку.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечку.</param>
      <returns>Созданная свечка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleSeries,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Сформирована ли свечка до добавления данных.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечки.</param>
      <returns>True, если свечку необходимо закончить. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.FirstInitCandle(StockSharp.Algo.Candles.CandleSeries,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Заполнить первоначальные параметры свечки.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные.</param>
      <returns>Свечка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.UpdateCandle(StockSharp.Algo.Candles.CandleSeries,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Обновить свечку данными.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.ProcessValue(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Обработать новые данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="currentCandle">Текущая свечка.</param>
      <param name="value">Новые данные, с помощью которых принимается решение о необходимости начала или окончания формирования текущей свечки.</param>
      <returns>Новая свечка. Если новую свечку нет необходимости создавать, то возвращается <paramref name="currentCandle" />.
            Если новую свечку создать невозможно (<paramref name="value" /> не может быть применено к свечкам), то возвращается null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.RaiseProcessing(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Processing" />.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.RaiseProcessDataError(System.Exception)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.Compression.CandleBuilder`1.ProcessDataError" />.
            </summary>
      <param name="error">Информация об ошибке.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.ForceFinishCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle)">
      <summary>
            Принудительно завершить свечку.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Sources">
      <summary>
            Источники данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Container">
      <summary>
            Kонтейнер данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.CandleBuilder`1.CandleManager">
      <summary>
            Менеджер свечек. Заполняется, если построитель является источником внутри <see cref="P:StockSharp.Algo.Candles.ICandleManager.Sources" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.CandleBuilder`1.StorageRegistry">
      <summary>
            Хранилище данных. Передается во все источники, реализующие интерфейс <see cref="T:StockSharp.Algo.Candles.IStorageCandleSource" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.CandleBuilder`1.SpeedPriority">
      <summary>
            Приоритет источника по скорости (0 - самый оптимальный).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Processing">
      <summary>
            Событие появления нового значения для обработки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.Compression.CandleBuilder`1.Stopped">
      <summary>
            Событие окончания обработки серии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.Compression.CandleBuilder`1.ProcessDataError">
      <summary>
            Событие ошибки формирования свечек.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceList">
      <summary>
            Коллекция источников данных.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder">
      <summary>
            Построитель свечек типа <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderContainer)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder" />.
            </summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)">
      <summary>
            Запустить получение свечек для указанной серии.
            </summary>
      <param name="series">Серия свечек, для которой необходимо начать получать свечки.</param>
      <param name="from">Начальная дата, с которой необходимо получать свечки.</param>
      <param name="to">Конечная дата, до которой необходимо получать свечки.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.CreateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Создать новую свечку.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечку.</param>
      <returns>Созданная свечка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.TimeFrameCandle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Сформирована ли свечка до добавления данных.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечки.</param>
      <returns>True, если свечку необходимо закончить. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.OnStopped(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Метод-обработчик события <see cref="E:StockSharp.Algo.Candles.CandleSeries.Stopped" />.
            </summary>
      <param name="series">Серия свечек, для которой был было вызвано событие.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.DisposeManaged">
      <summary>
            Освободить ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.Timeout">
      <summary>
            Временной сдвиг от окончания тайм-фрейма, после которого для незакрытой свечки принудительно посылается сигнал на закрытие.
            По-умолчанию равно 10% от тайм-фрейма.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.TimeFrameCandleBuilder.GenerateEmptyCandles">
      <summary>
            Генерировать ли пустые свечки (<see cref="F:StockSharp.Algo.Candles.CandleStates.None" />) при отсутствии сделок.
            По-умолчанию режим включен.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.TickCandleBuilder">
      <summary>
            Построитель свечек типа <see cref="T:StockSharp.Algo.Candles.TickCandle" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.TickCandleBuilder" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderContainer)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.TickCandleBuilder" />.
            </summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.CreateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Создать новую свечку.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечку.</param>
      <returns>Созданная свечка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.TickCandle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Сформирована ли свечка до добавления данных.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечки.</param>
      <returns>True, если свечку необходимо закончить. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TickCandleBuilder.UpdateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.TickCandle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Обновить свечку данными.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные.</param>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder">
      <summary>
            Построитель свечек типа <see cref="T:StockSharp.Algo.Candles.VolumeCandle" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderContainer)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder" />.
            </summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder.CreateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Создать новую свечку.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечку.</param>
      <returns>Созданная свечка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.VolumeCandleBuilder.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.VolumeCandle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Сформирована ли свечка до добавления данных.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечки.</param>
      <returns>True, если свечку необходимо закончить. Иначе, false.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.RangeCandleBuilder">
      <summary>
            Построитель свечек типа <see cref="T:StockSharp.Algo.Candles.RangeCandle" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RangeCandleBuilder.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.RangeCandleBuilder" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RangeCandleBuilder.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderContainer)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.RangeCandleBuilder" />.
            </summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RangeCandleBuilder.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RangeCandleBuilder.CreateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Создать новую свечку.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечку.</param>
      <returns>Созданная свечка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RangeCandleBuilder.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.RangeCandle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Сформирована ли свечка до добавления данных.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечки.</param>
      <returns>True, если свечку необходимо закончить. Иначе, false.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.PnFCandleBuilder">
      <summary>
            Построитель свечек типа <see cref="T:StockSharp.Algo.Candles.PnFCandle" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.PnFCandleBuilder.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.PnFCandleBuilder" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.PnFCandleBuilder.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderContainer)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.PnFCandleBuilder" />.
            </summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.PnFCandleBuilder.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.PnFCandleBuilder.CreateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Создать новую свечку.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="value">Данные, с помощью которых необходимо создать новую свечку.</param>
      <returns>Созданная свечка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.PnFCandleBuilder.IsCandleFinishedBeforeChange(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.PnFCandle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Сформирована ли свечка до добавления данных.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечки.</param>
      <returns>True, если свечку необходимо закончить. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.PnFCandleBuilder.UpdateCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.PnFCandle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Обновить свечку данными.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка.</param>
      <param name="value">Данные.</param>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder">
      <summary>
            Построитель свечек типа <see cref="T:StockSharp.Algo.Candles.RenkoCandle" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderContainer)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder" />.
            </summary>
      <param name="container">Контейнер данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RenkoCandleBuilder.ProcessValue(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Обработать новые данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="currentCandle">Текущая свечка.</param>
      <param name="value">Новые данные, с помощью которых принимается решение о необходимости начала или окончания формирования текущей свечки.</param>
      <returns>Новая свечка. Если новую свечку нет необходимости создавать, то возвращается <paramref name="currentCandle" />.
            Если новую свечку создать невозможно (<paramref name="value" /> не может быть применено к свечкам), то возвращается null.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleManagerContainer">
      <summary>
            Стандартный контейнер, хранящий данные свечек.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleManagerContainer">
      <summary>
            Интерфейс контейнера, хранящего данные свечек.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)">
      <summary>
            Известить контейнер для начале получения свечек для серии.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="from">Начальная дата, с которой будут получаться свечки.</param>
      <param name="to">Конечная дата, до которой будут получаться свечки.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.AddCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle)">
      <summary>
            Добавить свечку для серии.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка.</param>
      <returns>True, если свечка не ранее добавлена, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,System.DateTime)">
      <summary>
            Получить для серии все ассоциированные с ней свечки на период <paramref name="time" />.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="time">Период свечки.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить для серии все ассоциированные с ней свечки.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandle(StockSharp.Algo.Candles.CandleSeries,System.Int32)">
      <summary>
            Получить свечку по индексу.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candleIndex">Порядковый номер свечки с конца.</param>
      <returns>Найденая свечка. Если свечки не существует, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,Ecng.ComponentModel.Range{System.DateTime})">
      <summary>
            Получить свечки по серии и диапазону дат.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="timeRange">Диапазон дат, в которые должны входить свечки. Учитывается значение <see cref="P:StockSharp.Algo.Candles.Candle.OpenTime" />.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,System.Int32)">
      <summary>
            Получить свечки по серии и общему количеству.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candleCount">Количество свечек, которое необходимо вернуть.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.ICandleManagerContainer.GetCandleCount(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить количество свечек.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Количество свечек.</returns>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleManagerContainer.CandlesKeepTime">
      <summary>
            Время хранения свечек в памяти. По-умолчанию равно 2-ум дням.
            </summary>
      <remarks>Если значение установлено в <see cref="F:System.TimeSpan.Zero" />, то свечки не будут удаляться.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleManagerContainer" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.AddCandle(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle)">
      <summary>
            Добавить свечку для серии.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка.</param>
      <returns>True, если свечка не ранее добавлена, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,System.DateTime)">
      <summary>
            Получить для серии все ассоциированные с ней свечки на период <paramref name="time" />.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="time">Период свечки.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить для серии все ассоциированные с ней свечки.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandle(StockSharp.Algo.Candles.CandleSeries,System.Int32)">
      <summary>
            Получить свечку по индексу.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candleIndex">Порядковый номер свечки с конца.</param>
      <returns>Найденая свечка. Если свечки не существует, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,Ecng.ComponentModel.Range{System.DateTime})">
      <summary>
            Получить свечки по серии и диапазону дат.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="timeRange">Диапазон дат, в которые должны входить свечки. Учитывается значение <see cref="P:StockSharp.Algo.Candles.Candle.OpenTime" />.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandles(StockSharp.Algo.Candles.CandleSeries,System.Int32)">
      <summary>
            Получить свечки по серии и общему количеству.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candleCount">Количество свечек, которое необходимо вернуть.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.GetCandleCount(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить количество свечек.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Количество свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManagerContainer.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)">
      <summary>
            Известить контейнер для начале получения свечек для серии.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="from">Начальная дата, с которой будут получаться свечки.</param>
      <param name="to">Конечная дата, до которой будут получаться свечки.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleManagerContainer.CandlesKeepTime">
      <summary>
            Время хранения свечек в памяти. По-умолчанию равно 2-ум дням.
            </summary>
      <remarks>Если значение установлено в <see cref="F:System.TimeSpan.Zero" />, то свечки не будут удаляться.</remarks>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleHelper">
      <summary>
            Вспомогательный класс для работы со свечками.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.TimeFrame(StockSharp.BusinessEntities.Security,System.TimeSpan)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" /> для свечек <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.</param>
      <returns>Серия свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.Range(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" /> для свечек <see cref="T:StockSharp.Algo.Candles.RangeCandle" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.RangeCandle.PriceRange" />.</param>
      <returns>Серия свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.Volume(StockSharp.BusinessEntities.Security,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" /> для свечек <see cref="T:StockSharp.Algo.Candles.VolumeCandle" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.VolumeCandle.Volume" />.</param>
      <returns>Серия свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.Tick(StockSharp.BusinessEntities.Security,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" /> для свечек <see cref="T:StockSharp.Algo.Candles.TickCandle" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.TickCandle.MaxTradeCount" />.</param>
      <returns>Серия свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.PnF(StockSharp.BusinessEntities.Security,StockSharp.Algo.Candles.PnFArg)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" /> для свечек <see cref="T:StockSharp.Algo.Candles.PnFCandle" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.PnFCandle.PnFArg" />.</param>
      <returns>Серия свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.Renko(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" /> для свечек <see cref="T:StockSharp.Algo.Candles.RenkoCandle" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="arg">Значение <see cref="P:StockSharp.Algo.Candles.RenkoCandle.BoxSize" />.</param>
      <returns>Серия свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.Start(StockSharp.Algo.Candles.ICandleManager,StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Запустить получение свечек.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Прекратить получение свечек.
            </summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleCount(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить количество свечек.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Количество свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandles``1(StockSharp.Algo.Candles.CandleSeries,System.DateTime)">
      <summary>
            Получить все свечки на период <paramref name="time" />.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="time">Период свечки.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandles``1(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить все свечки.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandles``1(StockSharp.Algo.Candles.CandleSeries,Ecng.ComponentModel.Range{System.DateTime})">
      <summary>
            Получить свечки по диапазону дат.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="timeRange">Диапазон дат, в которые должны входить свечки. Учитывается значение <see cref="P:StockSharp.Algo.Candles.Candle.OpenTime" />.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandles``1(StockSharp.Algo.Candles.CandleSeries,System.Int32)">
      <summary>
            Получить свечки по общему количеству.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candleCount">Количество свечек, которое необходимо вернуть.</param>
      <returns>Найденные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandle``1(StockSharp.Algo.Candles.CandleSeries,System.Int32)">
      <summary>
            Получить свечку по индексу.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candleIndex">Порядковый номер свечки с конца.</param>
      <returns>Найденая свечка. Если свечки не существует, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCandle(StockSharp.Algo.Candles.CandleSeries,System.DateTime)">
      <summary>
            Получить временную свечку за определенную дату.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="time">Дата свечки.</param>
      <returns>Найденная свечка (null, если свечка по заданным критериям не существует).</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCurrentCandle``1(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить текущую свечку.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Найденная свечка. Если свечка не существует, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetSeries``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Получить серию свечек по заданным параметрам.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, по которому нужно фильтровать сделки для формирования свечек.</param>
      <param name="arg">Параметр свечки.</param>
      <returns>Серия свечек. Null, если такая серия не зарегистрирована.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles``1(Ecng.Collections.IEnumerableEx{StockSharp.BusinessEntities.Trade},System.Object)">
      <summary>
            Построить свечки из коллекции тиковых сделок.
            </summary>
      <typeparam name="TCandle">Тип свечек.</typeparam>
      <param name="trades">Тиковые сделки.</param>
      <param name="arg">Параметр свечки.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles(Ecng.Collections.IEnumerableEx{StockSharp.BusinessEntities.MarketDepth},StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Построить свечки из коллекции стаканов.
            </summary>
      <param name="depths">Стаканы.</param>
      <param name="series">Серия свечек.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles(Ecng.Collections.IEnumerableEx{StockSharp.BusinessEntities.Trade},StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Построить свечки из коллекции тиковых сделок.
            </summary>
      <param name="trades">Тиковые сделки.</param>
      <param name="series">Серия свечек.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles``2(Ecng.Collections.IEnumerableEx{``0},StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Построить свечки из коллекции данных.
            </summary>
      <typeparam name="TValue">Тип исходных данных.</typeparam>
      <typeparam name="TCandle">Тип свечек.</typeparam>
      <param name="values">Исходные данные.</param>
      <param name="security">Инструмент.</param>
      <param name="arg">Параметр свечки.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles``1(Ecng.Collections.IEnumerableEx{``0},System.Type,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Построить свечки из коллекции данных.
            </summary>
      <typeparam name="TValue">Тип исходных данных.</typeparam>
      <param name="values">Исходные данные.</param>
      <param name="candleType">Тип свечек.</param>
      <param name="security">Инструмент.</param>
      <param name="arg">Параметр свечки.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.ToCandles``1(Ecng.Collections.IEnumerableEx{``0},StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Построить свечки из коллекции данных.
            </summary>
      <typeparam name="TValue">Тип исходных данных.</typeparam>
      <param name="values">Исходные данные.</param>
      <param name="series">Серия свечек.</param>
      <returns>Свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsCandlesRegistered``1(StockSharp.Algo.Candles.ICandleManager,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Зарегистрирована ли группировка свечек по определённому признаку.
            </summary>
      <param name="manager">Менеджер свечек.</param>
      <param name="security">Инструмент, для которого зарегистрирована группировка.</param>
      <param name="arg">Параметр свечки.</param>
      <returns>True, если зарегистрирована. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetMarketTime(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить биржевое время.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Биржевое время.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleTime(System.TimeSpan,StockSharp.BusinessEntities.Security)">
      <summary>
            Получить время формирования свечки.
            </summary>
      <param name="timeFrame">Тайм-фрейм, по которому необходимо получить время формирования свечки.</param>
      <param name="security">Инструмент, содержащий информацию о временной зоне работы биржи <see cref="P:StockSharp.BusinessEntities.Security.ExchangeBoard" />.</param>
      <returns>Время формирования свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleTime(System.TimeSpan,System.DateTime)">
      <summary>
            Получить время формирования свечки.
            </summary>
      <param name="timeFrame">Тайм-фрейм, по которому необходимо получить время формирования свечки.</param>
      <param name="currentTime">Текущее время, входящее в диапазон временных рамок.</param>
      <returns>Время формирования свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBounds(System.TimeSpan,StockSharp.BusinessEntities.Security)">
      <summary>
            Получить временные рамки свечки.
            </summary>
      <param name="timeFrame">Тайм-фрейм, по которому необходимо получить временные рамки.</param>
      <param name="security">Инструмент, содержащий информацию о временной зоне работы биржи <see cref="P:StockSharp.BusinessEntities.Security.ExchangeBoard" />.</param>
      <returns>Временные рамки свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBounds(System.TimeSpan,System.DateTime)">
      <summary>
            Получить временные рамки свечки.
            </summary>
      <param name="timeFrame">Тайм-фрейм, по которому необходимо получить временные рамки.</param>
      <param name="currentTime">Текущее время, входящее в диапазон временных рамок.</param>
      <returns>Временные рамки свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBounds(System.TimeSpan,System.DateTime,StockSharp.BusinessEntities.ExchangeBoard)">
      <summary>
            Получить временные рамки свечки относительно времени работы биржи.
            </summary>
      <param name="timeFrame">Тайм-фрейм, по которому необходимо получить временные рамки.</param>
      <param name="currentTime">Текущее время, входящее в диапазон временных рамок.</param>
      <param name="board">Информация о площадке, из которой будет взято время работы <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.WorkingTime" />.</param>
      <returns>Временные рамки свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetCandleBounds(System.TimeSpan,System.DateTime,StockSharp.BusinessEntities.WorkingTime)">
      <summary>
            Получить временные рамки свечки относительно режиме работы биржи.
            </summary>
      <param name="timeFrame">Тайм-фрейм, по которому необходимо получить временные рамки.</param>
      <param name="currentTime">Текущее время, входящее в диапазон временных рамок.</param>
      <param name="time">Информация о режиме работы биржи.</param>
      <returns>Временные рамки свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetLength(StockSharp.Algo.Candles.Candle)">
      <summary>
            Получить длину свечки.
            </summary>
      <param name="candle">Свечка, для которой необходимо получить длины.</param>
      <returns>Длина свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetBody(StockSharp.Algo.Candles.Candle)">
      <summary>
            Получить тело свечки.
            </summary>
      <param name="candle">Свечка, для которой необходимо получить тело.</param>
      <returns>Тело свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTopShadow(StockSharp.Algo.Candles.Candle)">
      <summary>
            Получить длину верхней тени свечки.
            </summary>
      <param name="candle">Свечка, для которой необходимо получить длины верхней тени.</param>
      <returns>Длина верхней тени свечки. Если 0, то тень отсутствует.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetBottomShadow(StockSharp.Algo.Candles.Candle)">
      <summary>
            Получить длину нижней тени свечки.
            </summary>
      <param name="candle">Свечка, для которой необходимо получить длины нижней тени.</param>
      <returns>Длина нижней тени свечки. Если 0, то тень отсутствует.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsWhiteOrBlack(StockSharp.Algo.Candles.Candle)">
      <summary>
            Белая ли или черная свечка.
            </summary>
      <param name="candle">Свечка, для которой необходимо определить цвет.</param>
      <returns>True, если свечка белая, false, если черная, и null, если свечка плоская.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsMarubozu(StockSharp.Algo.Candles.Candle)">
      <summary>
            Бестеневая ли свечка тени.
            </summary>
      <param name="candle">Свечка, для которой необходимо определить наличие теней.</param>
      <returns>True, если свечка не имеет теней, false, если имеет.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsSpinningTop(StockSharp.Algo.Candles.Candle)">
      <summary>
            Нейтральная ли свечка сделкам.
            </summary>
      <remarks>
            Нейтральность определяется как ситуация, когда в период свечки ни покупатели ни продавцы не создали тренд.
            </remarks>
      <param name="candle">Свечка, для которой необходимо рассчитать, нейтральна ли она.</param>
      <returns>True, если свечка нейтральна, false, если не нейтральная.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsHammer(StockSharp.Algo.Candles.Candle)">
      <summary>
            Является ли свечка молотом.
            </summary>
      <param name="candle">Свечка, которую необходимо проверить на паттерн.</param>
      <returns>True, если является, false, если нет.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsDragonflyOrGravestone(StockSharp.Algo.Candles.Candle)">
      <summary>
            Является ли свечка стрекозой или надгробьем.
            </summary>
      <param name="candle">Свечка, которую необходимо проверить на паттерн.</param>
      <returns>True, если стрекоза, false, если надгробье, null - ни то, ни другое.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.IsBullishOrBearish(StockSharp.Algo.Candles.Candle)">
      <summary>
            Бычья ли или медвежья свечка.
            </summary>
      <param name="candle">Свечка, которую необходимо проверить на тренд.</param>
      <returns>True, если бычья, false, если медвежья, null - ни то, ни другое.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCount(StockSharp.BusinessEntities.Security,Ecng.ComponentModel.Range{System.DateTime},System.TimeSpan)">
      <summary>
            Получить количество временных интервалов в пределах заданного отрезка времени.
            </summary>
      <param name="security">Инструмент, по которому вычисляется время работы биржи через свойство <see cref="P:StockSharp.BusinessEntities.Security.ExchangeBoard" />.</param>
      <param name="range">Заданный отрезок времени, для которого нужно получить количество временных интервалов.</param>
      <param name="timeFrame">Размер временного интервала.</param>
      <returns>Полученное количество временных интервалов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCount(StockSharp.BusinessEntities.ExchangeBoard,Ecng.ComponentModel.Range{System.DateTime},System.TimeSpan)">
      <summary>
            Получить количество временных интервалов в пределах заданного отрезка времени.
            </summary>
      <param name="board">Информация о площадке, по которому вычисляется время работы через свойство <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.WorkingTime" />.</param>
      <param name="range">Заданный отрезок времени, для которого нужно получить количество временных интервалов.</param>
      <param name="timeFrame">Размер временного интервала.</param>
      <returns>Полученное количество временных интервалов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleHelper.GetTimeFrameCount(StockSharp.BusinessEntities.WorkingTime,Ecng.ComponentModel.Range{System.DateTime},System.TimeSpan)">
      <summary>
            Получить количество временных интервалов в пределах заданного отрезка времени.
            </summary>
      <param name="workingTime">Режим работы биржи.</param>
      <param name="range">Заданный отрезок времени, для которого нужно получить количество временных интервалов.</param>
      <param name="timeFrame">Размер временного интервала.</param>
      <returns>Полученное количество временных интервалов.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1">
      <summary>
            Базовый источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder" />, который переводит данные из типа <typeparamref name="TSourceValue" /> в <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue" />.
            </summary>
      <typeparam name="TSourceValue">Тип исходных данных (например, <see cref="T:StockSharp.BusinessEntities.Trade" />).</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.Convert(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Сконвертировать новые данные с помощью <see cref="P:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.Converter" />.
            </summary>
      <param name="values">Новые исходные данные.</param>
      <returns>Данные, в формате <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.NewSourceValues(StockSharp.Algo.Candles.CandleSeries,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Сконвертировать и передать новые данные в метод <see cref="M:StockSharp.Algo.Candles.Compression.BaseCandleBuilderSource.RaiseProcessing(StockSharp.Algo.Candles.CandleSeries,System.Collections.Generic.IEnumerable{StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue})" />.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="values">Новые исходные данные.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.DefaultConverter">
      <summary>
            Функция по-умолчанию для перевода данных из типа <typeparamref name="TSourceValue" /> в <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.Converter">
      <summary>
            Функция для перевода данных из типа <typeparamref name="TSourceValue" /> в <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.DefaultFilter">
      <summary>
            Функция по-умолчанию для фильтрации данных <typeparamref name="TSourceValue" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ConvertableCandleBuilderSource`1.Filter">
      <summary>
            Функция для фильтрации данных <typeparamref name="TSourceValue" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleStates">
      <summary>
            Состояния свечки.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Candles.CandleStates.None">
      <summary>
            Пустое состояние (свечка отсутствует).
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Candles.CandleStates.Started">
      <summary>
            Свечка запущена на формирование.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Candles.CandleStates.Changed">
      <summary>
            Свечка изменена.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Candles.CandleStates.Finished">
      <summary>
            Свечка закончена.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Candle">
      <summary>
            Базовый класс для свечки (содержит основные параметры).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Candle.ToString">
      <summary>
            Получить строковое представление.
            </summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.Security">
      <summary>
            Инструмент.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.OpenTime">
      <summary>
            Время начала свечки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.CloseTime">
      <summary>
            Время окончания свечки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.HighTime">
      <summary>
            Время с максимальной ценой в свечке.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.LowTime">
      <summary>
            Время с минимальной ценой в свечке.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.OpenPrice">
      <summary>
            Цена открытия.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.ClosePrice">
      <summary>
            Цена закрытия.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.HighPrice">
      <summary>
            Максимальная цена.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.LowPrice">
      <summary>
            Минимальная цена.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.TotalPrice">
      <summary>
            Суммарный оборот по сделкам.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.OpenVolume">
      <summary>
            Объем открытия.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.CloseVolume">
      <summary>
            Объем закрытия.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.HighVolume">
      <summary>
            Максимальный объем.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.LowVolume">
      <summary>
            Минимальный объем.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.TotalVolume">
      <summary>
            Суммарный объем.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.RelativeVolume">
      <summary>
            Относительный объем.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.Series">
      <summary>
            Серия свечек.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.Source">
      <summary>
            Источник, из которого была получена свечка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.Arg">
      <summary>
            Параметр свечки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Candle.State">
      <summary>
            Состояние.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.TimeFrameCandle">
      <summary>
            Свечка, группируемая по тайм-фрейму.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame">
      <summary>
            Тайм-фрейм.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.TimeFrameCandle.Arg">
      <summary>
            Параметр свечки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.TickCandle">
      <summary>
            Свечка, группируемая по количеству сделок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.TickCandle.MaxTradeCount">
      <summary>
            Максимальное количество сделок, которое может содержать свечка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.TickCandle.CurrentTradeCount">
      <summary>
            Текущее количество сделок, которое содержит свечка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.TickCandle.Arg">
      <summary>
            Параметр свечки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.VolumeCandle">
      <summary>
            Свечка, группируемая по количеству контрактов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.VolumeCandle.Volume">
      <summary>
            Максимальное количество контрактов, которое может содержать свечка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.VolumeCandle.Arg">
      <summary>
            Параметр свечки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.RangeCandle">
      <summary>
            Свечка, группируемая по ценовому диапазону.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.RangeCandle.PriceRange">
      <summary>
            Дельта цены, в рамках которой свечка может содержать сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.RangeCandle.Arg">
      <summary>
            Параметр свечки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.PnFTypes">
      <summary>
            Типы символов.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Candles.PnFTypes.X">
      <summary>
            Крестики (цена растет).
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Candles.PnFTypes.O">
      <summary>
            Нолики (цена падает).
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.PnFArg">
      <summary>
            Значение параметров пункто-цифрового графика (график крестики-нолики).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.PnFArg.ToString">
      <summary>
            Получить строковое представление.
            </summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.PnFArg.Clone">
      <summary>
            Создать копию объекта <see cref="T:StockSharp.Algo.Candles.PnFArg" />.
            </summary>
      <returns>Копия.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.PnFArg.OnEquals(StockSharp.Algo.Candles.PnFArg)">
      <summary>
            Сравнить на эквивалентность.
            </summary>
      <param name="other">Значение параметров пункто-цифрового графика, с которым необходимо сделать сравнение.</param>
      <returns>True, если значения равны. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.PnFArg.GetHashCode">
      <summary>
            Рассчитать хеш-код объекта <see cref="T:StockSharp.Algo.Candles.PnFArg" />.
            </summary>
      <returns>Хеш-код.</returns>
    </member>
    <member name="P:StockSharp.Algo.Candles.PnFArg.BoxSize">
      <summary>
            Изменение цены, при превышении которого регистрируется новый <see cref="F:StockSharp.Algo.Candles.PnFTypes.X" /> или <see cref="F:StockSharp.Algo.Candles.PnFTypes.O" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.PnFArg.ReversalAmount">
      <summary>
            Величина противоположного движения цены, при котором происходит смена <see cref="F:StockSharp.Algo.Candles.PnFTypes.X" /> на <see cref="F:StockSharp.Algo.Candles.PnFTypes.O" /> (или наоборот).
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.PnFCandle">
      <summary>
            Свечка пункто-цифрового графика (график крестики-нолики).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.PnFCandle.PnFArg">
      <summary>
            Значение параметров.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.PnFCandle.Type">
      <summary>
            Тип символов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.PnFCandle.Arg">
      <summary>
            Параметр свечки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.RenkoCandle">
      <summary>
            Свечка Рэнко графика.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.RenkoCandle.BoxSize">
      <summary>
            Изменение цены, при превышении которого регистрируется новая свечка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.RenkoCandle.Arg">
      <summary>
            Параметр свечки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue">
      <summary>
            Интерфейс, описывающий данные источника <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSource" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue.Id">
      <summary>
            Уникальный идентификатор.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue.Security">
      <summary>
            Инструмент, по которому были сформированы данные.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue.Time">
      <summary>
            Время появления новых данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue.Price">
      <summary>
            Цена.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue.Volume">
      <summary>
            Объем.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue.OrderDirection">
      <summary>
            Направление заявки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSourceValue">
      <summary>
            Данные источника <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSource" />, созданные на основе <see cref="P:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSourceValue.Trade" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSourceValue.#ctor(StockSharp.BusinessEntities.Trade)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSourceValue" />.
            </summary>
      <param name="trade">Тиковая сделка.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSourceValue.Trade">
      <summary>
            Тиковая сделка.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.DepthCandleBuilderSourceValue">
      <summary>
            Данные источника <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSource" />, созданные на основе <see cref="T:StockSharp.BusinessEntities.MarketDepth" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.DepthCandleBuilderSourceValue.#ctor(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.DepthCandleBuilderSourceValue" />.
            </summary>
      <param name="depth">Стакан.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.DepthCandleBuilderSourceValue.Depth">
      <summary>
            Стакан.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1">
      <summary>
            Базовый источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder" />, который получает данные из <see cref="T:StockSharp.BusinessEntities.ITrader" />.
            </summary>
      <typeparam name="T">Тип исходных данных (например, <see cref="T:StockSharp.BusinessEntities.Trade" />).</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1" />.
            </summary>
      <param name="trader">Торговый шлюз, через который будут получаться новые данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)">
      <summary>
            Запросить получение данных.
            </summary>
      <param name="series">Серия свечек, для которой необходимо начать получать данные.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Прекратить получение данных, запущенное через <see cref="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)" />.
            </summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.RegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Зарегистрировать получение данных для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.UnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение данных для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.GetSecurityValues(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить ранее накопленные значения.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Накопленные значения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.AddNewValues(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Добавить синхронно новые данные, полученные от <see cref="P:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.Trader" />.
            </summary>
      <param name="values">Новые данные.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.SpeedPriority">
      <summary>
            Приоритет источника по скорости (0 - самый оптимальный).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.RealTimeCandleBuilderSource`1.Trader">
      <summary>
            Торговый шлюз, через который будут получаться новые данные.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource">
      <summary>
            Источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1" />, который создает <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue" /> из тиковых сделок <see cref="T:StockSharp.BusinessEntities.Trade" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource" />.
            </summary>
      <param name="trader">Торговый шлюз, через который будут получаться новые сделки, используя событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewTrades" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource.RegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Зарегистрировать получение данных для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource.UnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение данных для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource.GetSecurityValues(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить ранее накопленные значения.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Накопленные значения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeCandleBuilderSource.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource">
      <summary>
            Источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1" />, который создает <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue" /> из стакана <see cref="T:StockSharp.BusinessEntities.MarketDepth" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource" />.
            </summary>
      <param name="trader">Торговый шлюз, через который будут получаться измененные стаканы, используя событие <see cref="E:StockSharp.BusinessEntities.ITrader.MarketDepthsChanged" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource.RegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Зарегистрировать получение данных для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource.UnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение данных для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource.GetSecurityValues(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить ранее накопленные значения.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Накопленные значения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthCandleBuilderSource.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleManager">
      <summary>
            Интерфейс менеджера свечек.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleManager.Container">
      <summary>
            Kонтейнер данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleManager.Series">
      <summary>
            Все активные на текущий момент серии свечек, запущенные через <see cref="M:StockSharp.Algo.Candles.ICandleSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.ICandleManager.Sources">
      <summary>
            Источники свечек.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.ICandleManagerSourceList">
      <summary>
            Коллекция источников свечек.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.ICandleBuilderContainer">
      <summary>
            Интерфейс контейнера, хранящего данные.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.ICandleBuilderContainer.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)">
      <summary>
            Известить контейнер для начале получения данных для серии.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="from">Начальная дата, с которой будут получаться данные.</param>
      <param name="to">Конечная дата, до которой будут получаться данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.ICandleBuilderContainer.AddValue(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Добавить данные для свечки.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка, для которой нужно добавить данные.</param>
      <param name="value">Новые данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.ICandleBuilderContainer.GetValues(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle)">
      <summary>
            Получить все данные по свечке.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка, по которой нужно найти данные.</param>
      <returns>Найденные данные.</returns>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.ICandleBuilderContainer.ValuesKeepTime">
      <summary>
            Время хранения <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue" /> в памяти. По-умолчанию равно нулю (хранение отсутствует).
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1">
      <summary>
            Базовый источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder" />, который получает данные из внешнего хранилища.
            </summary>
      <typeparam name="TSourceValue">Тип исходных данных (например, <see cref="T:StockSharp.BusinessEntities.Trade" />).</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.GetStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище данных <typeparamref name="TSourceValue" />.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.GetValues(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)">
      <summary>
            Получить данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
      <returns>Данные. Если данных не существует для заданного диапазона, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)">
      <summary>
            Запросить получение данных.
            </summary>
      <param name="series">Серия свечек, для которой необходимо начать получать данные.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Прекратить получение данных, запущенное через <see cref="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)" />.
            </summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.Dispose">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.SpeedPriority">
      <summary>
            Приоритет источника по скорости (0 - самый оптимальный).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.StorageRegistry">
      <summary>
            Хранилище данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.StorageCandleBuilderSource`1.Drive">
      <summary>
            Хранилище, которое используется по-умолчанию. По умолчанию используется <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.TradeStorageCandleBuilderSource">
      <summary>
            Источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1" />, получающий тиковые сделки из внешнего хранилища <see cref="T:StockSharp.Algo.Storages.IStorageRegistry" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeStorageCandleBuilderSource.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.TradeStorageCandleBuilderSource" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.TradeStorageCandleBuilderSource.GetStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище тиковых сделок.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.MarketDepthStorageCandleBuilderSource">
      <summary>
            Источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1" />, получающий тиковые сделки из внешнего хранилища <see cref="T:StockSharp.Algo.Storages.IStorageRegistry" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthStorageCandleBuilderSource.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.MarketDepthStorageCandleBuilderSource" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.MarketDepthStorageCandleBuilderSource.GetStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище стаканов.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.OrderLogStorageCandleBuilderSource">
      <summary>
            Источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilder`1" />, получающий тиковые сделки из внешнего хранилища <see cref="T:StockSharp.Algo.Storages.IStorageRegistry" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.OrderLogStorageCandleBuilderSource.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.OrderLogStorageCandleBuilderSource" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.OrderLogStorageCandleBuilderSource.GetStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище данных.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.OrderLogStorageCandleBuilderSource.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.OrderLogStorageCandleBuilderSource.GetValues(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)">
      <summary>
            Получить данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
      <returns>Данные. Если данных не существует для заданного диапазона, то будет возвращено null.</returns>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.CandleBuilderContainer">
      <summary>
            Стандартный контейнер данных.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderContainer.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.CandleBuilderContainer" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderContainer.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)">
      <summary>
            Известить контейнер для начале получения данных для серии.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="from">Начальная дата, с которой будут получаться данные.</param>
      <param name="to">Конечная дата, до которой будут получаться данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderContainer.AddValue(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle,StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue)">
      <summary>
            Добавить данные для свечки.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка, для которой нужно добавить данные.</param>
      <param name="value">Новые данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.CandleBuilderContainer.GetValues(StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Candles.Candle)">
      <summary>
            Получить все данные по свечке.
            </summary>
      <param name="series">Серия свечек.</param>
      <param name="candle">Свечка, по которой нужно найти данные.</param>
      <returns>Найденные данные.</returns>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.CandleBuilderContainer.ValuesKeepTime">
      <summary>
            Время хранения <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilderSourceValue" /> в памяти. По-умолчанию равно нулю (хранение отсутствует).
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1">
      <summary>
            Источник данных, работающий непосредственно с готовой коллекцией данных.
            </summary>
      <typeparam name="TSourceValue">Тип исходных данных (например, <see cref="T:StockSharp.BusinessEntities.Trade" />).</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1.#ctor(StockSharp.BusinessEntities.Security,System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1" />.
            </summary>
      <param name="security">Инструмент, данные которого передаются в источник.</param>
      <param name="from">Время первого значения.</param>
      <param name="to">Время последнего значения.</param>
      <param name="values">Готовая коллеция данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)">
      <summary>
            Запросить получение данных.
            </summary>
      <param name="series">Серия свечек, для которой необходимо начать получать данные.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Прекратить получение данных, запущенное через <see cref="M:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)" />.
            </summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1.SpeedPriority">
      <summary>
            Приоритет источника по скорости (0 - самый оптимальный).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.Compression.RawConvertableCandleBuilderSource`1.Values">
      <summary>
            Готовая коллеция данные.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.StorageCandleSource">
      <summary>
            Источник свечек для <see cref="T:StockSharp.Algo.Candles.ICandleManager" />, который загружает свечки из внешнего хранилища.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.StorageCandleSource.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.StorageCandleSource" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.StorageCandleSource.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.StorageCandleSource.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)">
      <summary>
            Запросить получение данных.
            </summary>
      <param name="series">Серия свечек, для которой необходимо начать получать данные.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.StorageCandleSource.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Прекратить получение данных, запущенное через <see cref="M:StockSharp.Algo.Candles.StorageCandleSource.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)" />.
            </summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.StorageCandleSource.Dispose">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.StorageCandleSource.SpeedPriority">
      <summary>
            Приоритет источника по скорости (0 - самый оптимальный).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.StorageCandleSource.StorageRegistry">
      <summary>
            Хранилище данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.StorageCandleSource.Drive">
      <summary>
            Хранилище, которое используется по-умолчанию. По умолчанию используется <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionManager">
      <summary>
            Менеджер расчета комиссии.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Commissions.ICommissionManager">
      <summary>
            Интерфейс менеджера расчета комиссии.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.ICommissionManager.Reset">
      <summary>
            Обнулить <see cref="P:StockSharp.Algo.Commissions.ICommissionManager.Commission" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.ICommissionManager.ProcessOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Рассчитать комиссию заявки.
            </summary>
      <param name="order">Заявка.</param>
      <returns>Комиссия заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Commissions.ICommissionManager.ProcessMyTrade(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Рассчитать комиссию сделки.
            </summary>
      <param name="trade">Сделка.</param>
      <returns>Комиссия сделки.</returns>
    </member>
    <member name="P:StockSharp.Algo.Commissions.ICommissionManager.Commission">
      <summary>
            Суммарное значение комиссии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.ICommissionManager.CommissionPerTypes">
      <summary>
            Суммарное значение комиссии, сгруппированное по типам.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.ICommissionManager.Rules">
      <summary>
            Тарифный план.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionManager.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Commissions.CommissionManager" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionManager.Reset">
      <summary>
            Обнулить <see cref="P:StockSharp.Algo.Commissions.ICommissionManager.Commission" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionManager.ProcessMyTrade(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Рассчитать комиссию сделки.
            </summary>
      <param name="trade">Сделка.</param>
      <returns>Комиссия сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionManager.ProcessOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Рассчитать комиссию заявки.
            </summary>
      <param name="order">Заявка.</param>
      <returns>Комиссия заявки.</returns>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionManager.CommissionPerTypes">
      <summary>
            Суммарное значение комиссии, сгруппированное по типам.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionManager.Rules">
      <summary>
            Тарифный план.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionManager.Commission">
      <summary>
            Суммарное значение комиссии.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionTypes">
      <summary>
            Типы комиссий.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Commissions.CommissionTypes.PerOrder">
      <summary>
            Комиссия за заявку.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Commissions.CommissionTypes.PerOrderVolume">
      <summary>
            Комиссия за объем в заявке.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Commissions.CommissionTypes.OrderCount">
      <summary>
            Комиссия за превышение количества заявок.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Commissions.CommissionTypes.PerTrade">
      <summary>
            Комиссия за сделку.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Commissions.CommissionTypes.PerTradePrice">
      <summary>
            Комиссия за цену сделки.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Commissions.CommissionTypes.PerTradeVolume">
      <summary>
            Комиссия за объем в сделке.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Commissions.CommissionTypes.TradeCount">
      <summary>
            Комиссия за количество сделок.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Commissions.CommissionTypes.Security">
      <summary>
            Комиссия инструмента.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Commissions.CommissionTypes.SecurityType">
      <summary>
            Комиссия типа инструмента.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Commissions.CommissionTypes.TurnOver">
      <summary>
            Комиссия по обороту.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionRule">
      <summary>
            Настройки комиссии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionRule.Type">
      <summary>
            Тип комиссии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionRule.TypeValue">
      <summary>
            Дополнительная информация по типу комиссии <see cref="P:StockSharp.Algo.Commissions.CommissionRule.Type" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionRule.Value">
      <summary>
            Значение комиссии.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Commissions.ICommissionService">
      <summary>
            Интерфейс к серверу лицензий.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.ICommissionService.GetNames(System.String,System.String)">
      <summary>
            Получить список названий комиссий.
            </summary>
      <param name="login">Логин.</param>
      <param name="password">Пароль.</param>
      <returns>Названия комиссий.</returns>
    </member>
    <member name="M:StockSharp.Algo.Commissions.ICommissionService.GetRules(System.String,System.String,System.String)">
      <summary>
            Получить правила комиссии по ее названию.
            </summary>
      <param name="login">Логин.</param>
      <param name="password">Пароль.</param>
      <param name="name">Название комиссии.</param>
      <returns>Правила комиссии.</returns>
    </member>
    <member name="T:StockSharp.Algo.ContinuousSecurity">
      <summary>
            Непрерывный инструмент (как правило, фьючерс), содержащий в себе инструменты, подверженные экспирации.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.ContinuousSecurity.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.ContinuousSecurity" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.ContinuousSecurity.GetSecurity">
      <summary>
            Получить инструмент, который торгуется в текущий момент (текущее время вычисляется через метод <see cref="M:StockSharp.Algo.TraderHelper.GetMarketTime(StockSharp.BusinessEntities.Security)" />).
            </summary>
      <returns>Инструмент. Если не существует инструмента для указанного времени, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.ContinuousSecurity.GetSecurity(System.DateTime)">
      <summary>
            Получить инструмент, который торгуется для указанного биржевого времени.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <returns>Инструмент. Если не существует инструмента для указанного времени, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.ContinuousSecurity.Offset(System.TimeSpan)">
      <summary>
            Сдвинуть экпирацию у внутренних инструментов <see cref="P:StockSharp.Algo.ContinuousSecurity.ExpirationJumps" /> на размер, равный <paramref name="offset" />.
            </summary>
      <param name="offset">Размер сдвига экспирации.</param>
    </member>
    <member name="P:StockSharp.Algo.ContinuousSecurity.ExpirationJumps">
      <summary>
            Инструменты и даты перехода, при наступлении которых происходит переход на следующий инструмент.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ContinuousSecurity.InnerSecurities">
      <summary>
            Инструменты, из которых создана данная корзина.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.ContinuousSecurity.IExpirationJumpList">
      <summary>
            Интерфейс, описывающий коллекцию внутренних инструментов <see cref="P:StockSharp.Algo.ContinuousSecurity.ExpirationJumps" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.ContinuousSecurity.IExpirationJumpList.GetNextSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить следующий инструмент.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Следующий инструмент. Если <paramref name="security" /> является последним инструментом, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.ContinuousSecurity.IExpirationJumpList.GetPrevSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить предыдущий инструмент.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Предыдущий инструмент. Если <paramref name="security" /> является первым инструментом, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.ContinuousSecurity.IExpirationJumpList.GetActivityRange(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить диапазон действия внутреннего инструмента.
            </summary>
      <param name="security">Внутренний инструмент.</param>
      <returns>Диапазон действия.</returns>
    </member>
    <member name="P:StockSharp.Algo.ContinuousSecurity.IExpirationJumpList.Item(System.DateTime)">
      <summary>
            Получить инструмент для заданного времени экспирации.
            </summary>
      <param name="time">Время экспирации.</param>
      <returns>Инструмент.</returns>
    </member>
    <member name="P:StockSharp.Algo.ContinuousSecurity.IExpirationJumpList.FirstSecurity">
      <summary>
            Получить первый по экспирации инструмент.
            </summary>
      <returns>Первый инструмент. Если <see cref="P:StockSharp.Algo.ContinuousSecurity.ExpirationJumps" /> пустой, то будет возвращено null.</returns>
    </member>
    <member name="P:StockSharp.Algo.ContinuousSecurity.IExpirationJumpList.LastSecurity">
      <summary>
            Получить последний по экспирации инструмент.
            </summary>
      <returns>Последний инструмент. Если <see cref="P:StockSharp.Algo.ContinuousSecurity.ExpirationJumps" /> пустой, то будет возвращено null.</returns>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.BasketBlackScholes">
      <summary>
            Портфельная модель расчета значений "греков" по формуле Блэка-Шоулза.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.BlackScholes">
      <summary>
            Модель расчета значений "греков" по формуле Блэка-Шоулза.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.IBlackScholes">
      <summary>
            Интерфейс модели расчета значений "греков" по формуле Блэка-Шоулза.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Premium">
      <summary>
            Рассчитать премию опциона.
            </summary>
      <returns>Премия опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Premium(System.Decimal)">
      <summary>
            Рассчитать премию опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Премия опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Delta">
      <summary>
            Рассчитать дельту опциона.
            </summary>
      <returns>Дельта опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Delta(System.Decimal)">
      <summary>
            Рассчитать дельту опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Дельта опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Gamma">
      <summary>
            Рассчитать гамму опциона.
            </summary>
      <returns>Гамма опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Gamma(System.Decimal)">
      <summary>
            Рассчитать гамму опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Гамма опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Vega">
      <summary>
            Рассчитать вегу опциона.
            </summary>
      <returns>Вега опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Vega(System.Decimal)">
      <summary>
            Рассчитать вегу опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Вега опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Theta">
      <summary>
            Рассчитать тету опциона.
            </summary>
      <returns>Тета опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Theta(System.Decimal)">
      <summary>
            Рассчитать тету опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Тета опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Rho">
      <summary>
            Рассчитать ро опциона.
            </summary>
      <returns>Ро опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.Rho(System.Decimal)">
      <summary>
            Рассчитать ро опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Ро опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.IBlackScholes.IV(System.Decimal)">
      <summary>
            Рассчитать подразумеваемую волатильность (Implied  Volatility).
            </summary>
      <param name="premium">Премия по опциону.</param>
      <returns>Подразумеваевая волатильность.</returns>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.IBlackScholes.Option">
      <summary>
            Опцион.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.IBlackScholes.RiskFree">
      <summary>
            Безрисковая процентная ставка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.IBlackScholes.Dividend">
      <summary>
            Размер дивиденда по акциям.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Derivatives.BlackScholes" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Derivatives.BlackScholes" />.
            </summary>
      <param name="option">Опцион.</param>
    </member>
    <member name="F:StockSharp.Algo.Derivatives.BlackScholes.SecurityLastTradePrice">
      <summary>
            Вариант определения цены инструмента по цене последней сделки <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Derivatives.BlackScholes.SecurityBestBidPrice">
      <summary>
            Вариант определения цены инструмента по цене лучшего бида <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Derivatives.BlackScholes.SecurityBestAskPrice">
      <summary>
            Вариант определения цены инструмента по цене лучшего оффера <see cref="P:StockSharp.BusinessEntities.Security.BestAsk" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Derivatives.BlackScholes.SecuritySpreadPrice">
      <summary>
            Вариант определения цены инструмента по середине спреда.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.GetExpirationTimeLine">
      <summary>
            Расчет времени до экспирации.
            </summary>
      <returns>Время, оставшееся до экспирации.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Premium">
      <summary>
            Рассчитать премию опциона.
            </summary>
      <returns>Премия опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Premium(System.Decimal)">
      <summary>
            Рассчитать премию опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Премия опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Delta">
      <summary>
            Рассчитать дельту опциона.
            </summary>
      <returns>Дельта опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Delta(System.Decimal)">
      <summary>
            Рассчитать дельту опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Дельта опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Gamma">
      <summary>
            Рассчитать гамму опциона.
            </summary>
      <returns>Гамма опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Gamma(System.Decimal)">
      <summary>
            Рассчитать гамму опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Гамма опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Vega">
      <summary>
            Рассчитать вегу опциона.
            </summary>
      <returns>Вега опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Vega(System.Decimal)">
      <summary>
            Рассчитать вегу опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Вега опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Theta">
      <summary>
            Рассчитать тету опциона.
            </summary>
      <returns>Тета опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Theta(System.Decimal)">
      <summary>
            Рассчитать тету опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Тета опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Rho">
      <summary>
            Рассчитать ро опциона.
            </summary>
      <returns>Ро опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.Rho(System.Decimal)">
      <summary>
            Рассчитать ро опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Ро опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.IV(System.Decimal)">
      <summary>
            Рассчитать подразумеваемую волатильность (Implied  Volatility).
            </summary>
      <param name="premium">Премия по опциону.</param>
      <returns>Подразумеваевая волатильность.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BlackScholes.IV">
      <summary>
            Создать стакан волатильности.
            </summary>
      <returns>Стакан волатильности.</returns>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.Option">
      <summary>
            Опцион.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.RiskFree">
      <summary>
            Безрисковая процентная ставка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.Dividend">
      <summary>
            Размер дивиденда по акциям.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.RoundDecimals">
      <summary>
            Количество знаков после запятой у вычисляемых значений. По-умолчанию равно -1, что означает не округлять значения.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.SecurityPriceMode">
      <summary>
            Вариант определения цены инструмента. По-умолчанию равно <see cref="F:StockSharp.Algo.Derivatives.BlackScholes.SecurityLastTradePrice" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BlackScholes.UnderlyingAsset">
      <summary>
            Базовый актив.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Derivatives.BasketBlackScholes" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Delta">
      <summary>
            Рассчитать дельту опциона.
            </summary>
      <returns>Дельта опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Delta(System.Decimal)">
      <summary>
            Рассчитать дельту опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Дельта опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Gamma">
      <summary>
            Рассчитать гамму опциона.
            </summary>
      <returns>Гамма опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Gamma(System.Decimal)">
      <summary>
            Рассчитать гамму опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Гамма опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Vega">
      <summary>
            Рассчитать вегу опциона.
            </summary>
      <returns>Вега опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Vega(System.Decimal)">
      <summary>
            Рассчитать вегу опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Вега опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Theta">
      <summary>
            Рассчитать тету опциона.
            </summary>
      <returns>Тета опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Theta(System.Decimal)">
      <summary>
            Рассчитать тету опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Тета опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Rho">
      <summary>
            Рассчитать ро опциона.
            </summary>
      <returns>Ро опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Rho(System.Decimal)">
      <summary>
            Рассчитать ро опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Ро опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Premium">
      <summary>
            Рассчитать премию опциона.
            </summary>
      <returns>Премия опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.Premium(System.Decimal)">
      <summary>
            Рассчитать премию опциона.
            </summary>
      <param name="deviation">Стандартное отклонение.</param>
      <returns>Премия опциона.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.IV(System.Decimal)">
      <summary>
            Рассчитать подразумеваемую волатильность (Implied  Volatility).
            </summary>
      <param name="premium">Премия по опциону.</param>
      <returns>Подразумеваевая волатильность.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.IV">
      <summary>
            Создать стакан волатильности.
            </summary>
      <returns>Стакан волатильности.</returns>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModels">
      <summary>
            Информация по опционам.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.UnderlyingAssetPosition">
      <summary>
            Позиция по базовому активу.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.Option">
      <summary>
            Опцион.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.UnderlyingAsset">
      <summary>
            Базовый актив.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.RoundDecimals">
      <summary>
            Количество знаков после запятой у вычисляемых значений. По-умолчанию равно -1, что означает не округлять значения.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModel">
      <summary>
            Модель расчета значений "греков" по формуле Блэка-Шоулза с учетом позиции.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModel.#ctor(StockSharp.Algo.Derivatives.BlackScholes,StockSharp.Algo.Positions.IPositionManager)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModel" />.
            </summary>
      <param name="model">Модель расчета значений "греков" по формуле Блэка-Шоулза.</param>
      <param name="positionManager">Менеджер позиции.</param>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModel.Model">
      <summary>
            Модель расчета значений "греков" по формуле Блэка-Шоулза.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModel.PositionManager">
      <summary>
            Менеджер позиции.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.BasketBlackScholes.IInnerModelList">
      <summary>
            Интерфейс, описывающий коллекцию внутренних моделей <see cref="P:StockSharp.Algo.Derivatives.BasketBlackScholes.InnerModels" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketBlackScholes.IInnerModelList.Item(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить модель расчета значений "греков" по формуле Блэка-Шоулза для конкретного опциона.
            </summary>
      <param name="option">Опцион.</param>
      <returns>Модель. Если опцион не зарегистрирован, то будет возвращено null.</returns>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.BasketStrike">
      <summary>
            Виртуальный страйк, созданный из комбинации других страйков.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketStrike.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Derivatives.BasketStrike" />.
            </summary>
      <param name="underlyingAsset">Базовый актив.</param>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.BasketStrike.FilterStrikes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>
            Получить отфильтрованные страйки.
            </summary>
      <param name="allStrikes">Все страйки.</param>
      <returns>Отфильтрованные страйки.</returns>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketStrike.UnderlyingAsset">
      <summary>
            Базовый актив.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Derivatives.BasketStrike.InnerSecurities">
      <summary>
            Инструменты, из которых создана данная корзина.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.OffsetBasketStrike">
      <summary>
            Виртуальный страйк, включающий в себя страйки заданной границы сдвига.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.OffsetBasketStrike.#ctor(StockSharp.BusinessEntities.Security,Ecng.ComponentModel.Range{System.Int32})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Derivatives.OffsetBasketStrike" />.
            </summary>
      <param name="underlyingSecurity">Базовый актив.</param>
      <param name="strikeOffset">Границы сдвига от центрального страйка (отрицательное значение задает сдвиг в опционы в деньгах, положительное - вне денег).</param>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.OffsetBasketStrike.FilterStrikes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>
            Получить отфильтрованные страйки.
            </summary>
      <param name="allStrikes">Все страйки.</param>
      <returns>Отфильтрованные страйки.</returns>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.VolatilityBasketStrike">
      <summary>
            Виртуальный страйк, включающий в себя страйки заданной границы волатильности.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.VolatilityBasketStrike.#ctor(StockSharp.BusinessEntities.Security,Ecng.ComponentModel.Range{System.Decimal})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Derivatives.VolatilityBasketStrike" />.
            </summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="volatilityRange">Границы волатильности.</param>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.VolatilityBasketStrike.FilterStrikes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>
            Получить отфильтрованные страйки.
            </summary>
      <param name="allStrikes">Все страйки.</param>
      <returns>Отфильтрованные страйки.</returns>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.DerivativesHelper">
      <summary>
            Вспомогательный класс для работы с производными финансовыми инструментами (деривативами).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetUnderlyingAsset(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить базовый актив по деривативу.
            </summary>
      <param name="derivative">Дериватив.</param>
      <returns>Базовый актив.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Decimal)">
      <summary>
            Отфильтровать опционы по страйку <see cref="P:StockSharp.BusinessEntities.Security.Strike" />.
            </summary>
      <param name="options">Опционы, которые необходимо отфильтровать.</param>
      <param name="strike">Цена страйка.</param>
      <returns>Отфильтрованные опционы.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},StockSharp.BusinessEntities.OptionTypes)">
      <summary>
            Отфильтровать опционы по типу <see cref="P:StockSharp.BusinessEntities.Security.OptionType" />.
            </summary>
      <param name="options">Опционы, которые необходимо отфильтровать.</param>
      <param name="type">Тип опциона.</param>
      <returns>Отфильтрованные опционы.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},StockSharp.BusinessEntities.Security)">
      <summary>
            Отфильтровать инструменты по базовому активу.
            </summary>
      <param name="securities">Инструменты, которые необходимо отфильтровать.</param>
      <param name="asset">Базовый актив.</param>
      <returns>Отфильтрованные инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Nullable{System.DateTime})">
      <summary>
            Отфильтровать инструменты по дате экспирации <see cref="P:StockSharp.BusinessEntities.Security.ExpiryDate" />.
            </summary>
      <param name="securities">Инструменты, которые необходимо отфильтровать.</param>
      <param name="expidationDate">Дата экспирации.</param>
      <returns>Отфильтрованные инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetDerivatives(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTime})">
      <summary>
            Получить деривативы по базовому активу.
            </summary>
      <param name="asset">Базовый актив.</param>
      <param name="expidationDate">Дата экспирации.</param>
      <returns>Список из деривативов.</returns>
      <remarks>Возвращает пустой список, если деривативов не найдено.</remarks>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetAsset(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить базовый актив.
            </summary>
      <param name="derivative">Дериватив.</param>
      <returns>Базовый актив.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.Invert(StockSharp.BusinessEntities.OptionTypes)">
      <summary>
            Поменять тип опциона на противоположное.
            </summary>
      <param name="type">Первоначальное значение.</param>
      <returns>Противоположное значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOppositeOption(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить противоположный опцион (для Call получить Put, для Put получить Call).
            </summary>
      <param name="option">Опцион.</param>
      <returns>Противоположный опцион.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetCall(StockSharp.BusinessEntities.Security,System.Decimal,System.DateTime)">
      <summary>
            Получить Call для базового фьючерса.
            </summary>
      <param name="future">Базовый фьючерс.</param>
      <param name="strike">Страйк.</param>
      <param name="expidationDate">Дата экспирации опциона.</param>
      <returns>Опцион Call.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetPut(StockSharp.BusinessEntities.Security,System.Decimal,System.DateTime)">
      <summary>
            Получить Put для базового фьючерса.
            </summary>
      <param name="future">Базовый фьючерс.</param>
      <param name="strike">Страйк.</param>
      <param name="expirationDate">Дата экспирации опциона.</param>
      <returns>Опцион Put.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOption(StockSharp.BusinessEntities.Security,System.Decimal,System.DateTime,StockSharp.BusinessEntities.OptionTypes)">
      <summary>
            Получить опцион для базового фьючерса.
            </summary>
      <param name="future">Базовый фьючерс.</param>
      <param name="strike">Страйк.</param>
      <param name="expidationDate">Дата экспирации опционов.</param>
      <param name="optionType">Тип опциона.</param>
      <returns>Опцион.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetCentralStrike(StockSharp.BusinessEntities.Security,System.DateTime,StockSharp.BusinessEntities.OptionTypes)">
      <summary>
            Получить центральный страйк.
            </summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="expidationDate">Дата экспирации опционов.</param>
      <param name="optionType">Тип опциона.</param>
      <returns>Центральный страйк.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetCentralStrike(StockSharp.BusinessEntities.Security,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>
            Получить центральный страйк.
            </summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="allStrikes">Все страйки.</param>
      <returns>Центральный страйк.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetStrikeStep(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTime})">
      <summary>
            Получить размер шага страйка.
            </summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="expidationDate">Дата экспирации опционов (для указания конкретной серии).</param>
      <returns>Размер шага страйка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOutOfTheMoney(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить опционы вне денег (OTM).
            </summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <returns>Опционы вне денег.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOutOfTheMoney(StockSharp.BusinessEntities.Security,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>
            Получить опционы вне денег (OTM).
            </summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="allStrikes">Все страйки.</param>
      <returns>Опционы вне денег.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetInTheMoney(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить опционы в деньгах (ITM).
            </summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <returns>Опционы в деньгах.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetInTheMoney(StockSharp.BusinessEntities.Security,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>
            Получить опционы в деньгах (ITM).
            </summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="allStrikes">Все страйки.</param>
      <returns>Опционы в деньгах.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetAtTheMoney(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить опционы на деньгах (ATM).
            </summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <returns>Опционы на деньгах.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetAtTheMoney(StockSharp.BusinessEntities.Security,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>
            Получить опционы на деньгах (ATM).
            </summary>
      <param name="underlyingAsset">Базовый актив.</param>
      <param name="allStrikes">Все страйки.</param>
      <returns>Опционы на деньгах.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetIntrinsicValue(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить внутреннюю стоимость опциона.
            </summary>
      <param name="option">Опцион.</param>
      <returns>Внутренняя стоимость.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetTimeValue(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить временную стоимость опциона.
            </summary>
      <param name="option">Опцион.</param>
      <returns>Временная стоимость.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.IsExpired(StockSharp.BusinessEntities.Security)">
      <summary>
            Проверить, закончил ли действие инструмент.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>True, если инструмент закончил свое действие.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetOptionInfo(System.String)">
      <summary>
            Получить из названия опциона его информацию (базовый актив, страйк, дата экспирации и т.д.).
            </summary>
      <param name="optionName">Название опциона.</param>
      <returns>Информация об опционе.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.GetFutureInfo(System.String,System.String)">
      <summary>
            Получить из названия фьючерса его информацию (базовый актив, дата экспирации и т.д.).
            </summary>
      <param name="futureName">Название фьючерса.</param>
      <param name="optionCode">Код опциона.</param>
      <returns>Информация о фьючерсе.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.IV(StockSharp.BusinessEntities.MarketDepth,System.Decimal,System.Decimal)">
      <summary>
            Создать стакан волатильности из обычного стакана.
            </summary>
      <param name="depth">Стакан, котировки которого будут переведены в котировки с волатильностью.</param>
      <param name="riskFree">Безрисковая процентная ставка.</param>
      <param name="dividend">Размер дивиденда по акциям.</param>
      <returns>Стакан волатильности.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.DerivativesHelper.IV(StockSharp.BusinessEntities.MarketDepth,StockSharp.Algo.Derivatives.BlackScholes)">
      <summary>
            Создать стакан волатильности из обычного стакана.
            </summary>
      <param name="depth">Стакан, котировки которого будут переведены в котировки с волатильностью.</param>
      <param name="model">Модель расчета значений "греков" по формуле Блэка-Шоулза.</param>
      <returns>Стакан волатильности.</returns>
    </member>
    <member name="T:StockSharp.Algo.Derivatives.Synthetic">
      <summary>
            Построитель синтетических позиций.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Derivatives.Synthetic" />.
            </summary>
      <param name="security">Инструмент (опцион или базовый актив).</param>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Buy">
      <summary>
            Получить синтетическую позицию для покупки опциона.
            </summary>
      <returns>Синтетическая позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Sell">
      <summary>
            Получить синтетическую позицию для продажи опциона.
            </summary>
      <returns>Синтетическая позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Position(StockSharp.BusinessEntities.OrderDirections)">
      <summary>
            Получить синтетическую позицию для опциона.
            </summary>
      <param name="direction">Направление основной позиции.</param>
      <returns>Синтетическая позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Buy(System.Decimal)">
      <summary>
            Получить опционную позицию для синтетической покупки базового актива.
            </summary>
      <param name="strike">Страйк.</param>
      <returns>Опционная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Buy(System.Decimal,System.DateTime)">
      <summary>
            Получить опционную позицию для синтетической покупки базового актива.
            </summary>
      <param name="strike">Страйк.</param>
      <param name="expiryDate">Дата экспирации опциона.</param>
      <returns>Опционная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Sell(System.Decimal)">
      <summary>
            Получить опционную позицию для синтетической продажи базового актива.
            </summary>
      <param name="strike">Страйк.</param>
      <returns>Опционная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Sell(System.Decimal,System.DateTime)">
      <summary>
            Получить опционную позицию для синтетической продажи базового актива.
            </summary>
      <param name="strike">Страйк.</param>
      <param name="expiryDate">Дата экспирации опциона.</param>
      <returns>Опционная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Derivatives.Synthetic.Position(System.Decimal,System.DateTime,StockSharp.BusinessEntities.OrderDirections)">
      <summary>
            Получить опционную позицию для синтетического базового актива.
            </summary>
      <param name="strike">Страйк.</param>
      <param name="expiryDate">Дата экспирации опциона.</param>
      <param name="direction">Направление основной позиции.</param>
      <returns>Опционная позиция.</returns>
    </member>
    <member name="T:StockSharp.Algo.History.IQFeed.IQFeedAddresses">
      <summary>
            Адреса IQ Connect.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.History.IQFeed.IQFeedAddresses.DefaultAdminAddress">
      <summary>
            Адрес по-умолчанию для получения служебных данных.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.History.IQFeed.IQFeedAddresses.DefaultLookupAddress">
      <summary>
            Адрес по-умолчанию для получения исторических данных.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.History.IQFeed.IQFeedAddresses.DefaultLevel2Address">
      <summary>
            Адрес по-умолчанию для получения данных по Level2.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.History.IQFeed.IQFeedAddresses.DefaultLevel1Address">
      <summary>
            Адрес по-умолчанию для получения данных по Level1.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.IQFeed.IQFeedHistorySource">
      <summary>
            Источник для скачивания исторических сделок через IQFeed API.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.BaseHistorySource">
      <summary>
            Базовый класс лоадеров данных.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.BaseHistorySource.#ctor(StockSharp.Algo.History.ISecurityStorage)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.History.BaseHistorySource" />.
            </summary>
      <param name="securityStorage">Интерфейс для доступа к хранилищу информации об инструментах.</param>
    </member>
    <member name="P:StockSharp.Algo.History.BaseHistorySource.SecurityIdGenerator">
      <summary>
            Генератор идентификаторов инструментов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.BaseHistorySource.SecurityStorage">
      <summary>
            Интерфейс для доступа к хранилищу информации об инструментах.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.BaseHistorySource.DumpFolder">
      <summary>
            Путь к директории, куда будут сохранятся скаченные файлы.
            </summary>
      <remarks>
            Если значение равно пустой строке, то данные не сохраняются локально.
            </remarks>
    </member>
    <member name="M:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.#ctor(StockSharp.Algo.History.ISecurityStorage,StockSharp.Algo.Storages.IEntityRegistry)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.History.IQFeed.IQFeedHistorySource" />.
            </summary>
      <param name="securityStorage">Хранилище информации об инструментах.</param>
      <param name="registry">Хранилище торговых объектов.</param>
    </member>
    <member name="M:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.GetNewSecurities">
      <summary>
            Получить новые инструменты.
            </summary>
      <returns>Новые инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.GetTrades(StockSharp.BusinessEntities.Security,System.DateTime)">
      <summary>
            Получить исторические сделки.
            </summary>
      <param name="security">Инструмент, для которого необходимо получить все сделки. Если значение равно null, то возвращаются сделки по всем инструментам.</param>
      <param name="time">Время торговой сессии, для которой необходимо получить сделки.</param>
      <returns>Исторические сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.RegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получение сделок для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
    </member>
    <member name="M:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.UnRegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение сделок для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
    </member>
    <member name="M:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.RegisterMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получение стаканов для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
    </member>
    <member name="M:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.UnRegisterMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение стаканов для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
    </member>
    <member name="P:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.Level1Address">
      <summary>
            Адрес для получения данных по Level1.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.Level2Address">
      <summary>
            Адрес для получения данных по Level2.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.LookupAddress">
      <summary>
            Адрес для получения исторических данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.AdminAddress">
      <summary>
            Адрес для получения служебных данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.Registry">
      <summary>
            Хранилище торговых объектов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.RegisteredTrades">
      <summary>
            Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.RegisterTrades(StockSharp.BusinessEntities.Security)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.RegisteredMarketDepths">
      <summary>
            Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.RegisterMarketDepth(StockSharp.BusinessEntities.Security)" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.NewTrades">
      <summary>
            Событие появления всех новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.MarketDepthsChanged">
      <summary>
            Событие изменения стаканов с котировками.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.History.IQFeed.IQFeedHistorySource.Error">
      <summary>
            Событие нового сообщения об ошибке.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.ExchangeList">
      <summary>
            Класс для представления в виде списка бирж, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.BaseStorageEntityList`1">
      <summary>
            Базовый класс для представления в виде списка торговых объектов, хранящихся в базе данных.
            </summary>
      <typeparam name="T">Тип торгового объекта (например, <see cref="T:StockSharp.BusinessEntities.Security" /> или <see cref="T:StockSharp.BusinessEntities.MyTrade" />).</typeparam>
    </member>
    <member name="T:StockSharp.Algo.Storages.IStorageEntityList`1">
      <summary>
            Интерфейс для представления в виде списка торговых объектов, полученных из внешнего хранилища.
            </summary>
      <typeparam name="T">Тип торгового объекта (например, <see cref="T:StockSharp.BusinessEntities.Security" /> или <see cref="T:StockSharp.BusinessEntities.MyTrade" />).</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageEntityList`1.ReadById(System.Object)">
      <summary>
            Загрузить торговый объект по идентификатору.
            </summary>
      <param name="id">Идентификатор.</param>
      <returns>Торговый объект. Если по идентификатору объект не был найден, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageEntityList`1.Save(`0)">
      <summary>
            Сохранить торговый объект.
            </summary>
      <param name="entity">Торговый объект.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Storages.BaseStorageEntityList`1" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseStorageEntityList`1.Save(`0)">
      <summary>
            Сохранить торговый объект.
            </summary>
      <param name="entity">Торговый объект.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.ExchangeList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.ExchangeList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.History.Hydra.RemoteStoragePermissions">
      <summary>
            Доступные разрешения работы с данными, которые получает клиент.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.History.Hydra.RemoteStoragePermissions.Save">
      <summary>
            Сохранение данных.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.History.Hydra.RemoteStoragePermissions.Load">
      <summary>
            Загрузка данных.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.History.Hydra.RemoteStoragePermissions.Delete">
      <summary>
            Удаление данных.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.Hydra.RemoteStorage">
      <summary>
            Внешнее хранилище маркет-данных, доступ к которому организован через сетевое соединение WCF (подробнее, <see cref="N:System.ServiceModel" />).
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.Hydra.IRemoteStorage">
      <summary>
            Интерфейс, описывающий внешнее хранилище маркет-данных, доступ к которому организован через сетевое соединение WCF (подробнее, <see cref="N:System.ServiceModel" />).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IRemoteStorage.Login(System.String,System.String)">
      <summary>
            Произвести вхов в систему.
            </summary>
      <param name="login">Логин.</param>
      <param name="password">Пароль.</param>
      <returns>Идентификатор сессии.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IRemoteStorage.Logout(System.Guid)">
      <summary>
            Выйти из системы.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IRemoteStorage.GetAllSecurityIds(System.Guid)">
      <summary>
            Получить все идентификаторы инструментов.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
      <returns>Все идентификаторы инструментов.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IRemoteStorage.GetSecurities(System.Guid,System.String[])">
      <summary>
            Получить инструменты.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
      <param name="securityIds">Идентификаторы инструментов.</param>
      <returns>Инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IRemoteStorage.GetDates(System.Guid,System.String,System.String,System.Object)">
      <summary>
            Получить все даты, для которых записаны маркет-данные.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="dataType">Тип маркет-данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <returns>Диапазон доступных дат.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IRemoteStorage.GetCandleTypes(System.Guid,System.String)">
      <summary>
            Получить все типы и параметры свечек, для которых записаны маркет-данные.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <returns>Все типы и параметры свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IRemoteStorage.Save(System.Guid,System.String,System.String,System.Object,System.DateTime,System.Byte[])">
      <summary>
            Сохранить маркет-данные в формате хранилища StockSharp.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="dataType">Тип маркет-данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <param name="date">Дата, для которой необходимо сохранить маркет-данные.</param>
      <param name="data">Маркет-данные в формате хранилища StockSharp.</param>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IRemoteStorage.Delete(System.Guid,System.String,System.String,System.Object,System.DateTime)">
      <summary>
            Удалить маркет-данные из хранилища за указанную дату.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="dataType">Тип маркет-данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <param name="date">Дата, для которой необходимо удалить маркет-данные.</param>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IRemoteStorage.Load(System.Guid,System.String,System.String,System.Object,System.DateTime)">
      <summary>
            Загрузить маркет-данные в формате хранилища StockSharp.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="dataType">Тип маркет-данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <param name="date">Дата, для которой необходимо загрузить маркет-данные.</param>
      <returns>Маркет-данные в формате хранилища StockSharp. Если данных не существует, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IRemoteStorage.LoadStream(System.Guid,System.String,System.String,System.Object,System.DateTime)">
      <summary>
            Загрузить маркет-данные в формате хранилища StockSharp.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="dataType">Тип маркет-данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <param name="date">Дата, для которой необходимо загрузить маркет-данные.</param>
      <returns>Маркет-данные в формате хранилища StockSharp. Если данных не существует, то будет возвращено <see cref="F:System.IO.Stream.Null" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.IRemoteStorage.ClearDatesCache(System.Guid,System.String,System.String,System.Object)">
      <summary>
            Удалить кэш-файлы, хранящие в себе информацию о доступных диапазонах времени.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
      <param name="securityId">Идентификатор инструмента.</param>
      <param name="dataType">Тип маркет-данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.RemoteStorage.#ctor(StockSharp.Algo.Storages.IStorageRegistry,StockSharp.Algo.Storages.IEntityRegistry)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.History.Hydra.RemoteStorage" />.
            </summary>
      <param name="storageRegistry">Хранилище маркет-данных.</param>
      <param name="entityRegistry">Хранилище торговых сущностей.</param>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.RemoteStorage.ValidateCredentials(System.String,System.String)">
      <summary>
            Проверить логин и пароль на правильность.
            </summary>
      <param name="login">Логин.</param>
      <param name="password">Пароль.</param>
      <returns>Допустимые действия.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.RemoteStorage.GetDrives">
      <summary>
            Получить список доступных хранилищ маркет-данных.
            </summary>
      <returns>Хранилища маркет-данных.</returns>
    </member>
    <member name="P:StockSharp.Algo.History.Hydra.RemoteStorage.StorageRegistry">
      <summary>
            Хранилище маркет-данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Hydra.RemoteStorage.EntityRegistry">
      <summary>
            Хранилище торговых сущностей.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.Hydra.RemoteStorageClient">
      <summary>
            Клиент для доступа к серверу истории <see cref="T:StockSharp.Algo.History.Hydra.IRemoteStorage" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.RemoteStorageClient.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.History.Hydra.RemoteStorageClient" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.RemoteStorageClient.#ctor(System.Uri,System.Boolean)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.History.Hydra.RemoteStorageClient" />.
            </summary>
      <param name="address">Адрес сервера.</param>
      <param name="streaming">Передача данных через WCF Streaming.</param>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.RemoteStorageClient.GetAllSecurities(StockSharp.Algo.History.ISecurityStorage)">
      <summary>
            Получить все инструменты.
            </summary>
      <param name="securityStorage">Интерфейс для доступа к хранилищу информации об инструментах.</param>
      <returns>Все инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.RemoteStorageClient.GetNewSecurities(StockSharp.Algo.History.ISecurityStorage)">
      <summary>
            Получить новые инструменты.
            </summary>
      <param name="securityStorage">Интерфейс для доступа к хранилищу информации об инструментах.</param>
      <returns>Новые инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.RemoteStorageClient.GetRemoteStorage(StockSharp.BusinessEntities.Security,System.Type,System.Object)">
      <summary>
            Получить обертку для доступа к удаленным маркет-данным.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="dataType">Тип маркет-данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <returns>Обертка для доступа к удаленным маркет-данным.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.RemoteStorageClient.GetCandleTypes(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить для инструмента доступные типы свечек с параметрами.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Доступные типы свечек с параметрами.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Hydra.RemoteStorageClient.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Hydra.RemoteStorageClient.Address">
      <summary>
            Адрес сервера.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.IMarketDataStorageDrive">
      <summary>
            Интерфейс, описывающий хранилище, ассоциированное с <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorageDrive.ClearDatesCache">
      <summary>
            Удалить кэш-файлы, хранящие в себе информацию о доступных диапазонах времени.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorageDrive.Delete(System.DateTime)">
      <summary>
            Удалить маркет-данные из хранилища за указанную дату.
            </summary>
      <param name="date">Дата, для которой необходимо удалить все данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorageDrive.Save(System.DateTime,System.Byte[])">
      <summary>
            Сохранить данные в формате хранилища StockSharp.
            </summary>
      <param name="date">Дата, для которой необходимо сохранить данные.</param>
      <param name="rawData">Данные в формате хранилища StockSharp.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorageDrive.Load(System.DateTime)">
      <summary>
            Загрузить данные в формате хранилища StockSharp.
            </summary>
      <param name="date">Дата, для которой необходимо загрузить данные.</param>
      <returns>Данные в формате хранилища StockSharp. Если данных не существует, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorageDrive.SaveStream(System.DateTime,System.IO.Stream)">
      <summary>
            Сохранить данные в формате хранилища StockSharp.
            </summary>
      <param name="date">Дата, для которой необходимо сохранить данные.</param>
      <param name="rawData">Данные в формате хранилища StockSharp.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorageDrive.LoadStream(System.DateTime)">
      <summary>
            Загрузить данные в формате хранилища StockSharp.
            </summary>
      <param name="date">Дата, для которой необходимо загрузить данные.</param>
      <returns>Данные в формате хранилища StockSharp. Если данных не существует, то будет возвращено <see cref="F:System.IO.Stream.Null" />.</returns>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorageDrive.Dates">
      <summary>
            Получить все даты, для которых записаны маркет-данные.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.Rts.Competition">
      <summary>
            Класс для получения данных к итогам конкурса ЛЧИ.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.Rts.Competition.#ctor(StockSharp.Algo.History.ISecurityStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.History.Rts.Competition" />.
            </summary>
      <param name="securityStorage">Интерфейс для доступа к хранилищу информации об инструментах.</param>
    </member>
    <member name="M:StockSharp.Algo.History.Rts.Competition.Get(System.DateTime)">
      <summary>
            Получить итоги за определенный год.
            </summary>
      <param name="year">Год конкурса.</param>
      <returns>Итоги.</returns>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.Competition.AllYears">
      <summary>
            Все года, когда проводился конкурс.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.Rts.Competition.CompetitionYear">
      <summary>
            Итог конкурса ЛЧИ за определенный год.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.Rts.Competition.CompetitionYear.GetTrades(System.String,System.DateTime)">
      <summary>
            Получить сделки участника за определенную дату.
            </summary>
      <param name="member">Участник.</param>
      <param name="date">Дата соревнования.</param>
      <returns>Сделки участника.</returns>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.Competition.CompetitionYear.Year">
      <summary>
            Год проведения ЛЧИ.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.Competition.CompetitionYear.Members">
      <summary>
            Участники соревнования.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.Competition.CompetitionYear.Days">
      <summary>
            Даты, для которых есть информация о сделках.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.Rts.SecurityDailyData">
      <summary>
            Дневаная информация по инструменту.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.Date">
      <summary>
            Дата.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.AveragePrice">
      <summary>
            Средняя цена.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.CalculatedPrice">
      <summary>
            Расчетная цена.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.Open">
      <summary>
            Цена открытия.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.High">
      <summary>
            Максимум дня.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.Low">
      <summary>
            Минимум дня.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.Close">
      <summary>
            Цена закрытия.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.VolumeInTrades">
      <summary>
            Количество сделок за день.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.VolumeInRubles">
      <summary>
            Объем в рублях.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.Volume">
      <summary>
            Объем в контрактах.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.OpenInterestInRubles">
      <summary>
            Открытый интерес в рублях.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.SecurityDailyData.OpenInterest">
      <summary>
            Открытый интерес.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.Rts.FortsDailyData">
      <summary>
            Класс для доступа с историческим дневным данный рынка FORTS.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.Rts.FortsDailyData.GetSecurityData(StockSharp.BusinessEntities.Security,System.DateTime,System.DateTime)">
      <summary>
            Возвращает список исторических данных по выбранному инструменту за выбранный период.
            </summary>
      <remarks>
            Отсутствующие значения (например, если не было сделок) замещаются нулями.
            </remarks>
      <param name="security">Инструмент.</param>
      <param name="fromDate">Дата начала периода.</param>
      <param name="toDate">Дата конца периода.</param>
      <returns>Исторические данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Rts.FortsDailyData.GetYesterdaySecurityData(StockSharp.BusinessEntities.Security)">
      <summary>
            Возвращает вчерашние данные по выбранному инструменту.
            </summary>
      <remarks>
            Дата определяется на основе системного времени.
            </remarks>
      <param name="security">Инструмент.</param>
      <returns>Вчерашние данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Rts.FortsDailyData.GetUsdRate(System.DateTime)">
      <summary>
            Получить индикативный курс доллара США к российскому рублю, начиная с <see cref="P:StockSharp.Algo.History.Rts.FortsDailyData.UsdRateMinAvailableTime" />.
            </summary>
      <param name="toDate">Дата окончания периода.</param>
      <returns>Индикативный курс доллара США к российскому рублю.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Rts.FortsDailyData.GetUsdRate(System.DateTime,System.DateTime)">
      <summary>
            Получить индикативный курс доллара США к российскому рублю.
            </summary>
      <param name="fromDate">Дата начала периода.</param>
      <param name="toDate">Дата окончания периода.</param>
      <returns>Индикативный курс доллара США к российскому рублю.</returns>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.FortsDailyData.UsdRateMinAvailableTime">
      <summary>
            Минимальная дата, для которой есть индикативный курс доллара США к российскому рублю. Равен 2 ноября 2009 года.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.Finam.FinamSecurityInfo">
      <summary>
            Информация об инструменте, загруженная через <see cref="T:StockSharp.Algo.History.Finam.FinamHistorySource" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Finam.FinamSecurityInfo.FinamSecurityId">
      <summary>
            Идентификатор инструмента на сайте Finam.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Finam.FinamSecurityInfo.FinamMarketId">
      <summary>
            Идентификатор рынка на сайте Finam.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Finam.FinamSecurityInfo.Code">
      <summary>
            Код инструмента.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Finam.FinamSecurityInfo.Name">
      <summary>
            Имя инструмента.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Finam.FinamSecurityInfo.Decimals">
      <summary>
            Количество знаков после запятой.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.SecurityStorage">
      <summary>
            Хранилище информации об инструментах.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.History.ISecurityStorage">
      <summary>
            Интерфейс для доступа к хранилищу информации об инструментах.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.ISecurityStorage.LoadBy(System.String,System.Object)">
      <summary>
            Загрузить инструмент по значению его поля.
            </summary>
      <param name="fieldName">Название поля инструмента.</param>
      <param name="fieldValue">Значение поля инструмента.</param>
      <returns>Загруженный инструмент. Если инструмент по данным критериям отсутствует, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.ISecurityStorage.Save(StockSharp.BusinessEntities.Security)">
      <summary>
            Сохранить инструмент.
            </summary>
      <param name="security">Инструмент.</param>
    </member>
    <member name="M:StockSharp.Algo.History.SecurityStorage.#ctor(StockSharp.Algo.Storages.IEntityRegistry)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.History.SecurityStorage" />.
            </summary>
      <param name="entityRegistry">Хранилище торговых объектов.</param>
    </member>
    <member name="M:StockSharp.Algo.History.SecurityStorage.LoadBy(System.String,System.Object)">
      <summary>
            Загрузить информацию об инструменте из хранилища по полю и его значению.
            </summary>
      <param name="fieldName">Название поля, по которому необходимо загрузить информацию об инструменте.</param>
      <param name="fieldValue">Значение поля <paramref name="fieldName" />.</param>
      <returns>Информация об инструменте.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.SecurityStorage.Save(StockSharp.BusinessEntities.Security)">
      <summary>
            Сохранить информацию об инструменте в хранилище.
            </summary>
      <param name="security">Информация об инструменте.</param>
    </member>
    <member name="M:StockSharp.Algo.History.SecurityStorage.GetNonSavedSecurities">
      <summary>
            Получить несохраненные инструменты.
            </summary>
      <returns>Несохраненные инструменты.</returns>
    </member>
    <member name="P:StockSharp.Algo.History.SecurityStorage.CachedSecurities">
      <summary>
            Список инструментов.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.IMarketRuleContainer">
      <summary>
            Контейнер правил.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.IMarketRuleContainer.ActivateRule(StockSharp.Algo.IMarketRule,System.Func{System.Boolean})">
      <summary>
            Активировать правило.
            </summary>
      <param name="rule">Правило.</param>
      <param name="process">Обработчик, возвращающий true, если правило закончило свою работу, иначе - false.</param>
    </member>
    <member name="M:StockSharp.Algo.IMarketRuleContainer.SuspendRules">
      <summary>
            Приостановить исполнение правил до следующего восстановления через метод <see cref="M:StockSharp.Algo.IMarketRuleContainer.ResumeRules" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.IMarketRuleContainer.ResumeRules">
      <summary>
            Восстановить исполнение правил, остановленное через метод <see cref="M:StockSharp.Algo.IMarketRuleContainer.SuspendRules" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRuleContainer.ProcessState">
      <summary>
            Состояние работы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRuleContainer.IsRulesSuspended">
      <summary>
            Приостановлено ли исполнение правил.
            </summary>
      <remarks>
            Приостановка правил происходит через метод <see cref="M:StockSharp.Algo.IMarketRuleContainer.SuspendRules" />.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.IMarketRuleContainer.Rules">
      <summary>
            Зарегистрированные правила.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.IMarketRuleList">
      <summary>
            Список правил.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.IMarketRuleList.GetRulesByToken(System.Object)">
      <summary>
            Получить все правила, ассоциированные с токеном.
            </summary>
      <param name="token">Токен правила.</param>
      <returns>Все правила, ассоциированные с токеном.</returns>
    </member>
    <member name="M:StockSharp.Algo.IMarketRuleList.RemoveRulesByToken(System.Object,StockSharp.Algo.IMarketRule)">
      <summary>
            Удалить все правила, у которых <see cref="P:StockSharp.Algo.IMarketRule.Token" /> равен <paramref name="token" />.
            </summary>
      <param name="token">Токен правила.</param>
      <param name="currentRule">Текущее правило, которое инициировало удаление. Если оно было передано, то оно не будет удалено.</param>
    </member>
    <member name="P:StockSharp.Algo.IMarketRuleList.Tokens">
      <summary>
            Получить все активные токены правил.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.IndexSecurity">
      <summary>
            Индекс, построенный из инструментов. Например, для задание спреда при арбитраже или парном трейдинге.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.IndexSecurity.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.IndexSecurity" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.IndexSecurity.Calculate(System.Collections.Generic.IDictionary{StockSharp.BusinessEntities.Security,System.Decimal})">
      <summary>
            Вычислить значение корзины.
            </summary>
      <param name="prices">Цены составных инструментов корзины <see cref="P:StockSharp.BusinessEntities.BasketSecurity.InnerSecurities" />.</param>
      <returns>Значение корзины.</returns>
    </member>
    <member name="T:StockSharp.Algo.WeightedIndexSecurity">
      <summary>
            Корзина инструментов, основанная на весах <see cref="P:StockSharp.Algo.WeightedIndexSecurity.Weights" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.WeightedIndexSecurity.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.WeightedIndexSecurity" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.WeightedIndexSecurity.Calculate(System.Collections.Generic.IDictionary{StockSharp.BusinessEntities.Security,System.Decimal})">
      <summary>
            Вычислить значение корзины.
            </summary>
      <param name="prices">Цены составных инструментов корзины <see cref="P:StockSharp.BusinessEntities.BasketSecurity.InnerSecurities" />.</param>
      <returns>Значение корзины.</returns>
    </member>
    <member name="P:StockSharp.Algo.WeightedIndexSecurity.Weights">
      <summary>
            Инструменты и их весовые коэффициенты в корзине.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.WeightedIndexSecurity.InnerSecurities">
      <summary>
            Инструменты, из которых создана данная корзина.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.ComplexIndicatorModes">
      <summary>
            Режимы обработки вложенных индикаторов.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Indicators.ComplexIndicatorModes.Sequence">
      <summary>
            Последовательно. Результат выполнения предыдущего индикатора передается в следующий.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Indicators.ComplexIndicatorModes.Parallel">
      <summary>
            Параллельно. Результаты выполнения индикаторов не зависят друг от друга.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.BaseComplexIndicator">
      <summary>
            Базовый индикатор, который строится ввиде комбинации нескольких индикаторов.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.BaseIndicator`1">
      <summary>
            Базовый индикатор.
            </summary>
      <typeparam name="TResult">Тип результирующего значение, которое возвращается через метод <see cref="M:StockSharp.Algo.Indicators.BaseIndicator`1.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)" />.</typeparam>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IIndicator">
      <summary>
            Интерфейс, описывающий индикатор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicator.CanProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>
            Возможно ли обработать входное значение.
            </summary>
      <param name="input">Входное значение.</param>
      <returns>True, если возможно, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicator.Process(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>
            Обработать входное значение.
            </summary>
      <param name="input">Входное значение.</param>
      <returns>Новое значение индикатора.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicator.Reset">
      <summary>
            Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicator.Id">
      <summary>
            Уникальный идентификатор.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicator.Name">
      <summary>
            Название индикатора.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicator.IsFormed">
      <summary>
            Сформирован ли индикатор.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicator.Container">
      <summary>
            Контейнер, хранящий данные индикатора.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Indicators.IIndicator.Changed">
      <summary>
            Событие об изменении индикатора (например, добавлено новое значение).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Indicators.IIndicator.Reseted">
      <summary>
            Событие о сбросе состояния индикатора на первоначальное. Событие вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator`1.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Indicators.BaseIndicator`1" />, который работает с данными типа <see cref="T:System.Decimal" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator`1.#ctor(System.Type)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Indicators.BaseIndicator`1" />.
            </summary>
      <param name="valueType">Тип данных, которым оперирует индикатор.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator`1.Reset">
      <summary>
            Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator`1.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить настройки.
            </summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator`1.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить настройки.
            </summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator`1.CanProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>
            Возможно ли обработать входное значение.
            </summary>
      <param name="input">Входное значение.</param>
      <returns>True, если возможно, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator`1.Process(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>
            Обработать входное значение.
            </summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator`1.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>
            Обработать входное значение.
            </summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator`1.RaiseChangedEvent(StockSharp.Algo.Indicators.IIndicatorValue,StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Indicators.BaseIndicator`1.Changed" />.
            </summary>
      <param name="input">Входное значение индикатора.</param>
      <param name="result">Результирующее значение индикатора.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator`1.Clone">
      <summary>
            Создать копию данного объекта.
            </summary>
      <returns>Копия данного объекта.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseIndicator`1.ToString">
      <summary>
            Получить строковое представление.
            </summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseIndicator`1.Id">
      <summary>
            Уникальный идентификатор.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseIndicator`1.Name">
      <summary>
            Название индикатора.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseIndicator`1.IsFormed">
      <summary>
            Сформирован ли индикатор.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseIndicator`1.Container">
      <summary>
            Контейнер, хранящий данные индикатора.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Indicators.BaseIndicator`1.Changed">
      <summary>
            Событие об изменении индикатора (например, добавлено новое значение).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Indicators.BaseIndicator`1.Reseted">
      <summary>
            Событие о сбросе состояния индикатора на первоначальное. Событие вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IComplexIndicator">
      <summary>
            Интерфейс индикатора, который строится ввиде комбинации нескольких индикаторов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IComplexIndicator.InnerIndicators">
      <summary>
            Вложенные индикаторы.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.#ctor(StockSharp.Algo.Indicators.IIndicator[])">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Indicators.BaseComplexIndicator" />.
            </summary>
      <param name="innerIndicators">Вложенные индикаторы.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.CanProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>
            Возможно ли обработать входное значение.
            </summary>
      <param name="input">Входное значение.</param>
      <returns>True, если возможно, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>
            Обработать входное значение.
            </summary>
      <param name="input">Входное значение.</param>
      <returns>Результирующее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.Reset">
      <summary>
            Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить настройки.
            </summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.BaseComplexIndicator.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить настройки.
            </summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseComplexIndicator.Mode">
      <summary>
            Режим обработки вложенных индикаторов. По умолчаннию равно <see cref="F:StockSharp.Algo.Indicators.ComplexIndicatorModes.Parallel" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseComplexIndicator.InnerIndicators">
      <summary>
            Вложенные индикаторы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.BaseComplexIndicator.IsFormed">
      <summary>
            Сформирован ли индикатор.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.ComplexIndicatorValue">
      <summary>
            Комплексное значение индикатора <see cref="T:StockSharp.Algo.Indicators.IComplexIndicator" />, которое получается в результате вычисления.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IIndicatorValue">
      <summary>
            Входное значение индикатора, на основе которого он обновит свое значение, а так значение, хранящее результат вычисления индикатора.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicatorValue.IsSupport(System.Type)">
      <summary>
            Поддерживает ли значение необходимый для индикатора тип данных.
            </summary>
      <param name="valueType">Тип данных, которым оперирует индикатор.</param>
      <returns>True, если тип данных поддерживается, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicatorValue.GetValue``1">
      <summary>
            Получить значение по типу данных.
            </summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <returns>Значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicatorValue.SetValue``1(``0)">
      <summary>
            Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).
            </summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="value">Значение.</param>
      <returns>Новый объект, содержащий входное значение.</returns>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicatorValue.IsEmpty">
      <summary>
            Значение индикатора отсутствует.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicatorValue.IsFinal">
      <summary>
            Является ли значение окончательным (индикатор окончательно формирует свое значение и более не будет изменяться в данной точке времени).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ComplexIndicatorValue.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Indicators.ComplexIndicatorValue" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ComplexIndicatorValue.GetValue``1">
      <summary>
            Получить значение по типу данных.
            </summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <returns>Значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ComplexIndicatorValue.SetValue``1(``0)">
      <summary>
            Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).
            </summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="value">Значение.</param>
      <returns>Измененная копия входного значения.</returns>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ComplexIndicatorValue.IsEmpty">
      <summary>
            Значение индикатора отсутствует.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ComplexIndicatorValue.IsFinal">
      <summary>
            Является ли значение окончательным (индикатор окончательно формирует свое значение и более не будет изменяться в данной точке времени).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ComplexIndicatorValue.InnerValues">
      <summary>
            Вложенные значения.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IIndicatorContainer">
      <summary>
            Интерфейс контейнера, хранящего данные индикатора.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicatorContainer.AddValue(StockSharp.Algo.Indicators.IIndicatorValue,StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>
            Добавить новые значения.
            </summary>
      <param name="input">Входное значение индикатора.</param>
      <param name="result">Результирующее значение индикатора.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicatorContainer.GetValues">
      <summary>
            Получить все значения индикатора.
            </summary>
      <returns>Все значения индикатора. Пустое множество, если значений нет.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicatorContainer.GetValue(System.Int32)">
      <summary>
            Получить значения индикатора по индексу.
            </summary>
      <param name="index">Порядковый номер значения с конца.</param>
      <returns>Входное и результирующие значения индикатора.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IIndicatorContainer.ClearValues">
      <summary>
            Удалить все значения индикатора.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IIndicatorContainer.Count">
      <summary>
            Текущее количество сохраненных значений.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.SingleIndicatorValue`1">
      <summary>
            Базовое значение индикатора, работающее с один типом данных.
            </summary>
      <typeparam name="TValue">Тип значения.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.#ctor(`0)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Indicators.SingleIndicatorValue`1" />.
            </summary>
      <param name="value">Значение.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Indicators.SingleIndicatorValue`1" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.IsSupport(System.Type)">
      <summary>
            Поддерживает ли значение необходимый для индикатора тип данных.
            </summary>
      <param name="valueType">Тип данных, которым оперирует индикатор.</param>
      <returns>True, если тип данных поддерживается, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.GetValue``1">
      <summary>
            Получить значение по типу данных.
            </summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <returns>Значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.SetValue``1(``0)">
      <summary>
            Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).
            </summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="value">Значение.</param>
      <returns>Новый объект, содержащий входное значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.SingleIndicatorValue`1.ToString">
      <summary>
            Получить строковое представление.
            </summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="P:StockSharp.Algo.Indicators.SingleIndicatorValue`1.Value">
      <summary>
            Значение.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.SingleIndicatorValue`1.IsEmpty">
      <summary>
            Значение индикатора отсутствует.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.SingleIndicatorValue`1.IsFinal">
      <summary>
            Является ли значение окончательным (индикатор окончательно формирует свое значение и более не будет изменяться в данной точке времени).
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.DecimalIndicatorValue">
      <summary>
            Значение индикатора, работающее с типом данных <see cref="T:System.Decimal" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DecimalIndicatorValue.#ctor(System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Indicators.DecimalIndicatorValue" />.
            </summary>
      <param name="value">Значение.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DecimalIndicatorValue.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Indicators.DecimalIndicatorValue" />. 
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DecimalIndicatorValue.op_Implicit(System.Decimal)~StockSharp.Algo.Indicators.DecimalIndicatorValue">
      <summary>
            Привести <see cref="T:System.Decimal" /> значение к объекту <see cref="T:StockSharp.Algo.Indicators.DecimalIndicatorValue" />.
            </summary>
      <param name="value">
        <see cref="T:System.Decimal" /> значение.</param>
      <returns>Объект <see cref="T:StockSharp.Algo.Indicators.DecimalIndicatorValue" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.DecimalIndicatorValue.SetValue``1(``0)">
      <summary>
            Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).
            </summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="value">Значение.</param>
      <returns>Новый объект, содержащий входное значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.CandleIndicatorValue">
      <summary>
            Значение индикатора, работающее с типом данных <see cref="T:StockSharp.Algo.Candles.Candle" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.#ctor(StockSharp.Algo.Candles.Candle)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Indicators.CandleIndicatorValue" />.
            </summary>
      <param name="value">Значение.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.#ctor(StockSharp.Algo.Candles.Candle,System.Func{StockSharp.Algo.Candles.Candle,System.Decimal})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Indicators.CandleIndicatorValue" />.
            </summary>
      <param name="value">Значение.</param>
      <param name="getPart">Конвертер свечки, через который можно получить ее параметр. По-умолчанию используется <see cref="F:StockSharp.Algo.Indicators.CandleIndicatorValue.ByClose" />.</param>
    </member>
    <member name="F:StockSharp.Algo.Indicators.CandleIndicatorValue.ByClose">
      <summary>
            Конвертер, который берет из свечки цену закрытия <see cref="P:StockSharp.Algo.Candles.Candle.ClosePrice" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Indicators.CandleIndicatorValue.ByOpen">
      <summary>
            Конвертер, который берет из свечки цену открытия <see cref="P:StockSharp.Algo.Candles.Candle.OpenPrice" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Indicators.CandleIndicatorValue.ByMiddle">
      <summary>
            Конвертер, который берет из свечки середину тела (<see cref="P:StockSharp.Algo.Candles.Candle.OpenPrice" /> + <see cref="P:StockSharp.Algo.Candles.Candle.ClosePrice" />) / 2.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.op_Implicit(StockSharp.Algo.Candles.Candle)~StockSharp.Algo.Indicators.CandleIndicatorValue">
      <summary>
            Привести <see cref="T:StockSharp.Algo.Candles.Candle" /> значение к объекту <see cref="T:StockSharp.Algo.Indicators.CandleIndicatorValue" />.
            </summary>
      <param name="value">
        <see cref="T:StockSharp.Algo.Candles.Candle" /> значение.</param>
      <returns>Объект <see cref="T:StockSharp.Algo.Indicators.CandleIndicatorValue" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.IsSupport(System.Type)">
      <summary>
            Поддерживает ли значение необходимый для индикатора тип данных.
            </summary>
      <param name="valueType">Тип данных, которым оперирует индикатор.</param>
      <returns>True, если тип данных поддерживается, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.GetValue``1">
      <summary>
            Получить значение по типу данных.
            </summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <returns>Значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.CandleIndicatorValue.SetValue``1(``0)">
      <summary>
            Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).
            </summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="value">Значение.</param>
      <returns>Новый объект, содержащий входное значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.MarketDepthIndicatorValue">
      <summary>
            Значение индикатора, работающее с типом данных <see cref="T:StockSharp.BusinessEntities.MarketDepth" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.#ctor(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Indicators.MarketDepthIndicatorValue" />.
            </summary>
      <param name="depth">Стакан.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.#ctor(StockSharp.BusinessEntities.MarketDepth,System.Func{StockSharp.BusinessEntities.MarketDepth,System.Decimal})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Indicators.MarketDepthIndicatorValue" />.
            </summary>
      <param name="depth">Стакан.</param>
      <param name="getPart">Конвертер стакана, через который можно получить его параметр. По-умолчанию используется <see cref="F:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.ByMiddle" />.</param>
    </member>
    <member name="F:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.ByBestBid">
      <summary>
            Конвертер, который берет из стакана цену лучшего бида <see cref="P:StockSharp.BusinessEntities.MarketDepth.BestBid" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.ByBestAsk">
      <summary>
            Конвертер, который берет из стакана цену лучшего оффера <see cref="P:StockSharp.BusinessEntities.MarketDepth.BestAsk" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.ByMiddle">
      <summary>
            Конвертер, который берет из стакана середину спреда <see cref="P:StockSharp.BusinessEntities.MarketDepthPair.MiddlePrice" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.IsSupport(System.Type)">
      <summary>
            Поддерживает ли значение необходимый для индикатора тип данных.
            </summary>
      <param name="valueType">Тип данных, которым оперирует индикатор.</param>
      <returns>True, если тип данных поддерживается, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.GetValue``1">
      <summary>
            Получить значение по типу данных.
            </summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <returns>Значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.MarketDepthIndicatorValue.SetValue``1(``0)">
      <summary>
            Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).
            </summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="value">Значение.</param>
      <returns>Новый объект, содержащий входное значение.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IndicatorContainer">
      <summary>
            Контейнер, хранящий данные индикаторов.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorContainer.AddValue(StockSharp.Algo.Indicators.IIndicatorValue,StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>
            Добавить новые значения.
            </summary>
      <param name="input">Входное значение индикатора.</param>
      <param name="result">Результирующее значение индикатора.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorContainer.GetValues">
      <summary>
            Получить все значения индикатора.
            </summary>
      <returns>Все значения индикатора. Пустое множество, если значений нет.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorContainer.GetValue(System.Int32)">
      <summary>
            Получить значения индикатора по индексу.
            </summary>
      <param name="index">Порядковый номер значения с конца.</param>
      <returns>Входное и результирующие значения индикатора.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorContainer.ClearValues">
      <summary>
            Удалить все значения индикатора.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IndicatorContainer.MaxValueCount">
      <summary>
            Максимальное количество значений индикаторов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.IndicatorContainer.Count">
      <summary>
            Текущее количество сохраненных значений.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.IndicatorHelper">
      <summary>
            Вспомогательный класс для работы с исдникеаторами.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetCurrentValue``1(StockSharp.Algo.Indicators.BaseIndicator{``0})">
      <summary>
            Получить текущее значение индикатора.
            </summary>
      <typeparam name="T">Тип значения.</typeparam>
      <param name="indicator">Индикатор.</param>
      <returns>Текущее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetCurrentValue``1(StockSharp.Algo.Indicators.IIndicator)">
      <summary>
            Получить текущее значение индикатора.
            </summary>
      <typeparam name="T">Тип значения.</typeparam>
      <param name="indicator">Индикатор.</param>
      <returns>Текущее значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetValue``1(StockSharp.Algo.Indicators.BaseIndicator{``0},System.Int32)">
      <summary>
            Получить значение индикатора по индексу (0 - последнее значение).
            </summary>
      <typeparam name="T">Тип значения.</typeparam>
      <param name="indicator">Индикатор.</param>
      <param name="index">Индекс значения.</param>
      <returns>Значение индикатора.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.GetValue``1(StockSharp.Algo.Indicators.IIndicator,System.Int32)">
      <summary>
            Получить значение индикатора по индексу (0 - последнее значение).
            </summary>
      <typeparam name="T">Тип значения.</typeparam>
      <param name="indicator">Индикатор.</param>
      <param name="index">Индекс значения.</param>
      <returns>Значение индикатора.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.Process(StockSharp.Algo.Indicators.IIndicator,StockSharp.Algo.Candles.Candle)">
      <summary>
            Обновить индикатор ценой закрытия свечки <see cref="P:StockSharp.Algo.Candles.Candle.ClosePrice" />.
            </summary>
      <param name="indicator">Индикатор.</param>
      <param name="candle">Свечка.</param>
      <returns>Новое значение индикатора.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.IndicatorHelper.Process(StockSharp.Algo.Indicators.IIndicator,System.Decimal,System.Boolean)">
      <summary>
            Обновить индикатор числовым значением.
            </summary>
      <param name="indicator">Индикатор.</param>
      <param name="value">Числовое значение.</param>
      <param name="isFinal">Является ли значение окончательным (индикатор окончательно формирует свое значение и более не будет изменяться в данной точке времени). По-умолчанию true.</param>
      <returns>Новое значение индикатора.</returns>
    </member>
    <member name="T:StockSharp.Algo.Indicators.LengthIndicator`1">
      <summary>
            Базовый класс для индикаторов с одним результирующим значением и основанных на периоде.
            </summary>
      <typeparam name="TResult">Тип результирующего значение, которое возвращается через метод <see cref="M:StockSharp.Algo.Indicators.BaseIndicator`1.OnProcess(StockSharp.Algo.Indicators.IIndicatorValue)" />.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Indicators.LengthIndicator`1" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.#ctor(System.Type)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Indicators.LengthIndicator`1" />.
            </summary>
      <param name="valueType">Тип данных, которым оперирует индикатор.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.Reset">
      <summary>
            Сбросить состояние индикатора на первоначальное. Метод вызывается каждый раз, когда меняются первоначальные настройки (например, длина периода).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить настройки.
            </summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить настройки.
            </summary>
      <param name="settings">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.LengthIndicator`1.ToString">
      <summary>
            Получить строковое представление.
            </summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="P:StockSharp.Algo.Indicators.LengthIndicator`1.Length">
      <summary>
            Длина периода. По-умолчанию длина равна 1.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.LengthIndicator`1.IsFormed">
      <summary>
            Сформирован ли индикатор.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Indicators.LengthIndicator`1.Buffer">
      <summary>
            Буфер для хранения данных.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Indicators.ShiftedIndicatorValue">
      <summary>
            Смещенное значение индикатора.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ShiftedIndicatorValue.#ctor">
      <summary>
            Создать пустое <see cref="T:StockSharp.Algo.Indicators.ShiftedIndicatorValue" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ShiftedIndicatorValue.#ctor(System.Int32,StockSharp.Algo.Indicators.IIndicatorValue)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Indicators.ShiftedIndicatorValue" />.
            </summary>
      <param name="shift">Смещение значения индикатора.</param>
      <param name="value">Значение индикатора.</param>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ShiftedIndicatorValue.IsSupport(System.Type)">
      <summary>
            Поддерживает ли значение необходимый для индикатора тип данных.
            </summary>
      <param name="valueType">Тип данных, которым оперирует индикатор.</param>
      <returns>True, если тип данных поддерживается, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ShiftedIndicatorValue.GetValue``1">
      <summary>
            Получить значение по типу данных.
            </summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <returns>Значение.</returns>
    </member>
    <member name="M:StockSharp.Algo.Indicators.ShiftedIndicatorValue.SetValue``1(``0)">
      <summary>
            Изменить входное значение индикатора новым значением (например, оно получено от другого индикатора).
            </summary>
      <typeparam name="T">Тип данных, которым оперирует индикатор.</typeparam>
      <param name="value">Значение.</param>
      <returns>Измененная копия входного значения.</returns>
    </member>
    <member name="P:StockSharp.Algo.Indicators.ShiftedIndicatorValue.Shift">
      <summary>
            Смещение значения индикатора.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Licensing.ISignService">
      <summary>
            Интерфейс к сервису цифровой подписи.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Licensing.ISignService.SignExecutableFile(System.Byte[])">
      <summary>
            Подписать исполняемый файл.
            </summary>
      <param name="fileBody">Файл.</param>
      <returns>Файл с цифровой подписью.</returns>
    </member>
    <member name="T:StockSharp.Algo.Licensing.License">
      <summary>
            Лицензия.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Licensing.License.Id">
      <summary>
            Номер лицензии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Licensing.License.IssuedTo">
      <summary>
            Получатель лицензии (ФИО частного лица или название компании).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Licensing.License.IssuedDate">
      <summary>
            Дата выдачи лицензии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Licensing.License.ExpirationDate">
      <summary>
            Дата окончания действия лицензии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Licensing.License.HardwareId">
      <summary>
            Идентификатор компьютера.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Licensing.License.Features">
      <summary>
            Список доступной функциональности.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Licensing.License.Signature">
      <summary>
            Цифровая подпись.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Licensing.License.Body">
      <summary>
            Тело лицензии.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Licensing.LicenseClient">
      <summary>
            Клиент для доступа к сервису лицензирование StockSharp.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Licensing.LicenseClient.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Licensing.LicenseClient" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Licensing.LicenseClient.#ctor(System.Uri)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Licensing.LicenseClient" />.
            </summary>
      <param name="address">Адрес сервиса.</param>
    </member>
    <member name="M:StockSharp.Algo.Licensing.LicenseClient.GetTrialLicense">
      <summary>
            Получить временную лицензию.
            </summary>
      <returns>Временная лицензия.</returns>
    </member>
    <member name="M:StockSharp.Algo.Licensing.LicenseClient.GetFullLicense">
      <summary>
            Получить полную лицензию.
            </summary>
      <returns>Полная лицензия.</returns>
    </member>
    <member name="M:StockSharp.Algo.Licensing.LicenseClient.SendFullLicense">
      <summary>
            Отправить лицензию на зарегистрированный email.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Licensing.LicenseClient.Sign(System.Byte[])">
      <summary>
            Подписать исполняемый файл.
            </summary>
      <param name="fileBody">Файл.</param>
      <returns>Файл с цифровой подписью.</returns>
    </member>
    <member name="M:StockSharp.Algo.Licensing.LicenseClient.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Licensing.LicenseClient.Address">
      <summary>
            Адрес сервиса.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Licensing.ILicenseService">
      <summary>
            Интерфейс к сервису лицензий.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Licensing.ILicenseService.GetTrialLicense(System.String)">
      <summary>
            Получить временную лицензию.
            </summary>
      <param name="hardwareId">Уникальная информация о компьютере.</param>
      <returns>Временная лицензия.</returns>
    </member>
    <member name="M:StockSharp.Algo.Licensing.ILicenseService.SendFullLicense(System.String,System.String,System.String)">
      <summary>
            Отправить полную лицензию на зарегистрированный email.
            </summary>
      <param name="login">Логин.</param>
      <param name="password">Пароль.</param>
      <param name="hardwareId">Уникальная информация о компьютере.</param>
      <returns>Код результата выполнения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Licensing.ILicenseService.GetFullLicense(System.String,System.String,System.String)">
      <summary>
            Получить полную лицензию.
            </summary>
      <param name="login">Логин.</param>
      <param name="password">Пароль.</param>
      <param name="hardwareId">Уникальная информация о компьютере.</param>
      <returns>Полная лицензия.</returns>
    </member>
    <member name="M:StockSharp.Algo.Licensing.ILicenseService.SignExecutableFile(System.String,System.String,System.Byte[])">
      <summary>
            Подписать исполняемый файл.
            </summary>
      <param name="login">Логин.</param>
      <param name="password">Пароль.</param>
      <param name="fileBody">Файл.</param>
      <returns>Файл с цифровой подписью.</returns>
    </member>
    <member name="T:StockSharp.Algo.Licensing.LicenseHelper">
      <summary>
            Вспомагательный класс для работы с лицензиями.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Licensing.LicenseHelper.GetEstimatedTime(StockSharp.Algo.Licensing.License)">
      <summary>
            Получить оставшееся время действия лицензии.
            </summary>
      <param name="license">Лицензия.</param>
      <returns>Оставшееся время действия лицензии. Если лицензия истекла, то будет возвращено значение <see cref="F:System.TimeSpan.Zero" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.Licensing.LicenseHelper.IsTrial(StockSharp.Algo.Licensing.License)">
      <summary>
            Проверить является ли лицензия временной.
            </summary>
      <param name="license">Лицензия.</param>
      <returns>True, если лицензия временная, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Licensing.LicenseHelper.IsLicenseSupport(System.Type)">
      <summary>
            Проверить лицензию по типу функциональности.
            </summary>
      <param name="featureType">Тип функциональности.</param>
      <returns>True, если функциональность поддерживается, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Licensing.LicenseHelper.IsLicenseSupport(System.String)">
      <summary>
            Проверить лицензию по названию функциональности.
            </summary>
      <param name="featureName">Название функциональности.</param>
      <returns>True, если функциональность поддерживается, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Licensing.LicenseHelper.StartValidation(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Запустить проверку лицензии для стратегии.
            </summary>
      <param name="strategy">Стратегия, для котрого необходимо сделать проверку лицензии.</param>
      <returns>Описание ошибки проверки лицении.</returns>
    </member>
    <member name="M:StockSharp.Algo.Licensing.LicenseHelper.StartValidation(System.Object,System.Action)">
      <summary>
            Запустить проверку лицензии для функциональности.
            </summary>
      <param name="feature">Функциональность (может быть шлюзом, стратегий и т.д.).</param>
      <param name="failedAction">Действие, которое будет вызвано через 10 минут после ошибки проверки лицении и повторяться каждую минуту.</param>
      <returns>Описание ошибки проверки лицении.</returns>
    </member>
    <member name="M:StockSharp.Algo.Licensing.LicenseHelper.Save(StockSharp.Algo.Licensing.License)">
      <summary>
            Сохранить лицензию на диске.
            </summary>
      <param name="license">Лицензия.</param>
    </member>
    <member name="P:StockSharp.Algo.Licensing.LicenseHelper.CurrentLicense">
      <summary>
            Текущая лицензия. Если лицензия не существует, то будет возвращено null.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Notification.INotificationService">
      <summary>
            Интерфейс к сервису отправки нотификаций на телефон или почту.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Notification.INotificationService.Login(System.String,System.String)">
      <summary>
            Подключиться к сервису.
            </summary>
      <param name="login">
      </param>
      <param name="password">
      </param>
      <returns>Идентификатор сессии.</returns>
    </member>
    <member name="M:StockSharp.Algo.Notification.INotificationService.Logout(System.Guid)">
      <summary>
            Отключиться от сервиса.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
      <returns>Код результата выполнения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Notification.INotificationService.SendSms(System.Guid,System.String)">
      <summary>
            Послать SMS-сообщение.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
      <param name="message">Тело сообщения.</param>
      <returns>Код результата выполнения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Notification.INotificationService.SendEmail(System.Guid,System.String,System.String)">
      <summary>
            Послать email-сообщение.
            </summary>
      <param name="sessionId">Идентификатор сессии.</param>
      <param name="caption">Заголовок сообщения.</param>
      <param name="message">Тело сообщения.</param>
      <returns>Код результата выполнения.</returns>
    </member>
    <member name="T:StockSharp.Algo.Notification.NotificationClient">
      <summary>
            Клиент для доступа к сервису лицензирование StockSharp.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Notification.NotificationClient.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Notification.NotificationClient" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Notification.NotificationClient.#ctor(System.Uri)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Notification.NotificationClient" />.
            </summary>
      <param name="address">Адрес сервиса.</param>
    </member>
    <member name="M:StockSharp.Algo.Notification.NotificationClient.SendSms(System.String)">
      <summary>
            Послать SMS-сообщение.
            </summary>
      <param name="message">Тело сообщения.</param>
    </member>
    <member name="M:StockSharp.Algo.Notification.NotificationClient.SendEmail(System.String,System.String)">
      <summary>
            Послать email-сообщение.
            </summary>
      <param name="caption">Заголовок сообщения.</param>
      <param name="message">Тело сообщения.</param>
    </member>
    <member name="M:StockSharp.Algo.Notification.NotificationClient.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Notification.NotificationClient.Address">
      <summary>
            Адрес сервиса.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.DataFeedTrader">
      <summary>
            Эмуляционный шлюз. Использует исторические данные и/или случайно сгенерированные.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.BaseTrader">
      <summary>
            Базовый класс для создания шлюзов к торговым системам.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.#ctor(Ecng.Interop.Platforms,System.Boolean)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.BaseTrader" />.
            </summary>
      <param name="platform">Разрядность процесса, в котором может работать шлюз.</param>
      <param name="checkLicense">Проверять наличие лицензии.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetMarketTime(StockSharp.BusinessEntities.Exchange)">
      <summary>
            Получить биржевое время.
            </summary>
      <param name="exchange">Биржа.</param>
      <returns>Биржевое время.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.Connect">
      <summary>
            Подключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnConnect">
      <summary>
            Подключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.Disconnect">
      <summary>
            Отключиться от торговой системы.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnDisconnect">
      <summary>
            Отключиться от торговой системы.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.Reconnect">
      <summary>
            Переподключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetPosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security,System.String)">
      <summary>
            Получить позицию по портфелю и инструменту.
            </summary>
      <param name="portfolio">Портфель, по которому нужно найти позицию.</param>
      <param name="security">Инструмент, по которому нужно найти позицию.</param>
      <param name="depoName">Название депозитария, где находится физически ценная бумага.
            По-умолчанию передается пустая строка, что означает суммарную позицию по всем депозитариям.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить стакан котировок.
            </summary>
      <param name="security">Инструмент, по которому нужно получить стакан.</param>
      <returns>Стакан котировок.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку на бирже.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,System.Decimal,System.Decimal)">
      <summary>
            Перерегистрировать заявку на бирже.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять и на основе нее зарегистрировать новую.</param>
      <param name="price">Цена новой заявки.</param>
      <param name="volume">Объем новой заявки.</param>
      <returns>Новая заявка.</returns>
      <remarks>
            Если объём не задан, меняется только цена.
            </remarks>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку на бирже.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять.</param>
      <param name="newOrder">Новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.ReRegisterOrderPair(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать пару заявок на бирже.
            </summary>
      <param name="oldOrder1">Первая заявка, которую нужно снять.</param>
      <param name="newOrder1">Первая новая заявка, которую нужно зарегистрировать.</param>
      <param name="oldOrder2">Вторая заявка, которую нужно снять.</param>
      <param name="newOrder2">Вторая новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку на бирже.
            </summary>
      <param name="order">Заявка, которую нужно отменять.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.InitNewOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Инициализировать новую заявку номером транзакции, информацией о шлюзе и т.д.
            </summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnRegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку на бирже.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку на бирже.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять.</param>
      <param name="newOrder">Новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnReRegisterOrderPair(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать пару заявок на бирже.
            </summary>
      <param name="oldOrder1">Первая заявка, которую нужно снять.</param>
      <param name="newOrder1">Первая новая заявка, которую нужно зарегистрировать.</param>
      <param name="oldOrder2">Вторая заявка, которую нужно снять.</param>
      <param name="newOrder2">Вторая новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnCancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку на бирже.
            </summary>
      <param name="order">Заявка, которую нужно отменять.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.CancelOrders(System.Nullable{System.Boolean},StockSharp.BusinessEntities.Portfolio,System.Nullable{StockSharp.BusinessEntities.OrderDirections},System.String,StockSharp.BusinessEntities.Security)">
      <summary>
            Отменить группу заявок на бирже по фильтру.
            </summary>
      <param name="isStopOrder">True, если нужно отменить только стоп-заявки, false - если только обычный и null - если оба типа.</param>
      <param name="portfolio">Портфель. Если значение равно null, то портфель не попадает в фильтр снятия заявок.</param>
      <param name="direction">Направление заявки. Если значение равно null, то направление не попадает в фильтр снятия заявок.</param>
      <param name="classCode">Код класса. Если переданная строка пустая, то код не попадает в фильтр снятия заявок.</param>
      <param name="security">Инструмент. Если значение равно null, то инструмент не попадает в фильтр снятия заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать новую информацию (например, <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" /> или <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать новую информацию (например, <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" /> или <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.UnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение новой информации.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnUnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение новой информации.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RegisterMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать котировки (стакан) по инструменту.
            Значение котировок можно получить через метод <see cref="M:StockSharp.BusinessEntities.ITrader.GetMarketDepth(StockSharp.BusinessEntities.Security)" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать котировки.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnRegisterMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать котировки (стакан) по инструменту.
            Значение котировок можно получить через метод <see cref="M:StockSharp.BusinessEntities.ITrader.GetMarketDepth(StockSharp.BusinessEntities.Security)" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать котировки.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.UnRegisterMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение котировок по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение котировок.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnUnRegisterMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение котировок по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение котировок.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать сделки (тиковые данные) по инструменту. Новые сделки будут приходить через
            событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewTrades" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnRegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать сделки (тиковые данные) по инструменту. Новые сделки будут приходить через
            событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewTrades" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.UnRegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение сделок (тиковые данные) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnUnRegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение сделок (тиковые данные) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Начать получать новую информацию по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Начать получать новую информацию по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.UnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Остановить получение новой информации по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnUnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Остановить получение новой информации по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RegisterOrderLog(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать лог заявок для инструмента.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать лог заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnRegisterOrderLog(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать лог заявок для инструмента.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать лог заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.UnRegisterOrderLog(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение лога заявок для инструмента.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.OnUnRegisterOrderLog(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение лога заявок для инструмента.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.IsSupport(StockSharp.BusinessEntities.Security)">
      <summary>
            Поддерживает ли шлюз инструмент.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>True, если шлюз поддерживает инструмент, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.ProcessEvents(System.Action)">
      <summary>
            Обработать поступившие из шлюза данные. Всю обработку полученных данных необходимо провести в функции, передающаяся в качестве аргумента handler.
            По окончанию выполнения будут вызваны событие о новых изменения (например, таких как <see cref="E:StockSharp.Algo.BaseTrader.NewSecurities" /> или <see cref="E:StockSharp.Algo.BaseTrader.OrdersChanged" />).
            </summary>
      <param name="handler">Функция, в которой необходимо обработать поступившие данные.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseOrderFailed(StockSharp.BusinessEntities.Order,System.Exception,System.Boolean)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.OrdersRegisterFailed" />, <see cref="E:StockSharp.Algo.BaseTrader.OrdersCancelFailed" />, <see cref="E:StockSharp.Algo.BaseTrader.StopOrdersRegisterFailed" /> или <see cref="E:StockSharp.Algo.BaseTrader.StopOrdersRegisterFailed" /> 
            в зависимости от типа и биржевого номера заявки <see cref="P:StockSharp.BusinessEntities.OrderFail.Order" />.
            </summary>
      <param name="order">Заявка, которая не была принята торговой системой.</param>
      <param name="exception">Системная информация об ошибке.</param>
      <param name="changeState">Можно ли перевести состояние заявки в <see cref="F:StockSharp.BusinessEntities.OrderStates.Failed" />. По-умолчанию равно true.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseOrderFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.OrdersRegisterFailed" />, <see cref="E:StockSharp.Algo.BaseTrader.OrdersCancelFailed" />, <see cref="E:StockSharp.Algo.BaseTrader.StopOrdersRegisterFailed" /> или <see cref="E:StockSharp.Algo.BaseTrader.StopOrdersRegisterFailed" /> 
            в зависимости от типа и биржевого номера заявки <see cref="P:StockSharp.BusinessEntities.OrderFail.Order" />.
            </summary>
      <param name="fail">Описание ошибки.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewMyTrades" />.
            </summary>
      <param name="trades">Мои сделки, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewTrade(StockSharp.BusinessEntities.Trade)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewTrades" />.
            </summary>
      <param name="trade">Cделка, которую нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewTrades" />.
            </summary>
      <param name="trades">Cделки, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="M:StockSharp.Algo.BaseTrader.RaiseNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})" /> или <see cref="M:StockSharp.Algo.BaseTrader.RaiseNewStopOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})" /> в зависимости от типа заявки.
            </summary>
      <param name="order">Заявка, которая была зарегистрирована в торговой системе.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseOrderChanged(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="M:StockSharp.Algo.BaseTrader.RaiseOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})" /> или <see cref="M:StockSharp.Algo.BaseTrader.RaiseStopOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})" /> в зависимости от типа заявки.
            </summary>
      <param name="order">Заявка, которая была изменена торговой системой.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewOrders" />.
            </summary>
      <param name="orders">Заявки, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewStopOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewStopOrders" />.
            </summary>
      <param name="stopOrders">Стоп-заявки, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.OrdersChanged" />.
            </summary>
      <param name="orders">Заявки, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseStopOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.StopOrdersChanged" />.
            </summary>
      <param name="stopOrders">Стоп-заявки, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseOrdersRegisterFailed(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderFail})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.OrdersRegisterFailed" />.
            </summary>
      <param name="fails">Информация об ошибках, которую нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseOrdersCancelFailed(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderFail})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.OrdersCancelFailed" />.
            </summary>
      <param name="fails">Информация об ошибках, которую нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseStopOrdersRegisterFailed(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderFail})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.StopOrdersRegisterFailed" />.
            </summary>
      <param name="fails">Информация об ошибках, которую нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseStopOrdersCancelFailed(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderFail})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.StopOrdersCancelFailed" />.
            </summary>
      <param name="fails">Информация об ошибках, которую нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewSecurities(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewSecurities" />.
            </summary>
      <param name="securities">Инструменты, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseSecuritiesChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.SecuritiesChanged" />.
            </summary>
      <param name="securities">Инструменты, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseSecurityChanged(StockSharp.BusinessEntities.Security)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.SecuritiesChanged" />.
            </summary>
      <param name="security">Инструмент, который нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewPortfolios(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewPortfolios" />.
            </summary>
      <param name="portfolios">Портфели, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaisePortfoliosChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.PortfoliosChanged" />.
            </summary>
      <param name="portfolios">Портфели, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewPositions(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewPositions" />.
            </summary>
      <param name="positions">Позиции, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaisePositionsChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.PositionsChanged" />.
            </summary>
      <param name="positions">Позиции, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewMarketDepths(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MarketDepth})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewMarketDepths" />.
            </summary>
      <param name="marketDepths">Стаканы, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseMarketDepthsChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MarketDepth})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.MarketDepthsChanged" />.
            </summary>
      <param name="marketDepths">Стаканы, которые нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseMarketDepthChanged(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.MarketDepthsChanged" />.
            </summary>
      <param name="marketDepth">Стакан, который нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewOrderLogItem(StockSharp.BusinessEntities.OrderLogItem)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewOrderLogItems" />.
            </summary>
      <param name="item">Строчка лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewOrderLogItems(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderLogItem})">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewOrderLogItems" />.
            </summary>
      <param name="items">Строчки лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseConnected">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.Connected" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseDisconnected">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.Disconnected" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseConnectionError(System.Exception)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.ConnectionError" />.
            </summary>
      <param name="exception">Ошибка соединения.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseProcessDataError(System.Exception)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.ProcessDataError" />.
            </summary>
      <param name="exception">Ошибка обработки данных.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseNewDataExported">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.NewDataExported" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseConnectionRestored">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.ReConnectionSettings.ConnectionRestored" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseConnectionAttemptError(System.Exception)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.ReConnectionSettings.ConnectionAttemptError" />.
            </summary>
      <param name="exception">Ошибка соединения.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseExportTimeOut">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.ReConnectionSettings.ExportTimeOut" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.RaiseMarketTimeChanged(System.TimeSpan)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.BaseTrader.MarketTimeChanged" />.
            </summary>
      <param name="diff">Разница во времени, прошедшее с последнего вызова события. Первый раз событие передает значение <see cref="F:System.TimeSpan.Zero" />.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetSecurity(System.String,System.Func{StockSharp.BusinessEntities.Security,System.Boolean})">
      <summary>
            Получить инструмент по коду. Если инструмент не найден, то для создания инструмента вызывается <see cref="M:StockSharp.Algo.IEntityFactory.CreateSecurity(System.String)" />.
            </summary>
      <param name="id">Идентификатор инструмента.</param>
      <param name="changeSecurity">Обработчик, изменяющий инструмент. Возвращает true, если инструмент был изменен, и необходимо вызвать <see cref="E:StockSharp.BusinessEntities.ITrader.SecuritiesChanged" />.</param>
      <returns>Инструмент.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetSecurity(System.String,System.Func{System.String,StockSharp.BusinessEntities.Security},System.Func{StockSharp.BusinessEntities.Security,System.Boolean})">
      <summary>
            Получить инструмент по коду. Если инструмент не найден, то для создания инструмента вызывается <paramref name="createSecurity" />.
            </summary>
      <param name="id">Идентификатор инструмента.</param>
      <param name="createSecurity">Обработчик, создающий инструмент.</param>
      <param name="changeSecurity">Обработчик, изменяющий инструмент. Возвращает true, если инструмент был изменен, и необходимо вызвать <see cref="E:StockSharp.BusinessEntities.ITrader.SecuritiesChanged" />.</param>
      <returns>Инструмент.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.AddNativeSecurityId(StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Добавить ассоциацию между инструментов и его идентификатором в торговой системе.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="nativeSecurityId">Идентификатор инструмента, используемый в торговой системе (например, число или <see cref="T:System.Guid" />).</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetNativeId(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить идентификатор инструмента в торговой системе.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Идентификатор инструмента, используемый в торговой системе (например, число или <see cref="T:System.Guid" />).</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.UpdatePosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security,System.Func{StockSharp.BusinessEntities.Position,System.Boolean})">
      <summary>
            Обновить позицию по портфелю и инструменту.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо получить позицию.</param>
      <param name="security">Инструмент, по которому необходимо получить позицию.</param>
      <param name="changePosition">Обработчик, изменяющий позицию. Возвращает true, если позиция была изменена, и необходимо вызвать <see cref="E:StockSharp.BusinessEntities.ITrader.PositionsChanged" />.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.UpdatePosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security,System.String,System.Func{StockSharp.BusinessEntities.Position,System.Boolean})">
      <summary>
            Обновить позицию по портфелю и инструменту.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо получить позицию.</param>
      <param name="security">Инструмент, по которому необходимо получить позицию.</param>
      <param name="depoName">Название депозитария, где находится физически ценная бумага.
            По-умолчанию передается пустая строка, что означает суммарную позицию по всем депозитариям.</param>
      <param name="changePosition">Обработчик, изменяющий позицию. Возвращает true, если позиция была изменена, и необходимо вызвать <see cref="E:StockSharp.BusinessEntities.ITrader.PositionsChanged" />.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetTrade(StockSharp.BusinessEntities.Security,System.Int64,System.Func{System.Int64,StockSharp.BusinessEntities.Trade})">
      <summary>
            Получить сделку по инструменту и номеру. Если сделка не зарегистрирована, то она создается через <paramref name="createTrade" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="id">Номер сделки.</param>
      <param name="createTrade">Обработчик, создающий сделку.</param>
      <returns>Сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetOrder(StockSharp.BusinessEntities.Security,System.Int64,System.Func{System.Int64,StockSharp.BusinessEntities.Order},System.Func{StockSharp.BusinessEntities.Order,System.Boolean})">
      <summary>
            Получить заявку по инструменту и номеру. Если заявка не зарегистрирована, то она создается через <paramref name="createOrder" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="id">Номер заявки.</param>
      <param name="createOrder">Обработчик, создающий заявку.</param>
      <param name="changeOrder">Обработчик, изменяющий заявку. Возвращает true, если заявка была изменена, и необходимо вызвать <see cref="E:StockSharp.BusinessEntities.ITrader.OrdersChanged" />.</param>
      <returns>Заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.AddMyTrade(StockSharp.BusinessEntities.Security,System.Int64,System.Int64,StockSharp.BusinessEntities.Trade)">
      <summary>
            Добавить собственную сделку на основе информации об инструменте, тиковой сделке и номере заявки. Если заявка с указанным номером
            <paramref name="orderId" /> отсутствует, то информация о сделке сохраняется до тех пор, пока не будет получена необходимая заявка.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="orderId">Номер заявки. Если передается нулевое значение, то заявка будет искаться по <paramref name="orderTransactionId" />.</param>
      <param name="orderTransactionId">Номер транзакции заявки. Если передается нулевое значение, то заявка будет искаться по <paramref name="orderId" />.</param>
      <param name="trade">Тиковая сделка.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.AddMyTrade(StockSharp.BusinessEntities.Security,System.Int64,System.Int64,System.Int64,System.Func{System.Int64,StockSharp.BusinessEntities.Trade},System.Action{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Добавить собственную сделку на основе информации об инструменте, тиковой сделке и номере заявки. Если заявка с указанным номером
            <paramref name="orderId" /> отсутствует, то информация о сделке сохраняется до тех пор, пока не будет получена необходимая заявка.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="orderId">Номер заявки. Если передается нулевое значение, то заявка будет искаться по <paramref name="orderTransactionId" />.</param>
      <param name="orderTransactionId">Номер транзакции заявки. Если передается нулевое значение, то заявка будет искаться по <paramref name="orderId" />.</param>
      <param name="tradeId">Номер сделки.</param>
      <param name="createTrade">Обработчик, создающий тиковую сделку, если она отсутствует в момент получения моей сделки.</param>
      <param name="initMyTrade">Обработчик, изменяющий мою сделку.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetPortfolio(System.String)">
      <summary>
            Получить портфель по названию. Если портфель не найден, то создается объект <see cref="T:StockSharp.BusinessEntities.Portfolio" />,
            и инициализируется свойство <see cref="P:StockSharp.BusinessEntities.Portfolio.Name" /> значением, переданным в name.
            </summary>
      <param name="name">Название портфеля.</param>
      <returns>Портфель.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetPortfolio(System.String,System.Func{StockSharp.BusinessEntities.Portfolio,System.Boolean})">
      <summary>
            Получить портфель по названию. Если портфель не зарегистрирован, то он создается через <see cref="M:StockSharp.Algo.IEntityFactory.CreatePortfolio(System.String)" />.
            </summary>
      <param name="name">Название портфеля.</param>
      <param name="changePortfolio">Обработчик, изменяющий портфель.</param>
      <returns>Портфель.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetPortfolio(System.String,System.Func{System.String,StockSharp.BusinessEntities.Portfolio},System.Func{StockSharp.BusinessEntities.Portfolio,System.Boolean})">
      <summary>
            Получить портфель по названию. Если портфель не зарегистрирован, то он создается через <paramref name="createPortfolio" />.
            </summary>
      <param name="name">Название портфеля.</param>
      <param name="createPortfolio">Обработчик, создающий портфель.</param>
      <param name="changePortfolio">Обработчик, изменяющий портфель. Возвращает true, если портфель был изменен, и необходимо вызвать <see cref="E:StockSharp.BusinessEntities.ITrader.PortfoliosChanged" />.</param>
      <returns>Портфель.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetOrderByTransactionId(System.Int64)">
      <summary>
            Получить заявку по номеру транзакции <see cref="P:StockSharp.BusinessEntities.Order.TransactionId" />.
            </summary>
      <param name="transactionId">Номер транзакции.</param>
      <returns>Заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetStopOrderByTransactionId(System.Int64)">
      <summary>
            Получить стоп-заявку по номеру транзакции <see cref="P:StockSharp.BusinessEntities.Order.TransactionId" />.
            </summary>
      <param name="transactionId">Номер транзакции.</param>
      <returns>Стоп-заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.AddDerivedOrder(StockSharp.BusinessEntities.Security,System.Int64,StockSharp.BusinessEntities.Order,System.Action{StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order})">
      <summary>
            Добавить ассоциацию между номером обычной заявки и стоп-заявкой. Необходимо использовать, когда заявки и стоп-заявки приходят
            в разных потоках, и стоп-заявка с информацией о производной заявке пришла раньше, чем сама заявка.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="derivedOrderId">Номер производной заявки.</param>
      <param name="stopOrder">Стоп-заявка.</param>
      <param name="handler">Обработчик, который будет вызван, как только придет информация о производной заявке.
            Первым параметром идет стоп-заявка, вторым - производная.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.CreateSecurityId(System.String,System.String)">
      <summary>
            Сгенерировать <see cref="P:StockSharp.BusinessEntities.Security.Id" /> инструмента.
            </summary>
      <param name="secCode">Код инструмента.</param>
      <param name="secClass">Класс инструмента.</param>
      <returns>
        <see cref="P:StockSharp.BusinessEntities.Security.Id" /> инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.GetSecurityClassInfo(System.String)">
      <summary>
            Получить описание инструмента по классу из <see cref="P:StockSharp.Algo.BaseTrader.SecurityClassInfo" />.
            </summary>
      <param name="secClass">Класс инструмента.</param>
      <returns>Описание инструмента. Если класс не найден в <see cref="P:StockSharp.Algo.BaseTrader.SecurityClassInfo" />, то будет возвращено значение <see cref="P:StockSharp.Algo.BaseTrader.DefaultSecurityClassInfo" />.</returns>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.ProcessSecurityAction(System.String,System.Object,System.Action{StockSharp.BusinessEntities.Security},System.Boolean)">
      <summary>
            Обработать действие, ассоциированное с инструментом.
            </summary>
      <remarks>Необходимо в том случае, если информация по инструментам получается позднее, чем требуется обработка действия с инструментом.
            Например, позиция по инструменту пришла раньше, чем сама информация об инструменте.</remarks>
      <param name="securityId">Идентификатор инструмента <see cref="P:StockSharp.BusinessEntities.Security.Id" />. Можеть быть null, если ассоциация идет через <paramref name="nativeSecurityId" />.</param>
      <param name="nativeSecurityId">Идентификатор инструмента, используемый в торговой системе (например, число или <see cref="T:System.Guid" />). Можеть быть null, если ассоциация идет через <paramref name="securityId" />.</param>
      <param name="action">Действие.</param>
      <param name="ignoreIfNotExist">Не обрабатывать действие, если инструмент не найден.
            True, если обработка не требуется в случае отсутствия инструмента, иначе, false, и действие будет вызвано при появлении инструмента.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.StartMarketTimeExport">
      <summary>
            Начать экспорт события об изменении времени.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.StopMarketTimeExport">
      <summary>
            Завершить экспорт события об изменении времени.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.StartExport">
      <summary>
            Запустить экспорт данных из торговой системы в программу (получение портфелей, инструментов, заявок и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.StopExport">
      <summary>
            Остановить экспорт данных из торговой системы в программу, запущенный через <see cref="M:StockSharp.BusinessEntities.ITrader.StartExport" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.ReStartExport">
      <summary>
            Перезапустить экспорт данных из торговой системы через методы <see cref="M:StockSharp.BusinessEntities.ITrader.StopExport" /> и <see cref="M:StockSharp.BusinessEntities.ITrader.StartExport" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.ClearPositions">
      <summary>
            Очистить позиции <see cref="P:StockSharp.Algo.BaseTrader.Positions" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.DisposeManaged">
      <summary>
            Освободить занятые ресурсы. В частности, отключиться от торговой системы через <see cref="M:StockSharp.Algo.BaseTrader.Disconnect" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить настройки.
            </summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.BaseTrader.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить настройки.
            </summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.Platform">
      <summary>
            Разрядность процесса, в котором может работать шлюз.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.ReConnectionSettings">
      <summary>
            Настройки переподсоединения <see cref="T:StockSharp.BusinessEntities.ITrader" /> к торговой системе.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.EntityFactory">
      <summary>
            Фабрика бизнес-сущностей (<see cref="T:StockSharp.BusinessEntities.Security" />, <see cref="T:StockSharp.BusinessEntities.Order" /> и т.д.).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.TradesKeepTime">
      <summary>
            Время хранения тиковых сделок в памяти.
            По-умолчанию равно 2-ум дням. Если значение установлено в <see cref="F:System.TimeSpan.Zero" />, то сделки не будут удаляться.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.MarketTimeChangedInterval">
      <summary>
            Интервал вызова события <see cref="E:StockSharp.Algo.BaseTrader.MarketTimeChanged" />.
            </summary>
      <remarks>
            Значение по умолчанию равно 10 миллисекундам.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.DisplayName">
      <summary>
            Текстовое описание шлюза.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewMyTrades">
      <summary>
            Событие появления собственных новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewTrades">
      <summary>
            Событие появления всех новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewOrders">
      <summary>
            Событие появления новых заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewStopOrders">
      <summary>
            Событие появления новых стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.OrdersChanged">
      <summary>
            Событие изменения состояния заявок (снята, удовлетворена).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.StopOrdersChanged">
      <summary>
            Событие изменения стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.OrdersRegisterFailed">
      <summary>
            Событие об ошибках, связанных с регистрацией заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.OrdersCancelFailed">
      <summary>
            Событие об ошибках, связанных со снятием заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.StopOrdersRegisterFailed">
      <summary>
            Событие об ошибках, связанных с регистрацией стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.StopOrdersCancelFailed">
      <summary>
            Событие об ошибках, связанных со снятием стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewSecurities">
      <summary>
            Событие появления новых инструментов.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.SecuritiesChanged">
      <summary>
            Событие изменения параметров инструментов.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewPortfolios">
      <summary>
            Событие появления новых портфелей.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.PortfoliosChanged">
      <summary>
            Событие изменения параметров портфелей.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewPositions">
      <summary>
            Событие появления новых позиций.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.PositionsChanged">
      <summary>
            Событие изменения параметров позиций.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewMarketDepths">
      <summary>
            Событие появления новых стаканов с котировками.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.MarketDepthsChanged">
      <summary>
            Событие изменения стаканов с котировками.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewOrderLogItems">
      <summary>
            Событие появления новых записей в логе заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.MarketTimeChanged">
      <summary>
            Событие, сигнализирующее об изменении текущего времени на биржевых площадках <see cref="P:StockSharp.BusinessEntities.ITrader.ExchangeBoards" />.
            Передается разница во времени, прошедшее с последнего вызова события. Первый раз событие передает значение <see cref="F:System.TimeSpan.Zero" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.Connected">
      <summary>
            Событие успешного подключения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.Disconnected">
      <summary>
            Событие успешного отключения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.ConnectionError">
      <summary>
            Событие ошибки подключения (например, соединения было разорвано).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.ProcessDataError">
      <summary>
            Событие, сигнализирующее об ошибке при получении или обработке новых данных с сервера.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BaseTrader.NewDataExported">
      <summary>
            Событие, сигнализирующее об ошибке при получении или обработке новых данных с сервера.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.TransactionIdGenerator">
      <summary>
            Генератор идентификаторов транзакций.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.SecurityIdGenerator">
      <summary>
            Генератор идентификаторов инструментов <see cref="P:StockSharp.BusinessEntities.Security.Id" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.DefaultSecurityClassInfo">
      <summary>
            Описания класса инструмента по умолчанию.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.SecurityClassInfo">
      <summary>
            Описание классов инструментов, в зависимости от которых будут проставляться параметры в <see cref="P:StockSharp.BusinessEntities.Security.Type" /> и <see cref="P:StockSharp.BusinessEntities.Security.ExchangeBoard" />.
            Если информация по классу отсутствует, то будет поставлены значения <see cref="F:StockSharp.BusinessEntities.SecurityTypes.Stock" /> и <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.Micex" /> соответственно.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.ExchangeBoards">
      <summary>
            Список всех биржевых площадок, для которых загружены инструменты <see cref="P:StockSharp.BusinessEntities.ITrader.Securities" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.Securities">
      <summary>
            Список всех загруженных инструментов.
            Вызывать необходимо после того, как пришло событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewSecurities" />. Иначе будет возвращено постое множество.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.Orders">
      <summary>
            Получить все заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.StopOrders">
      <summary>
            Получить все стоп-заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.OrderRegisterFails">
      <summary>
            Получить все ошибки при регистрации заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.OrderCancelFails">
      <summary>
            Получить все ошибки при снятии заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.Trades">
      <summary>
            Получить все сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.MyTrades">
      <summary>
            Получить все собственные сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.Portfolios">
      <summary>
            Получить все портфели.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.Positions">
      <summary>
            Получить все позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.IsConnected">
      <summary>
            Проверить соединение.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.IsExportStarted">
      <summary>
            Запущен ли экспорт. Экспорт запускается через метод <see cref="M:StockSharp.Algo.BaseTrader.StartExport" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.IsSupportAtomicReRegister">
      <summary>
            Поддерживается ли перерегистрация заявок через метод <see cref="M:StockSharp.BusinessEntities.ITrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)" />
            в виде одной транзакции. По-умолчанию включено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.RegisteredSecurities">
      <summary>
            Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.BusinessEntities.ITrader.RegisterSecurity(StockSharp.BusinessEntities.Security)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.RegisteredMarketDepths">
      <summary>
            Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.BusinessEntities.ITrader.RegisterMarketDepth(StockSharp.BusinessEntities.Security)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.RegisteredTrades">
      <summary>
            Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.BusinessEntities.ITrader.RegisterTrades(StockSharp.BusinessEntities.Security)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.RegisteredOrderLogs">
      <summary>
            Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.BusinessEntities.ITrader.RegisterOrderLog(StockSharp.BusinessEntities.Security)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.RegisteredPortfolios">
      <summary>
            Список всех портфелей, зарегистрированных через <see cref="M:StockSharp.BusinessEntities.ITrader.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.CreateDepthFromOrdersLog">
      <summary>
            Использовать лог заявок (orders log) для создания стаканов. По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.CreateTradesFromOrdersLog">
      <summary>
            Использовать лог заявок (orders log) для создания тиковых сделок. По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.UpdateSecurityOnEachEvent">
      <summary>
            Обновлять <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" />, <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />, <see cref="P:StockSharp.BusinessEntities.Security.BestAsk" /> на каждом обновлении стакана и/или сделок.
            По умолчанию true.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BaseTrader.DataErrorCount">
      <summary>
            Число ошибок, переданное через событие <see cref="E:StockSharp.Algo.BaseTrader.ProcessDataError" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.IEmulationTrader">
      <summary>
            Интерфейс шлюза-эмулятора биржи.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.IEmulationTrader.Start(System.DateTime,System.DateTime)">
      <summary>
            Начать эмуляцию.
            </summary>
      <param name="startTime">Время в истории, с которого начать эмуляцию.</param>
      <param name="stopTime">Время в истории, на котором закончить эмуляцию.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.IEmulationTrader.Stop">
      <summary>
            Остановить эмуляцию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.IEmulationTrader.Suspend">
      <summary>
            Приостановить эмуляцию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.IEmulationTrader.Resume">
      <summary>
            Возобновить эмуляцию.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IEmulationTrader.State">
      <summary>
            Состояние эмулятора.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IEmulationTrader.StateChanged">
      <summary>
            Событие о изменении состояния эмулятора <see cref="P:StockSharp.Algo.Testing.IEmulationTrader.State" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.#ctor(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.EmulationTrader" />.
            </summary>
      <param name="securities">Инструменты, которые будут переданы через событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewSecurities" />.</param>
      <param name="portfolios">Портфели, которые будут переданы через событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewPortfolios" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.#ctor(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio},StockSharp.Algo.Storages.IStorageRegistry)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.EmulationTrader" />.
            </summary>
      <param name="securities">Инструменты, с которыми будет вестись работа.</param>
      <param name="portfolios">Портфели, с которыми будет вестись работа.</param>
      <param name="storageRegistry">Хранилище данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.StartMarketTimeExport">
      <summary>
            Начать экспорт события об изменении времени.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.GetMarketTime(StockSharp.BusinessEntities.Exchange)">
      <summary>
            Получить биржевое время.
            </summary>
      <param name="exchange">Биржа.</param>
      <returns>Биржевое время.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.StartExport">
      <summary>
            Запустить экспорт данных из торговой системы в программу (получение портфелей, инструментов, заявок и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.Start(System.DateTime,System.DateTime)">
      <summary>
            Начать эмуляцию.
            </summary>
      <param name="startDate">Дата в истории, с которой необходимо начать эмуляцию.</param>
      <param name="stopDate">Дата в истории, на которой необходимо закончить эмуляцию (дата включается).</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.Stop">
      <summary>
            Остановить эмуляцию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.Suspend">
      <summary>
            Приостановить эмуляцию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.Resume">
      <summary>
            Возобновить эмуляцию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.OnRegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку на бирже.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.OnCancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку на бирже.
            </summary>
      <param name="order">Заявка, которую нужно отменять.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.OnReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку.
            </summary>
      <param name="oldOrder">Старая заявка.</param>
      <param name="newOrder">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.RegisterTrades(StockSharp.Algo.Testing.TradeGenerator)">
      <summary>
            Зарегистрировать генератор сделок.
            </summary>
      <param name="generator">Генератор сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.UnRegisterTrades(StockSharp.Algo.Testing.TradeGenerator)">
      <summary>
            Удалить генератор сделок, ранее зарегистрированный через <see cref="M:StockSharp.Algo.Storages.DataFeedTrader.RegisterTrades(StockSharp.Algo.Testing.TradeGenerator)" />.
            </summary>
      <param name="generator">Генератор сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.RegisterMarketDepth(StockSharp.Algo.Testing.MarketDepthGenerator)">
      <summary>
            Зарегистрировать генератор стаканов.
            </summary>
      <param name="generator">Генератор стаканов.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.UnRegisterMarketDepth(StockSharp.Algo.Testing.MarketDepthGenerator)">
      <summary>
            Удалить генератор стаканов, ранее зарегистрированный через <see cref="M:StockSharp.Algo.Storages.DataFeedTrader.RegisterMarketDepth(StockSharp.Algo.Testing.MarketDepthGenerator)" />.
            </summary>
      <param name="generator">Генератор стаканов.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.RegisterOrderLog(StockSharp.Algo.Testing.OrderLogGenerator)">
      <summary>
            Зарегистрировать генератор лога заявок.
            </summary>
      <param name="generator">Генератор лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.UnRegisterOrderLog(StockSharp.Algo.Testing.OrderLogGenerator)">
      <summary>
            Удалить генератор лога заявок, ранее зарегистрированный через <see cref="M:StockSharp.Algo.Storages.DataFeedTrader.RegisterOrderLog(StockSharp.Algo.Testing.OrderLogGenerator)" />.
            </summary>
      <param name="generator">Генератор лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.RaiseMarketDepthChanged(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.BusinessEntities.ITrader.MarketDepthsChanged" />.
            </summary>
      <param name="marketDepth">Стакан, который нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.DataFeedTrader.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.SecurityChangedInterval">
      <summary>
            Период аггрегации изменений инструмента. Значение TimeSpan.Zero соответствует отсутствию аггрегации.
            При большем периоде тестирование будет идти быстрее, но обновления полей Security будет с задержкой.
            Значение по умолчанию TimeSpan.Zero.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.LoadedEventCount">
      <summary>
            Число загруженных событий.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.ProcessedEventCount">
      <summary>
            Число обработанных событий.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.State">
      <summary>
            Состояние эмулятора.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Storages.DataFeedTrader.StateChanged">
      <summary>
            Событие о изменении состояния эмулятора <see cref="P:StockSharp.Algo.Storages.DataFeedTrader.State" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Storages.DataFeedTrader.NewMessage">
      <summary>
            Событие обработки нового сообщения <see cref="T:StockSharp.Algo.Testing.Message" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.StorageRegistry">
      <summary>
            Хранилище данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.Drive">
      <summary>
            Хранилище, которое используется по-умолчанию. По умолчанию используется <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.HistoricalQueue">
      <summary>
            Очередь исторических данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.IsSupportAtomicReRegister">
      <summary>
            Поддерживается ли перерегистрация заявок через метод <see cref="M:StockSharp.BusinessEntities.ITrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)" />
            в виде одной транзакции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.PostTradeMarketTimeChangedCount">
      <summary>
            Количество вызовов события <see cref="E:StockSharp.BusinessEntities.ITrader.MarketTimeChanged" /> после окончания торгов. По-умолчанию равно 2.
            </summary>
      <remarks>
            Необходимо для активации пост-трейд правил (правила, которые опираются на события, происходящие после окончания торгов).
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.IsFinished">
      <summary>
            Закончил ли эмулятор свою работу по причине окончания данных или он был прерван через метод <see cref="M:StockSharp.Algo.Storages.DataFeedTrader.Stop" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.UseMarketDepth">
      <summary>
            Загружать ли и использовать ли стаканы. 
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.UseOrderLog">
      <summary>
            Загружать ли и использовать ли ордерлог. 
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.UseCandlesTimeFrame">
      <summary>
            Использовать свечи с заданным тайм-фреймом. Если тайм-фрейм равен <see cref="F:System.TimeSpan.Zero" />, свечи не используются.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.UseSecurityChanges">
      <summary>
            Использовать ли изменения инструментов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.DisplayName">
      <summary>
            Текстовое описание шлюза.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.DataFeedTrader.CurrentTime">
      <summary>
            Текущее время, которое будет передано в <see cref="P:StockSharp.Logging.LogMessage.Time" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.SecurityChangeContainer">
      <summary>
            Контейнер для накопления изменений по инструментам для последующего доступа к изменениям как к историческим данным.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityChangeContainer.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.SecurityChangeContainer" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityChangeContainer.GetInfo(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить контейнер для конкретного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Контейнер.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityChangeContainer.ProcessSecurities(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>
            Обработать измененные инструменты.
            </summary>
      <param name="securities">Измененные инструменты.</param>
    </member>
    <member name="P:StockSharp.Algo.Storages.SecurityChangeContainer.ChangesKeepTime">
      <summary>
            Время хранения изменений в памяти. По-умолчанию равно 1-му дню.
            </summary>
      <remarks>Если значение установлено в <see cref="F:System.TimeSpan.Zero" />, то изменения не будут удаляться.</remarks>
    </member>
    <member name="T:StockSharp.Algo.Storages.SecurityChangeContainer.SecurityInfo">
      <summary>
            Контейнер для конкретного инструмента.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityChangeContainer.SecurityInfo.GetCount">
      <summary>
            Получить количество всех хранящихся изменений.
            </summary>
      <returns>Количество хранящихся изменений.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityChangeContainer.SecurityInfo.GetCount(StockSharp.Algo.Storages.SecurityChangeTypes)">
      <summary>
            Получить количество хранящихся изменений типа <paramref name="type" />.
            </summary>
      <param name="type">Тип изменений.</param>
      <returns>Количество хранящихся изменений.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityChangeContainer.SecurityInfo.GetChanges(System.Int32)">
      <summary>
            Получить изменения по индексу.
            </summary>
      <param name="index">Индекс. Ноль означает последние изменения.</param>
      <returns>Найденные изменения. Если для переданного индекса изменений нет, то будет возвращено пустое множество.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityChangeContainer.SecurityInfo.GetChanges(System.TimeSpan)">
      <summary>
            Получить изменения, произошедшие раньше текущего времени минус временное смещение <paramref name="offset" />.
            </summary>
      <param name="offset">Временное смещение от текущего времени.</param>
      <returns>Найденные изменения. Если изменения присутствуют только для более раннего периода, то будет возвращено пустое множество.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityChangeContainer.SecurityInfo.GetChanges(System.DateTime)">
      <summary>
            Получить изменения, произошедшие до <paramref name="from" />.
            </summary>
      <param name="from">Временная метка.</param>
      <returns>Найденные изменения. Если изменения присутствуют только для более раннего периода, то будет возвращено пустое множество.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityChangeContainer.SecurityInfo.GetChanges(System.DateTime,System.DateTime)">
      <summary>
            Получить изменения, произошедшие до <paramref name="from" /> и после <paramref name="to" />.
            </summary>
      <param name="from">Временная метка начала.</param>
      <param name="to">Временная метка окончания.</param>
      <returns>Найденные изменения. Если изменения присутствуют только для более раннего или более позднего периода, то будет возвращено пустое множество.</returns>
    </member>
    <member name="P:StockSharp.Algo.Storages.SecurityChangeContainer.SecurityInfo.Types">
      <summary>
            Получить или устрановить тип отслеживаемых изменения для инструмента.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.MarketDataTypes">
      <summary>
            Типы рыночных сообщениий (данные, команды).
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketDataTypes.MarketDepth">
      <summary>
            Изменение стакана.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketDataTypes.Trades">
      <summary>
            Новые тиковые сделки.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketDataTypes.Security">
      <summary>
            Изменение инструмета.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketDataTypes.BestQuotes">
      <summary>
            Изменение <see cref="P:StockSharp.BusinessEntities.Security.BestPair" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketDataTypes.LastTrade">
      <summary>
            Изменение <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketDataTypes.OrderLog">
      <summary>
            Новая запись в логе заявок.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketDataTypes.OrderTransaction">
      <summary>
            Регистрация новой заявки.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketDataTypes.OrderState">
      <summary>
            Изменение <see cref="P:StockSharp.BusinessEntities.Order.State" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketDataTypes.Clearing">
      <summary>
            Наступление клиринга.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketDataTypes.Time">
      <summary>
            Изменение времени.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketDataTypes.MyTrades">
      <summary>
            Новая собственная сделка.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketDataTypes.EndOfData">
      <summary>
            Окончание поступления данных.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketDataTypes.OrderError">
      <summary>
            Ошибка регистрации или снятия заявки.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketDataTypes.OrderTrace">
      <summary>
            Трассировка заявки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.MemoryStatistics">
      <summary>
            Класс отслеживания занимаемых объектов в памяти.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.MemoryStatistics.Enable(System.String)">
      <summary>
            Включить отслеживание определенных типов данных.
            </summary>
      <param name="pattern">I=<see cref="P:StockSharp.Algo.MemoryStatistics.Traders" />, S=<see cref="P:StockSharp.Algo.MemoryStatistics.Strategies" />, R=<see cref="P:StockSharp.Algo.MemoryStatistics.Rules" />, T=<see cref="P:StockSharp.Algo.MemoryStatistics.Trades" />, C=<see cref="P:StockSharp.Algo.MemoryStatistics.Candles" />
            и комбинации этих символов (например, SR). Пустая строка означает выключение отслеживания всех типов данных.</param>
    </member>
    <member name="M:StockSharp.Algo.MemoryStatistics.Clear(System.Boolean)">
      <summary>
            Очистить статистику памяти.
            </summary>
      <param name="resetCounter">Очищать ли счетчик объектов.</param>
    </member>
    <member name="M:StockSharp.Algo.MemoryStatistics.ToString">
      <summary>
            Получить строковое представление.
            </summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="M:StockSharp.Algo.MemoryStatistics.GetStrategyAndRulesReport">
      <summary>
            Отчет по числу стратегиий и правил определенных типов.
            </summary>
      <returns>Отчет.</returns>
    </member>
    <member name="M:StockSharp.Algo.MemoryStatistics.GetRulesDump(System.Int32)">
      <summary>
            Получить текстовый дамп правил.
            </summary>
      <param name="count">Максимальное количество правил для дампа.</param>
      <returns>Строка с дампом.</returns>
    </member>
    <member name="P:StockSharp.Algo.MemoryStatistics.Instance">
      <summary>
            Объект класса <see cref="T:StockSharp.Algo.MemoryStatistics" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MemoryStatistics.Interval">
      <summary>
            Интервал логирования статистики. По умолчанию 60 сек.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MemoryStatistics.IsTraceEnabled">
      <summary>
            Логировать создание и удаление объектов. По умолчанию false.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MemoryStatistics.Traders">
      <summary>
            Статистика по шлюзам.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MemoryStatistics.Strategies">
      <summary>
            Статистика по стратегиям.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MemoryStatistics.Rules">
      <summary>
            Статистика по правилам.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MemoryStatistics.Trades">
      <summary>
            Статистика по сделкам.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MemoryStatistics.Candles">
      <summary>
            Статистика по свечкам.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.MemoryStatistics.MemoryStatisticsValue`1">
      <summary>
            Класс для отслеживания количества активных объектов конктретного типа.
            </summary>
      <typeparam name="T">Тип объекта.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.MemoryStatistics.MemoryStatisticsValue`1.Add(`0)">
      <summary>
            Добавить новый объект.
            </summary>
      <param name="obj">Новый объект.</param>
    </member>
    <member name="M:StockSharp.Algo.MemoryStatistics.MemoryStatisticsValue`1.Remove(`0)">
      <summary>
            Удалить активный объект.
            </summary>
      <param name="obj">Активный объект.</param>
    </member>
    <member name="M:StockSharp.Algo.MemoryStatistics.MemoryStatisticsValue`1.Remove(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Удалить активные объекты.
            </summary>
      <param name="objects">Активные объекты.</param>
    </member>
    <member name="M:StockSharp.Algo.MemoryStatistics.MemoryStatisticsValue`1.Clear(System.Boolean)">
      <summary>
            Очистить активные объекты <see cref="P:StockSharp.Algo.MemoryStatistics.MemoryStatisticsValue`1.Objects" />.
            </summary>
      <param name="resetCounter">Очищать ли счетчик объектов.</param>
    </member>
    <member name="P:StockSharp.Algo.MemoryStatistics.MemoryStatisticsValue`1.Objects">
      <summary>
            Активные объекты.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MemoryStatistics.MemoryStatisticsValue`1.ObjectCount">
      <summary>
            Количество активных объектов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MemoryStatistics.MemoryStatisticsValue`1.ThrowOnRemoveDeleted">
      <summary>
            Проверять, что удаляется ранее удаленный объект.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MemoryStatistics.MemoryStatisticsValue`1.IsEnabled">
      <summary>
            Включено ли отслеживание объектов, доступных через <see cref="P:StockSharp.Algo.MemoryStatistics.MemoryStatisticsValue`1.Objects" />. По-умолчанию, выключено.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.OrderLogCancelReasons">
      <summary>
            Причины отмены заявок в логе заявок.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.OrderLogCancelReasons.ReRegistered">
      <summary>
            Перерегистрация заявки.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.OrderLogCancelReasons.Canceled">
      <summary>
            Отмена заявки.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.OrderLogCancelReasons.GroupCanceled">
      <summary>
            Групповая отмена заявок.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.OrderLogCancelReasons.CrossTrade">
      <summary>
            Признак удаления остатка заявки по причине кросс-сделки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.OrderLogHelper">
      <summary>
            Построение стакана по ордер-логу.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.IsRegistered(StockSharp.BusinessEntities.OrderLogItem)">
      <summary>
            Проверить, содержит ли строчка регистрацию заявки.
            </summary>
      <param name="item">Строчка ордер-лога.</param>
      <returns>True, если строчка содержит регистрацию заявки, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.IsCanceled(StockSharp.BusinessEntities.OrderLogItem)">
      <summary>
            Проверить, содержит ли строчка отменену заявки.
            </summary>
      <param name="item">Строчка ордер-лога.</param>
      <returns>True, если строчка содержит отменену заявки, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.IsMatched(StockSharp.BusinessEntities.OrderLogItem)">
      <summary>
            Проверить, содержит ли строчка исполнение заявки.
            </summary>
      <param name="item">Строчка ордер-лога.</param>
      <returns>True, если строчка содержит исполнение заявки, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.GetCancelReason(StockSharp.BusinessEntities.OrderLogItem)">
      <summary>
            Получить причину отмены заявки в логе заявок.
            </summary>
      <param name="item">Строчка ордер-лога.</param>
      <returns>Причина отмены заявки в логе заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.Update(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.OrderLogItem)">
      <summary>
            Добавить новую строчку из ордер-лога к стакану.
            </summary>
      <param name="depth">Стакан.</param>
      <param name="item">Строчка ордер-лога.</param>
      <returns>Был ли изменен стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.ToMarketDepths(Ecng.Collections.IEnumerableEx{StockSharp.BusinessEntities.OrderLogItem},System.TimeSpan,System.Int32)">
      <summary>
            Построить стаканы из ордер лога.
            </summary>
      <param name="items">Строчки ордер лога.</param>
      <param name="interval">Интервал генерации стакана. По-умолчанаю равен <see cref="F:System.TimeSpan.Zero" />, что означает генерацию стаканов при каждой новой строчке лога заявок.</param>
      <param name="maxDepth">Максимальная глубина стакана. По-умолчанию равно <see cref="F:System.Int32.MaxValue" />, что означает бесконечную глубину.</param>
      <returns>Стаканы.</returns>
    </member>
    <member name="M:StockSharp.Algo.OrderLogHelper.ToTrades(Ecng.Collections.IEnumerableEx{StockSharp.BusinessEntities.OrderLogItem})">
      <summary>
            Построить тиковые сделки из ордер лога.
            </summary>
      <param name="items">Строчки ордер лога.</param>
      <returns>Тиковые сделки.</returns>
    </member>
    <member name="T:StockSharp.Algo.OrderLogMarketDepthBuilder">
      <summary>
            Построитель стакана из лога заявок.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.OrderLogMarketDepthBuilder.#ctor(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.OrderLogMarketDepthBuilder" />.
            </summary>
      <param name="depth">Стакан.</param>
    </member>
    <member name="M:StockSharp.Algo.OrderLogMarketDepthBuilder.Update(StockSharp.BusinessEntities.OrderLogItem)">
      <summary>
            Добавить новую строчку из ордер-лога к стакану.
            </summary>
      <param name="item">Строчка ордер-лога.</param>
      <returns>Был ли изменен стакан.</returns>
    </member>
    <member name="P:StockSharp.Algo.OrderLogMarketDepthBuilder.Depth">
      <summary>
            Стакан.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.MarketTimer">
      <summary>
            Таймер, основанный на времени торговой системы.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.MarketTimer.#ctor(StockSharp.BusinessEntities.ITrader,System.Action)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.MarketTimer" />.
            </summary>
      <param name="trader">Шлюз к торговой системе, из которого будет использоваться событие <see cref="E:StockSharp.BusinessEntities.ITrader.MarketTimeChanged" />.</param>
      <param name="activated">Обработчик таймера.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketTimer.Interval(System.TimeSpan)">
      <summary>
            Установить интервал.
            </summary>
      <param name="interval">Интервал таймера. Если устанавливается значение <see cref="F:System.TimeSpan.Zero" />, то таймер перестает быть периодичным.</param>
      <returns>Таймер.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketTimer.Start">
      <summary>
            Запустить таймер.
            </summary>
      <returns>Таймер.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketTimer.Stop">
      <summary>
            Остановить таймер.
            </summary>
      <returns>Таймер.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketTimer.DisposeManaged">
      <summary>
            Освободить ресурсы.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Commissions.CommissionRegistry">
      <summary>
            Реестр всех доступных тарифных планов, получающий данные с сервера StockSharp.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionRegistry.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Commissions.CommissionRegistry" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionRegistry.#ctor(System.Uri)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Commissions.CommissionRegistry" />.
            </summary>
      <param name="address">Адрес сервера.</param>
    </member>
    <member name="M:StockSharp.Algo.Commissions.CommissionRegistry.Get(System.String)">
      <summary>
            Получить тарифный план по его имени.
            </summary>
      <param name="name">Название тарифного плана.</param>
      <returns>Тарифный план.</returns>
    </member>
    <member name="P:StockSharp.Algo.Commissions.CommissionRegistry.Names">
      <summary>
            Все названия тарифных планов.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.PnL.MyTradePnLInfo">
      <summary>
            Информация о сделке, закрытый ее объем и ее прибыльность.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.MyTradePnLInfo.#ctor(StockSharp.BusinessEntities.MyTrade,System.Decimal,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.PnL.MyTradePnLInfo" />.
            </summary>
      <param name="trade">Собственная сделка.</param>
      <param name="closedVolume">Объем позиции, который был закрыт собственной сделкой.</param>
      <param name="pnL">Реализованная данной сделкой прибыль.</param>
    </member>
    <member name="P:StockSharp.Algo.PnL.MyTradePnLInfo.Trade">
      <summary>
            Собственная сделка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.MyTradePnLInfo.ClosedVolume">
      <summary>
            Объем позиции, который был закрыт собственной сделкой.
            </summary>
      <remarks>Например, в стратегии позиция была 2, Сделка на -5 контрактов. Закрытая позиция 2.</remarks>
    </member>
    <member name="P:StockSharp.Algo.PnL.MyTradePnLInfo.PnL">
      <summary>
            Реализованная данной сделкой прибыль.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Statistics.IOrderStatisticParameter">
      <summary>
            Интерфейс, описывающий параметр статистики, рассчитывающийся на основе заявков.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.IOrderStatisticParameter.New(StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить в параметр информацию о новой заявке.
            </summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.IOrderStatisticParameter.Changed(StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить в параметр информацию об изменившейся заявке.
            </summary>
      <param name="order">Изменившаяся заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.IOrderStatisticParameter.RegisterFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Добавить в параметр информацию об ошибке регистрации заявки.
            </summary>
      <param name="fail">Ошибка регистрации заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.IOrderStatisticParameter.CancelFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Добавить в параметр информацию об ошибке отмены заявки.
            </summary>
      <param name="fail">Ошибка отмены заявки.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1">
      <summary>
            Базовый параметр статистики, рассчитывающийся на основе заявков.
            </summary>
      <typeparam name="TValue">Тип значения параметра.</typeparam>
    </member>
    <member name="T:StockSharp.Algo.Statistics.BaseStatisticParameter`1">
      <summary>
            Базовый параметр статистики.
            </summary>
      <typeparam name="TValue">Тип значения параметра.</typeparam>
    </member>
    <member name="T:StockSharp.Algo.Statistics.IStatisticParameter`1">
      <summary>
            Интерфейс, описывающий параметр статистики.
            </summary>
      <typeparam name="TValue">Тип значения параметра.</typeparam>
    </member>
    <member name="T:StockSharp.Algo.Statistics.IStatisticParameter">
      <summary>
            Интерфейс, описывающий параметр статистики.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.IStatisticParameter.Reset">
      <summary>
            Сбросить значение параметра.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.IStatisticParameter.Name">
      <summary>
            Название параметра.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.IStatisticParameter.Value">
      <summary>
            Текущее значение параметра.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Statistics.IStatisticParameter.ValueChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Statistics.IStatisticParameter.Value" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.IStatisticParameter`1.Value">
      <summary>
            Текущее значение параметра.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseStatisticParameter`1.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Statistics.BaseStatisticParameter`1" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Reset">
      <summary>
            Сбросить значение параметра.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseStatisticParameter`1.RaiseValueChanged">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Statistics.BaseStatisticParameter`1.ValueChanged" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Name">
      <summary>
            Название параметра.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.DisplayName">
      <summary>
            Локализованное название параметра.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Value">
      <summary>
            Текущее значение параметра.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Statistics.BaseStatisticParameter`1.ValueChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Statistics.BaseStatisticParameter`1.Value" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1.New(StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить в параметр информацию о новой заявке.
            </summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1.Changed(StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить в параметр информацию об изменившейся заявке.
            </summary>
      <param name="order">Изменившаяся заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1.RegisterFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Добавить в параметр информацию об ошибке регистрации заявки.
            </summary>
      <param name="fail">Ошибка регистрации заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.BaseOrderStatisticParameter`1.CancelFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Добавить в параметр информацию об ошибке отмены заявки.
            </summary>
      <param name="fail">Ошибка отмены заявки.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MaxLatencyRegistrationParameter">
      <summary>
            Максимальное значение задержки регистрации заявки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxLatencyRegistrationParameter.New(StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить в параметр информацию о новой заявке.
            </summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MaxLatencyCancellationParameter">
      <summary>
            Максимальное значение задержки отмены заявки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxLatencyCancellationParameter.Changed(StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить в параметр информацию об изменившейся заявке.
            </summary>
      <param name="order">Изменившаяся заявка.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MinLatencyRegistrationParameter">
      <summary>
            Минимальное значение задержки регистрации заявки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MinLatencyRegistrationParameter.New(StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить в параметр информацию о новой заявке.
            </summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MinLatencyRegistrationParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MinLatencyRegistrationParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MinLatencyCancellationParameter">
      <summary>
            Минимальное значение задержки отмены заявки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MinLatencyCancellationParameter.Changed(StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить в параметр информацию об изменившейся заявке.
            </summary>
      <param name="order">Изменившаяся заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MinLatencyCancellationParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MinLatencyCancellationParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.OrderCountParameter">
      <summary>
            Общее количество заявок.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.OrderCountParameter.New(StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить в параметр информацию о новой заявке.
            </summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.IPnLStatisticParameter">
      <summary>
            Интерфейс, описывающий параметр статистики, рассчитывающийся на основе значение прибыли-убытка (максимальная просадка, коэффициент Шарпа и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.IPnLStatisticParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MaxProfitParameter">
      <summary>
            Максимальная значение прибыли за весь период.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxProfitParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MaxDrawdownParameter">
      <summary>
            Максимальная абсолютная просадка за весь период.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxDrawdownParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxDrawdownParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxDrawdownParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MaxRelativeDrawdownParameter">
      <summary>
            Максимальная относительная просадка эквити за весь период.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxRelativeDrawdownParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxRelativeDrawdownParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxRelativeDrawdownParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.ReturnParameter">
      <summary>
            Относительная прибыль за весь отрезок времени.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.ReturnParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.ReturnParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.ReturnParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.RecoveryFactorParameter">
      <summary>
            Коэффициент восстановления (чистая прибыль / максимальная просадка).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.RecoveryFactorParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.RecoveryFactorParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.RecoveryFactorParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.NetProfitParameter">
      <summary>
            Чистая прибыль за весь отрезок времени.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.NetProfitParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новые данные.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="pnl">Значение прибыли убытка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.NetProfitParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.NetProfitParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.IPositionStatisticParameter">
      <summary>
            Интерфейс, описывающий параметр статистики, рассчитывающийся на основе позиции.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.IPositionStatisticParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новое значение позиции.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="position">Новое значение позиции.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MaxLongPositionParameter">
      <summary>
            Максимальный размер длинной позиции.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxLongPositionParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новое значение позиции.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="position">Новое значение позиции.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.MaxShortPositionParameter">
      <summary>
            Максимальный размер короткой позиции.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.MaxShortPositionParameter.Add(System.DateTime,System.Decimal)">
      <summary>
            Добавить в параметр новое значение позиции.
            </summary>
      <param name="marketTime">Биржевое время.</param>
      <param name="position">Новое значение позиции.</param>
    </member>
    <member name="T:StockSharp.Algo.History.Finam.FinamHistorySource">
      <summary>
            Источник для скачивания исторических сделок с Finam.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.History.Finam.FinamHistorySource.FinamMarketIdField">
      <summary>
            Ключ, по которому в <see cref="P:StockSharp.BusinessEntities.Security.ExtensionInfo" /> будет присутствовать номер финамовского идентификатора рынка.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.History.Finam.FinamHistorySource.FinamSecurityIdField">
      <summary>
            Ключ, по которому в <see cref="P:StockSharp.BusinessEntities.Security.ExtensionInfo" /> будет присутствовать номер финамовского идентификатора инструмента.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.Finam.FinamHistorySource.#ctor(StockSharp.Algo.History.ISecurityStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.History.Finam.FinamHistorySource" />.
            </summary>
      <param name="securityStorage">Интерфейс для доступа к хранилищу информации об инструментах.</param>
    </member>
    <member name="M:StockSharp.Algo.History.Finam.FinamHistorySource.GetTrades(StockSharp.BusinessEntities.Security,System.DateTime)">
      <summary>
            Получить исторические сделки.
            </summary>
      <param name="security">Инструмент, для которого необходимо получить все сделки. Если значение равно null, то возвращаются сделки по всем инструментам.</param>
      <param name="time">Время торговой сессии, для которой необходимо получить сделки.</param>
      <returns>Исторические сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Finam.FinamHistorySource.DownloadSecurityInfo">
      <summary>
            Загрузить информацию об инструментах.
            </summary>
      <returns>Информация об инструментах.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Finam.FinamHistorySource.GetCandles(StockSharp.BusinessEntities.Security,System.DateTime,System.DateTime,System.TimeSpan)">
      <summary>
            Загрузить свечи.
            </summary>
      <param name="security">Инструмент, для которого необходимо получить свечки.</param>
      <param name="beginDate">Дата начала данных.</param>
      <param name="endDate">Дата конца данных.</param>
      <param name="tf">Тайм-фрейм (1min, 5min, 10min, 15min, 30min, 1hour, 1day).</param>
      <returns>Загруженные свечки.</returns>
    </member>
    <member name="M:StockSharp.Algo.History.Finam.FinamHistorySource.GetNewSecurities">
      <summary>
            Получить новые инструменты.
            </summary>
      <returns>Новые инструменты.</returns>
    </member>
    <member name="T:StockSharp.Algo.History.Rts.RtsHistorySource">
      <summary>
            Источник для скачивания исторических сделок с RTS.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.History.Rts.RtsHistorySource.#ctor(StockSharp.Algo.History.ISecurityStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.History.Rts.RtsHistorySource" />.
            </summary>
      <param name="securityStorage">Интерфейс для доступа к хранилищу информации об инструментах.</param>
    </member>
    <member name="M:StockSharp.Algo.History.Rts.RtsHistorySource.LoadTrades(System.DateTime,System.Collections.Generic.IDictionary{StockSharp.BusinessEntities.Security,System.Collections.Generic.IList{StockSharp.BusinessEntities.Trade}})">
      <summary>
            Загрузить исторические сделки.
            </summary>
      <param name="date">Дата торговой сессии, для которой необходимо получить сделки.</param>
      <param name="trades">Контейнер для загруженных сделок.</param>
      <returns>Исторические сделки.</returns>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.Host">
      <summary>
            Адрес ftp RTS сервера.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.Port">
      <summary>
            Порт ftp RTS сервера.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.UserName">
      <summary>
            Логин к ftp.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.Password">
      <summary>
            Пароль к ftp.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.ExchangeBoard">
      <summary>
            Информация о площадке.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.MinAvaliableTime">
      <summary>
            Минимальная дата, для которой есть исторические данные.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.DbfDirectory">
      <summary>
            Путь к папке с историческими данными в формате DBF.
            </summary>
      <remarks>
            Если значение равно пустой строке, то данные в формате DBF не обрабатываются.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.TxtDirectory">
      <summary>
            Путь к папке с историческими данными в формате CSV и Excel.
            </summary>
      <remarks>
            Если значение равно пустой строке, то данные в формате CSV и Excel не обрабатываются.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.DumpFolder">
      <summary>
            Путь к директории, куда будут сохранятся скаченные файлы.
            </summary>
      <remarks>
            Если значение равно пустой строке, то данные сохраняются в текущую директорию.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.SaveRtsStdCombinedOnly">
      <summary>
            Склеивать сделки для инструментов РТС Стандарт (сделки для T+N не разбиваются по папкам).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.History.Rts.RtsHistorySource.IsSystemOnly">
      <summary>
            Сохранять только системные сделки. По-умолчанию включено.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.IEntityFactory">
      <summary>
            Интерфейс фабрики бизнес-сущностей (<see cref="T:StockSharp.BusinessEntities.Security" />, <see cref="T:StockSharp.BusinessEntities.Order" /> и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateSecurity(System.String)">
      <summary>
            Создать инструмент по идентификатору.
            </summary>
      <param name="id">Идентификатор инструмента.</param>
      <returns>Созданный инструмент.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreatePortfolio(System.String)">
      <summary>
            Создать портфель по номеру счета.
            </summary>
      <param name="name">Номер счета.</param>
      <returns>Созданный портфель.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreatePosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security)">
      <summary>
            Создать позицию.
            </summary>
      <param name="portfolio">Портфель.</param>
      <param name="security">Инструмент.</param>
      <returns>Созданная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateTrade(StockSharp.BusinessEntities.Security,System.Int64)">
      <summary>
            Создать тиковую сделку по ее номеру.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="id">Номер сделки.</param>
      <returns>Созданная сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateOrder(StockSharp.BusinessEntities.Security,System.Int64)">
      <summary>
            Создать заявку по ее номеру.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="id">Номер заявки.</param>
      <returns>Созданная заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateOrderFail(StockSharp.BusinessEntities.Order,System.Exception)">
      <summary>
            Создать описание ошибки для заявки.
            </summary>
      <param name="order">Заявка.</param>
      <param name="error">Системное описание ошибки.</param>
      <returns>Созданное описание ошибки.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateMyTrade(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
      <summary>
            Создать собственную сделку.
            </summary>
      <param name="order">Заявка.</param>
      <param name="trade">Тиковая сделка.</param>
      <returns>Созданная собственная сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать стакан для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Созданный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.IEntityFactory.CreateOrderLogItem(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
      <summary>
            Создать строчку лога заявок.
            </summary>
      <param name="order">Заявка.</param>
      <param name="trade">Тиковая сделка.</param>
      <returns>Строчка лога заявок.</returns>
    </member>
    <member name="T:StockSharp.Algo.EntityFactory">
      <summary>
            Фабрика бизнес-сущностей (<see cref="T:StockSharp.BusinessEntities.Security" />, <see cref="T:StockSharp.BusinessEntities.Order" /> и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.EntityFactory" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateSecurity(System.String)">
      <summary>
            Создать инструмент по идентификатору.
            </summary>
      <param name="id">Идентификатор инструмента.</param>
      <returns>Созданный инструмент.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreatePortfolio(System.String)">
      <summary>
            Создать портфель по номеру счета.
            </summary>
      <param name="name">Номер счета.</param>
      <returns>Созданный портфель.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreatePosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security)">
      <summary>
            Создать позицию.
            </summary>
      <param name="portfolio">Портфель.</param>
      <param name="security">Инструмент.</param>
      <returns>Созданная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateTrade(StockSharp.BusinessEntities.Security,System.Int64)">
      <summary>
            Создать тиковую сделку по ее номеру.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="id">Номер сделки.</param>
      <returns>Созданная сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateOrder(StockSharp.BusinessEntities.Security,System.Int64)">
      <summary>
            Создать заявку по ее номеру.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="id">Номер заявки.</param>
      <returns>Созданная заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateOrderFail(StockSharp.BusinessEntities.Order,System.Exception)">
      <summary>
            Создать описание ошибки для заявки.
            </summary>
      <param name="order">Заявка.</param>
      <param name="error">Системное описание ошибки.</param>
      <returns>Созданное описание ошибки.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateMyTrade(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
      <summary>
            Создать собственную сделку.
            </summary>
      <param name="order">Заявка.</param>
      <param name="trade">Тиковая сделка.</param>
      <returns>Созданная собственная сделка.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать стакан для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Созданный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.EntityFactory.CreateOrderLogItem(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Trade)">
      <summary>
            Создать строчку лога заявок.
            </summary>
      <param name="order">Заявка.</param>
      <param name="trade">Тиковая сделка.</param>
      <returns>Строчка лога заявок.</returns>
    </member>
    <member name="P:StockSharp.Algo.EntityFactory.Instance">
      <summary>
            Статический объект <see cref="T:StockSharp.Algo.EntityFactory" />, который необходимо использовать, если требуется поддержать ссылочную целостность между разными шлюзами.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Latency.ILatencyManager">
      <summary>
            Интерфейс менеджера расчета задержки регистрации заявок.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.ILatencyManager.Reset">
      <summary>
            Обнулить расчеты.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.ILatencyManager.ProcessNewOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Обработать задержку регистрации заявки <see cref="P:StockSharp.BusinessEntities.Order.LatencyRegistration" />.
            </summary>
      <param name="order">Заявка.</param>
      <returns>Задержка регистрации заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Latency.ILatencyManager.ProcessChangedOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Обработать задержку отмены заявки <see cref="P:StockSharp.BusinessEntities.Order.LatencyCancellation" />.
            </summary>
      <param name="order">Заявка.</param>
      <returns>Задержка отмены заявки.</returns>
    </member>
    <member name="P:StockSharp.Algo.Latency.ILatencyManager.LatencyRegistration">
      <summary>
            Суммарное значение задержки регистрации по всем заявкам.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Latency.ILatencyManager.LatencyCancellation">
      <summary>
            Суммарное значение задержки отмены по всем заявкам.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.MarketPriceTypes">
      <summary>
            Типы рыночных цен.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.MarketPriceTypes.Opposite">
      <summary>
            Встречная цена (для быстрого закрытия позы).
            </summary>
    </member>
    <member name="F:StockSharp.Algo.MarketPriceTypes.Following">
      <summary>
            Попутная цена (для котирования на краю спреда).
            </summary>
    </member>
    <member name="F:StockSharp.Algo.MarketPriceTypes.Middle">
      <summary>
            Середина спреда.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.ReConnectionSettings">
      <summary>
            Настройки механизма отслеживания соединений <see cref="T:StockSharp.BusinessEntities.ITrader" /> с торговом системой.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ReConnectionSettings.Interval">
      <summary>
            Интервал, с которым будут происходить попытки <see cref="T:StockSharp.BusinessEntities.ITrader" /> установить соединение с торговой системой.
            </summary>
      <remarks>
            По умолчанию интервал равен 10 секунд.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.ReConnectionSettings.WorkingTime">
      <summary>
            Режим работы, во время которого необходимо производить подключения.
            Например, нет необходимости проводить подключение, когда окончены торги на бирже.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ReConnectionSettings.ConnectingAttemptCount">
      <summary>
            Количество попыток установить первоначальное соеднинение, если оно не было установлено (тайм-аут, сетевой сбой и т.д.).
            По-умолчанию количество попыток равно 0. Для установление беконечного количества попыток используется значение -1.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ReConnectionSettings.ReConnectingAttemptCount">
      <summary>
            Количество попыток переподсоединиться, если соединение было утеряно в процессе работы.
            По-умолчанию количество попыток равно 100. Для установление беконечного количества попыток используется значение -1.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ReConnectionSettings.IsReStartExport">
      <summary>
            Перезапускать ли экспорт после восстановления соединения или при тайм-ауте поступления данных.
            По-умолчанию режим выключен.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ReConnectionSettings.ConnectDisconnectTimeOutInterval">
      <summary>
            Время ожидания события успешного подключения/отключения. По-умолчанию значение равно 1 минуте.
            Если значение равно <see cref="F:System.TimeSpan.Zero" />, то мониторинг не производится.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ReConnectionSettings.ExportTimeOutInterval">
      <summary>
            Интервал для мониторинга потери передачи данных между роботом и торговой программой.
            </summary>
      <remarks>
            Если мониторинг уже был установлен до этого, то применяется новое значение для интервала.
            Если значение равно <see cref="F:System.TimeSpan.Zero" />, то мониторинг останавливается.
            По-умолчанию мониторинг выключен.
            </remarks>
    </member>
    <member name="E:StockSharp.Algo.ReConnectionSettings.ConnectionRestored">
      <summary>
            Событие об успешном восстановлении соединения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.ReConnectionSettings.ConnectionAttemptError">
      <summary>
            Событие об ошибке при попытке восстановить соединение.
            Возникает каждый раз при неудачной попытке восстановления соединения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.ReConnectionSettings.ExportTimeOut">
      <summary>
            Событие о тайм-ауте поступающих данных в программу. Событие позволяет узнать, как долго торговая программа не посылала данные роботу.
            Подобное событие сигнализирует о сбое передачи данных между роботом и торговой программой.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Statistics.ITradeStatisticParameter">
      <summary>
            Интерфейс, описывающий параметр статистики, рассчитывающийся на основе сделки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.ITradeStatisticParameter.Add(StockSharp.Algo.PnL.MyTradePnLInfo)">
      <summary>
            Добавить в параметр информацию о новой сделке.
            </summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.WinningTradesParameter">
      <summary>
            Количество выигранных сделок (прибыль которых больше 0).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.WinningTradesParameter.Add(StockSharp.Algo.PnL.MyTradePnLInfo)">
      <summary>
            Добавить в параметр информацию о новой сделке.
            </summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.LossingTradesParameter">
      <summary>
            Количество проигранных сделок и с нулевой прибылью (прибыль которых меньше равна 0).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.LossingTradesParameter.Add(StockSharp.Algo.PnL.MyTradePnLInfo)">
      <summary>
            Добавить в параметр информацию о новой сделке.
            </summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.TradeCountParameter">
      <summary>
            Общее количество сделок.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.TradeCountParameter.Add(StockSharp.Algo.PnL.MyTradePnLInfo)">
      <summary>
            Добавить в параметр информацию о новой сделке.
            </summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.RoundtripCountParameter">
      <summary>
            Общее количество закрывающих сделок.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.RoundtripCountParameter.Add(StockSharp.Algo.PnL.MyTradePnLInfo)">
      <summary>
            Добавить в параметр информацию о новой сделке.
            </summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.AverageTradeParameter">
      <summary>
            Cредняя величина прибыли сделки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageTradeParameter.Add(StockSharp.Algo.PnL.MyTradePnLInfo)">
      <summary>
            Добавить в параметр информацию о новой сделке.
            </summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageTradeParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageTradeParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.AverageWinTradeParameter">
      <summary>
            Средняя выигрышная сделка.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageWinTradeParameter.Add(StockSharp.Algo.PnL.MyTradePnLInfo)">
      <summary>
            Добавить в параметр информацию о новой сделке.
            </summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageWinTradeParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageWinTradeParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.AverageLossTradeParameter">
      <summary>
            Средняя проигрышная сделка.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageLossTradeParameter.Add(StockSharp.Algo.PnL.MyTradePnLInfo)">
      <summary>
            Добавить в параметр информацию о новой сделке.
            </summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageLossTradeParameter.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.AverageLossTradeParameter.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить состояние параметра статистики.
            </summary>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="T:StockSharp.Algo.Statistics.StatisticManager">
      <summary>
            Менеджер статистики.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Statistics.StatisticManager" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddPnL(System.DateTime,System.Decimal)">
      <summary>
            Добавить новое значение прибыли-убытка.
            </summary>
      <param name="time">Время изменения <paramref name="pnl" />.</param>
      <param name="pnl">Новое значение прибыли-убытка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddPosition(System.DateTime,System.Decimal)">
      <summary>
            Добавить новое значение позиции.
            </summary>
      <param name="time">Время изменения <paramref name="position" />.</param>
      <param name="position">Новое значение позиции.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddMyTrade(StockSharp.Algo.PnL.MyTradePnLInfo)">
      <summary>
            Добавить информацию о новой сделке.
            </summary>
      <param name="info">Информация о новой сделке.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddNewOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить новую заявку.
            </summary>
      <param name="order">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddChangedOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить измененную заявку.
            </summary>
      <param name="order">Измененная заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddRegisterFailedOrder(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Добавить ошибку регистрации заявки.
            </summary>
      <param name="fail">Ошибка регистрации заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.AddFailedOrderCancel(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Добавить ошибку отмены заявки.
            </summary>
      <param name="fail">Ошибка заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Statistics.StatisticManager.Reset">
      <summary>
            Очистить данные по эквити.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Statistics.StatisticManager.Parameters">
      <summary>
            Вычисляемые параметры.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Reporting.CsvStrategyReport">
      <summary>
             Генератор отчета по эквити стратегии в формате Csv.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Reporting.StrategyReport">
      <summary>
            Базовый генератор отчета для стратегии.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Reporting.StrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Инициализировать генератор.
            </summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
    </member>
    <member name="M:StockSharp.Algo.Reporting.StrategyReport.Generate">
      <summary>
            Сгенерировать отчет. В дочерних класса в этом методе реализуется логика генерации.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Reporting.StrategyReport.Format(System.TimeSpan)">
      <summary>
            Отформатировать время в строку.
            </summary>
      <param name="time">Время.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Reporting.StrategyReport.Format(System.DateTime)">
      <summary>
            Отформатировать время в строку.
            </summary>
      <param name="time">Время.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Reporting.StrategyReport.Format(StockSharp.BusinessEntities.OrderDirections)">
      <summary>
            Отформатировать направление заявки в строку.
            </summary>
      <param name="direction">Направление заявки.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Reporting.StrategyReport.Format(StockSharp.BusinessEntities.OrderStates)">
      <summary>
            Отформатировать состояние заявки в строку.
            </summary>
      <param name="state">Состояние заявки.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Reporting.StrategyReport.Format(StockSharp.BusinessEntities.OrderTypes)">
      <summary>
            Отформатировать тип заявки в строку.
            </summary>
      <param name="type">Тип заявки.</param>
      <returns>Отформатированная строка.</returns>
    </member>
    <member name="P:StockSharp.Algo.Reporting.StrategyReport.Strategy">
      <summary>
            Стратегия, для которой необходимо сгенерировать отчет.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Reporting.CsvStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
      <summary>
            Создать генератор Csv отчетов.
            </summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Csv.</param>
    </member>
    <member name="M:StockSharp.Algo.Reporting.CsvStrategyReport.Generate">
      <summary>
            Сгенерировать отчет в формате Csv.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Reporting.CsvStrategyReport.FileName">
      <summary>
            Название файла, в котором сгенерируется отчет.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.SecurityIdGenerator">
      <summary>
            Генератор идентификаторов инструментов <see cref="P:StockSharp.BusinessEntities.Security.Id" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.SecurityIdGenerator.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.SecurityIdGenerator" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.SecurityIdGenerator.GenerateId(System.String,System.String,StockSharp.BusinessEntities.ExchangeBoard)">
      <summary>
            Сгенерировать <see cref="P:StockSharp.BusinessEntities.Security.Id" /> инструмента.
            </summary>
      <param name="secCode">Код инструмента.</param>
      <param name="secClass">Класс инструмента.</param>
      <param name="board">Площадка инструмента.</param>
      <returns>
        <see cref="P:StockSharp.BusinessEntities.Security.Id" /> инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.SecurityIdGenerator.GetInfo(System.String)">
      <summary>
            Получить код, класс и информацию о бижре для инструмента по его идентификатору.
            </summary>
      <param name="securityId">Идентификатор инструмента <see cref="P:StockSharp.BusinessEntities.Security.Id" />.</param>
      <returns>Код инструмента <see cref="P:StockSharp.BusinessEntities.Security.Code" />, его класс <see cref="P:StockSharp.BusinessEntities.Security.Class" /> и информация о бирже <see cref="P:StockSharp.BusinessEntities.Security.ExchangeBoard" />.</returns>
    </member>
    <member name="P:StockSharp.Algo.SecurityIdGenerator.Delimiter">
      <summary>
            Разделитель между кодом и классом инструмента.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.ServerCredentials">
      <summary>
            Класс, хранящих в себе логин и пароль для доступа к сервисам http://stocksharp.com
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ServerCredentials.Instance">
      <summary>
            Объект класса <see cref="T:StockSharp.Algo.ServerCredentials" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ServerCredentials.Login">
      <summary>
            Логин.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.ServerCredentials.Password">
      <summary>
            Пароль.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Slippage.ISlippageManager">
      <summary>
            Интерфейс для менеджера расчета проскальзывания.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.Registering(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку для начала мониторинга проскальзывания. Ожидаемая цена равна <see cref="P:StockSharp.BusinessEntities.Order.Price" />.
            </summary>
      <param name="order">Заявка, на основе которой необходимо вычислять проскальзывание.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.Registering(StockSharp.BusinessEntities.Order,System.Decimal)">
      <summary>
            Зарегистрировать заявку для начала мониторинга проскальзывания.
            </summary>
      <param name="order">Заявка, на основе которой необходимо вычислять проскальзывание.</param>
      <param name="estimatedPrice">Ожидаемая цена сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.ReRegistering(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку <paramref name="oldOrder" /> с новой ценой из <paramref name="newOrder" />.
            </summary>
      <param name="oldOrder">Старая заявка, которая мониторится на учет проскальзывания.</param>
      <param name="newOrder">Новая заявка, которая содержит обновленную ожидаемую цену по сделкам.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.RegisterFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Удалить расчет проскальзывания для ранее зарегистрированной заявки в случае ее ошибки при регистрации.
            </summary>
      <param name="fail">Информация об ошибке.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.AddTrade(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Добавить новую сделку для раcсчета проскальзывания.
            </summary>
      <param name="trade">Новая сделка.</param>
      <returns>Проскальзывание для сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.GetSlippage(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить текущее проскальзывание по заявке.
            Если заявка все еще активна, то возвращается проскальзывание,
            рассчитанное на основе частично исполненных сделок.
            </summary>
      <param name="order">Заявка, по которой необходимо получить проскальзывание.</param>
      <returns>Значение проскальзывания.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.GetSlippage(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Получить проскальзывание по сделке.
            В качестве ожидаемой цены берется цена первоначальной заявки, которая в результате
            изменений цены через перерегистрацию <see cref="M:StockSharp.Algo.Slippage.ISlippageManager.ReRegistering(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)" /> привела к сделке.
            </summary>
      <param name="trade">Сделка, для которой необходимо получить проскальзывание.</param>
      <returns>Значение проскальзывания.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.GetOriginalOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить для текущей заявки изначальную, с цены которой начался мониторинг проскальзывания.
            </summary>
      <param name="order">Текущая заявка.</param>
      <returns>Изначальная заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.GetEstimatedPrice(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить ожидаемую цену сделки для заявки.
            </summary>
      <param name="order">Заявка, для которой необходимо получить ожидаемую цену сделки для заявки.</param>
      <returns>Ожидаемая цена сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.ISlippageManager.Reset">
      <summary>
            Обнулить <see cref="P:StockSharp.Algo.Slippage.ISlippageManager.Slippage" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.ISlippageManager.Slippage">
      <summary>
            Суммарное значение проскальзывания по всем заявкам, зарегистрированным через <see cref="M:StockSharp.Algo.Slippage.ISlippageManager.Registering(StockSharp.BusinessEntities.Order)" />
            или <see cref="M:StockSharp.Algo.Slippage.ISlippageManager.Registering(StockSharp.BusinessEntities.Order,System.Decimal)" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.IMarketDataStorage`1">
      <summary>
            Интерфейс, описывающий хранилище маркет-данных (тики, стаканы и т.д.).
            </summary>
      <typeparam name="TData">Тип маркет-данных.</typeparam>
    </member>
    <member name="T:StockSharp.Algo.Storages.IMarketDataStorage">
      <summary>
            Интерфейс, описывающий хранилище маркет-данных (тики, стаканы и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage.Save(System.Collections.IEnumerable)">
      <summary>
            Сохранить маркет-данные в хранилище.
            </summary>
      <param name="data">Маркет-данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage.Delete(System.Collections.IEnumerable)">
      <summary>
            Удалить маркет-данные из хранилища.
            </summary>
      <param name="data">Маркет-данные, которые необходимо удалить.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage.Delete(System.DateTime)">
      <summary>
            Удалить маркет-данные из хранилища за указанную дату.
            </summary>
      <param name="date">Дата, для которой необходимо удалить все данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage.Load(System.DateTime)">
      <summary>
            Загрузить данные.
            </summary>
      <param name="date">Дата, для которой необходимо загрузить данные.</param>
      <returns>Данные. Если данных не существует, то будет возвращено пустое множество.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage.GetMetaInfo(System.DateTime)">
      <summary>
            Получить мета-информация о данных.
            </summary>
      <param name="date">Дата, для которой необходимо получить мета-информация о данных.</param>
      <returns>Мета-информация о данных. Если дня в истории не существует, то будет возвращено null.</returns>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.Dates">
      <summary>
            Все даты, для которых записаны маркет-данные.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.DataType">
      <summary>
            Тип маркет-данных, с которыми работает данное хранилище.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.Security">
      <summary>
            Инструмент, с которым работает внешнее хранилище.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.Arg">
      <summary>
            Дополнительный аргумент, ассоциированный с данными. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.Drive">
      <summary>
            Хранилище (база данных, файл и т.д.).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorage.AppendOnlyNew">
      <summary>
            Добавлять ли только новые данные или пытаться записать все данные без фильтра.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.Save(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Сохранить маркет-данные в хранилище.
            </summary>
      <param name="data">Маркет-данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.Delete(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Удалить маркет-данные из хранилища.
            </summary>
      <param name="data">Маркет-данные, которые необходимо удалить.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataStorage`1.Load(System.DateTime)">
      <summary>
            Загрузить данные.
            </summary>
      <param name="date">Дата, для которой необходимо загрузить данные.</param>
      <returns>Данные. Если данных не существует, то будет возвращено пустое множество.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.IMarketDataStorageDayMetaInfo">
      <summary>
            Мета-информация о данных одного записанного дня.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorageDayMetaInfo.Date">
      <summary>
            Дата дня.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorageDayMetaInfo.Count">
      <summary>
            Количество данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorageDayMetaInfo.MinStepSize">
      <summary>
            Значение <see cref="P:StockSharp.BusinessEntities.Security.MinStepSize" /> в день <see cref="P:StockSharp.Algo.Storages.IMarketDataStorageDayMetaInfo.Date" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorageDayMetaInfo.Version">
      <summary>
            Номер версии формата.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorageDayMetaInfo.FirstTime">
      <summary>
            Время первой записи.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorageDayMetaInfo.LastTime">
      <summary>
            Время последней записи.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorageDayMetaInfo.TimeZoneOffset">
      <summary>
            Сдвиг временной зоны, в которой происходила запись данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorageDayMetaInfo.FirstPrice">
      <summary>
            Цена в первой записи.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IMarketDataStorageDayMetaInfo.LastPrice">
      <summary>
            Цена в последней записи.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.EntityRegistry">
      <summary>
            Хранилище торговых сущностей.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.IEntityRegistry">
      <summary>
            Интерфейс, описывающий хранилище торговых сущностей.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Exchanges">
      <summary>
            Список бирж.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.ExchangeBoards">
      <summary>
            Список биржевых площадок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Securities">
      <summary>
            Список инструментов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Portfolios">
      <summary>
            Список портфелей.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Positions">
      <summary>
            Список позиций.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.MyTrades">
      <summary>
            Список собственных сделок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Trades">
      <summary>
            Список тиковых сделок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.Orders">
      <summary>
            Список заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.IEntityRegistry.OrderFails">
      <summary>
            Список ошибок регистрации и снятия заявок.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.EntityRegistry.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.EntityRegistry" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.EntityRegistry.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.EntityRegistry" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.Storage">
      <summary>
            Специальный интерфейс для прямого доступа к хранилищу.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.Exchanges">
      <summary>
            Список бирж.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.ExchangeBoards">
      <summary>
            Список биржевых площадок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.Securities">
      <summary>
            Список инструментов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.Portfolios">
      <summary>
            Список портфелей.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.Positions">
      <summary>
            Список позиций.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.MyTrades">
      <summary>
            Список собственных сделок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.Trades">
      <summary>
            Список тиковых сделок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.Orders">
      <summary>
            Список заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.EntityRegistry.OrderFails">
      <summary>
            Список ошибок регистрации и снятия заявок.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.ExchangeBoardList">
      <summary>
            Класс для представления в виде списка биржевых площадок, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.ExchangeBoardList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.ExchangeBoardList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.IMarketDataDrive">
      <summary>
            Интерфейс, описывающий хранилище (база данных, файл и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataDrive.GetCandleTypes(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить для инструмента доступные типы свечек с параметрами.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Доступные типы свечек с параметрами.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IMarketDataDrive.GetStorageDrive(StockSharp.BusinessEntities.Security,System.Type,System.Object)">
      <summary>
            Получить хранилище для <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="dataType">Тип маркет-данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <returns>Хранилище для <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.BaseMarketDataDrive">
      <summary>
            Базовая реализация <see cref="T:StockSharp.Algo.Storages.IMarketDataDrive" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Storages.BaseMarketDataDrive" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.GetCandleTypes(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить для инструмента доступные типы свечек с параметрами.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Доступные типы свечек с параметрами.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.BaseMarketDataDrive.GetStorageDrive(StockSharp.BusinessEntities.Security,System.Type,System.Object)">
      <summary>
            Создать хранилище для <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="dataType">Тип маркет-данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <returns>Хранилище для <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.LocalMarketDataDrive">
      <summary>
            Файловое хранилище маркет-данных.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.LocalMarketDataDrive" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.#ctor(System.String,System.Boolean)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.LocalMarketDataDrive" />.
            </summary>
      <param name="path">Путь к директории с данными.</param>
      <param name="useAlphabeticPath">Использовать ли алфавитный путь к данным.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.#ctor(System.Boolean)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.LocalMarketDataDrive" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetCandleTypes(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить для инструмента доступные типы свечек с параметрами.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Доступные типы свечек с параметрами.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.LocalMarketDataDrive.GetStorageDrive(StockSharp.BusinessEntities.Security,System.Type,System.Object)">
      <summary>
            Создать хранилище для <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="dataType">Тип маркет-данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <returns>Хранилище для <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.</returns>
    </member>
    <member name="P:StockSharp.Algo.Storages.LocalMarketDataDrive.Path">
      <summary>
            Путь к директории с данными.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.LocalMarketDataDrive.UseAlphabeticPath">
      <summary>
            Использовать ли алфавитный путь к данным.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.MarketDataBuffer`1">
      <summary>
            Буфер маркет-данных.
            </summary>
      <typeparam name="TMarketData">Тип маркет-данных.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Storages.MarketDataBuffer`1.Add(StockSharp.BusinessEntities.Security,`0)">
      <summary>
            Добавить новую информацию в буфер.
            </summary>
      <param name="security">Инструмент, которому принадлежит новая информация.</param>
      <param name="data">Новая информация.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.MarketDataBuffer`1.Add(StockSharp.BusinessEntities.Security,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Добавить новую информацию в буфер.
            </summary>
      <param name="security">Инструмент, которому принадлежит новая информация.</param>
      <param name="data">Новая информация.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.MarketDataBuffer`1.Get">
      <summary>
            Получить накопленные данные из буфера и удалить их.
            </summary>
      <returns>Полученные данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.MarketDataBuffer`1.Get(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить накопленные данные из буфера и удалить их.
            </summary>
      <param name="security">Инструмент, которому принадлежат маркет-данных.</param>
      <returns>Полученные данные.</returns>
    </member>
    <member name="P:StockSharp.Algo.Storages.MarketDataBuffer`1.Size">
      <summary>
            Размер буфера.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.RemoteMarketDataDrive">
      <summary>
            Удаленное хранилище маркет-данных, работающее через <see cref="T:StockSharp.Algo.History.Hydra.RemoteStorageClient" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.RemoteMarketDataDrive.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.RemoteMarketDataDrive" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.RemoteMarketDataDrive.#ctor(StockSharp.Algo.History.Hydra.RemoteStorageClient)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.RemoteMarketDataDrive" />.
            </summary>
      <param name="client">Клиент для доступа к серверу истории <see cref="T:StockSharp.Algo.History.Hydra.IRemoteStorage" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.RemoteMarketDataDrive.GetCandleTypes(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить для инструмента доступные типы свечек с параметрами.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Доступные типы свечек с параметрами.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.RemoteMarketDataDrive.GetStorageDrive(StockSharp.BusinessEntities.Security,System.Type,System.Object)">
      <summary>
            Создать хранилище для <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="dataType">Тип маркет-данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <returns>Хранилище для <see cref="T:StockSharp.Algo.Storages.IMarketDataStorage" />.</returns>
    </member>
    <member name="P:StockSharp.Algo.Storages.RemoteMarketDataDrive.Client">
      <summary>
            Клиент для доступа к серверу истории <see cref="T:StockSharp.Algo.History.Hydra.IRemoteStorage" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.RemoteMarketDataDrive.CacheDrive">
      <summary>
            Хранилище, используемое для кэширования скачиваемой с удаленного хранилища информации. По-умолчанию равно null, что значит кэш выключен.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.SecurityChangeTypes">
      <summary>
            Типы значения изменения в <see cref="T:StockSharp.Algo.Storages.SecurityChange" />, которое записано в <see cref="P:StockSharp.Algo.Storages.SecurityChange.Value" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.OpenPrice">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.OpenPrice" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.HighPrice">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.HighPrice" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.LowPrice">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.LowPrice" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.ClosePrice">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.ClosePrice" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.LastTrade">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.MinStepPrice">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.MinStepPrice" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.BestBid">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.BestAsk">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.BestAsk" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.ImpliedVolatility">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.ImpliedVolatility" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.TheorPrice">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.TheorPrice" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.OpenInterest">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.OpenInterest" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.MinPrice">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.MinPrice" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.MaxPrice">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.MaxPrice" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.BidsVolume">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.BidsVolume" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.BidsCount">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.BidsCount" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.AsksVolume">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.AsksVolume" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.AsksCount">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.AsksCount" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.HistoricalVolatility">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.HistoricalVolatility" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.Delta">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.Delta" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.Gamma">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.Gamma" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.Vega">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.Vega" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.Theta">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.Theta" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.MarginBuy">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.MarginBuy" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.MarginSell">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.MarginSell" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.SecurityChangeTypes.MinStepSize">
      <summary>
        <see cref="P:StockSharp.BusinessEntities.Security.MinStepSize" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.SecurityChange">
      <summary>
            Изменение инструмента, хранящее в себе признак того, что изменилось.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityChange.#ctor(StockSharp.BusinessEntities.Security,System.DateTime,StockSharp.Algo.Storages.SecurityChangeTypes,System.Object)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.SecurityChange" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="time">Время изменения.</param>
      <param name="type">Тип значения, которое записано в <see cref="P:StockSharp.Algo.Storages.SecurityChange.Value" />.</param>
      <param name="value">Одно из частей инструмента.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityChange.Clone">
      <summary>
            Создать копию изменения.
            </summary>
      <returns>Копия изменения.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityChange.OnEquals(StockSharp.Algo.Storages.SecurityChange)">
      <summary>
            Сравнить изменение на эквивалентность.
            </summary>
      <param name="other">Другое изменение для сравнения.</param>
      <returns>True, если изменения эквивалентны, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityChange.GetHashCode">
      <summary>
            Рассчитать хеш-код объекта <see cref="T:StockSharp.Algo.Storages.SecurityChange" />.
            </summary>
      <returns>Хеш-код.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityChange.ToString">
      <summary>
            Получить строковое представление.
            </summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="P:StockSharp.Algo.Storages.SecurityChange.Security">
      <summary>
            Инструмент.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.SecurityChange.Type">
      <summary>
            Тип значения, которое записано в <see cref="P:StockSharp.Algo.Storages.SecurityChange.Value" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.SecurityChange.Time">
      <summary>
            Время изменения.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Storages.SecurityChange.Value">
      <summary>
            Одно из частей инструмента.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.StorageHelper">
      <summary>
            Вспомогательный класс для работы с внешнем хранилищем.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.RegisterCandleStorage``2(StockSharp.Algo.Storages.IStorageRegistry,StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Algo.Candles.Candle},``1)">
      <summary>
            Добавить хранилище свечек.
            </summary>
      <typeparam name="TCandle">Тип свечки.</typeparam>
      <typeparam name="TArg">Тип параметра свечки.</typeparam>
      <param name="storageRegistry">Внешнее хранилище.</param>
      <param name="candleStorage">Хранилище свечек.</param>
      <param name="arg">Параметр свечки.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.GetCandleStorage``2(StockSharp.Algo.Storages.IStorageRegistry,StockSharp.BusinessEntities.Security,``1)">
      <summary>
            Получить хранилище свечек.
            </summary>
      <typeparam name="TCandle">Тип свечки.</typeparam>
      <typeparam name="TArg">Тип параметра свечки.</typeparam>
      <param name="storageRegistry">Внешнее хранилище.</param>
      <param name="security">Инструмент.</param>
      <param name="arg">Параметр свечки.</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.GetCandleStorage``2(StockSharp.Algo.Storages.IStorageRegistry,StockSharp.BusinessEntities.Security,``1,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище свечек.
            </summary>
      <typeparam name="TCandle">Тип свечки.</typeparam>
      <typeparam name="TArg">Тип параметра свечки.</typeparam>
      <param name="storageRegistry">Внешнее хранилище.</param>
      <param name="security">Инструмент.</param>
      <param name="arg">Параметр свечки.</param>
      <param name="drive">Хранилище (база данных, файл и т.д.).</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.GetCandleStorage(StockSharp.Algo.Storages.IStorageRegistry,StockSharp.Algo.Candles.CandleSeries,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище свечек.
            </summary>
      <param name="storageRegistry">Внешнее хранилище.</param>
      <param name="series">Серия свечек.</param>
      <param name="drive">Хранилище (база данных, файл и т.д.).</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.Load``1(StockSharp.Algo.Storages.IMarketDataStorage{``0},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            Создать итерационный загрузчик маркет-данных для диапазона времени.
            </summary>
      <typeparam name="TData">Тип данных.</typeparam>
      <param name="storage">Хранилище маркет-данных.</param>
      <param name="from">Время начала, с которого необходимо загружать данные. Если значение не указано, то будут загружены данные с начальной даты <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetFromDate``1(StockSharp.Algo.Storages.IMarketDataStorage{``0})" />.</param>
      <param name="to">Время окончания, до которого включительно необходимо загружать данные. Если значение не указано, то будут загружены данные до конечной даты <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetToDate``1(StockSharp.Algo.Storages.IMarketDataStorage{``0})" /> включительно.</param>
      <returns>Итерационный загрузчик маркет-данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.Delete``1(StockSharp.Algo.Storages.IMarketDataStorage{``0},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            Удалить маркет-данные из хранилища для заданного периода.
            </summary>
      <typeparam name="TData">Тип данных.</typeparam>
      <param name="storage">Хранилище маркет-данных.</param>
      <param name="from">Время начала, с которого необходимо удалять данные. Если значение не указано, то будут удалены данные с начальной даты <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetFromDate``1(StockSharp.Algo.Storages.IMarketDataStorage{``0})" />.</param>
      <param name="to">Время окончания, до которого включительно необходимо удалять данные. Если значение не указано, то будут удалены данные до конечной даты <see cref="M:StockSharp.Algo.Storages.StorageHelper.GetToDate``1(StockSharp.Algo.Storages.IMarketDataStorage{``0})" /> включительно.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.GetFromDate``1(StockSharp.Algo.Storages.IMarketDataStorage{``0})">
      <summary>
            Получить начальную дату, с которой храняться маркет-данные в хранилище.
            </summary>
      <typeparam name="TData">Тип данных.</typeparam>
      <param name="storage">Хранилище маркет-данных.</param>
      <returns>Начальная дата. Если значение не инициализировано, значит хранилище пустое.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.GetToDate``1(StockSharp.Algo.Storages.IMarketDataStorage{``0})">
      <summary>
            Получить конечную дату, по которую храняться маркет-данные в хранилище.
            </summary>
      <typeparam name="TData">Тип данных.</typeparam>
      <param name="storage">Хранилище маркет-данных.</param>
      <returns>Конечная дата. Если значение не инициализировано, значит хранилище пустое.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.GetNewChanges(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить новые изменения инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Новые изменения инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.GetNewChanges(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.SecurityChangeTypes)">
      <summary>
            Получить новые изменения инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="requiredTypes">Типы изменений, которые необходимо получить.</param>
      <returns>Новые изменения инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.ApplyChanges(StockSharp.BusinessEntities.Security,System.Collections.Generic.IEnumerable{StockSharp.Algo.Storages.SecurityChange})">
      <summary>
            Применить изменения к инструменту.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="changes">Изменения.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageHelper.GetStorageDrive(StockSharp.Algo.Storages.IMarketDataStorage)">
      <summary>
            Получить для хранилища <see cref="T:StockSharp.Algo.Storages.IMarketDataStorageDrive" />.
            </summary>
      <param name="storage">Хранилище.</param>
      <returns>
        <see cref="T:StockSharp.Algo.Storages.IMarketDataStorageDrive" />, ассоциированный с хранилищем.</returns>
    </member>
    <member name="T:StockSharp.Algo.Storages.StorageRegistry">
      <summary>
            Базовый класс, описывающий хранилище маркет-данных.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.IStorageRegistry">
      <summary>
            Интерфейс, описывающий хранилище маркет-данных.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetTradeStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище тиковых сделок для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetTradeStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище тиковых сделок для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="drive">Хранилище (база данных, файл и т.д.).</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetMarketDepthStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище стаканов для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetMarketDepthStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище стаканов для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="drive">Хранилище (база данных, файл и т.д.).</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetOrderLogStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище лога заявок для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище лога заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetOrderLogStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище лога заявок для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="drive">Хранилище (база данных, файл и т.д.).</param>
      <returns>Хранилище лога заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetSecurityChangeStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище изменений инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище изменений инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetSecurityChangeStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище лога изменений инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="drive">Хранилище (база данных, файл и т.д.).</param>
      <returns>Хранилище изменений инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetOrderTraceStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище изменений заявок.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище изменений заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetOrderTraceStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище лога изменений заявок.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="drive">Хранилище (база данных, файл и т.д.).</param>
      <returns>Хранилище изменений заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetCandleStorage(System.Type,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Получить хранилище свечек для заданного инструмента.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <param name="security">Инструмент.</param>
      <param name="arg">Параметр свечки.</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetCandleStorage(System.Type,StockSharp.BusinessEntities.Security,System.Object,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище свечек для заданного инструмента.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <param name="security">Инструмент.</param>
      <param name="arg">Параметр свечки.</param>
      <param name="drive">Хранилище (база данных, файл и т.д.).</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetStorage(StockSharp.BusinessEntities.Security,System.Type,System.Object)">
      <summary>
            Получить хранилище маркет-данных.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="dataType">Тип маркет-данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <returns>Хранилище маркет-данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.GetStorage(StockSharp.BusinessEntities.Security,System.Type,System.Object,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище маркет-данных.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="dataType">Тип маркет-данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <param name="drive">Хранилище.</param>
      <returns>Хранилище маркет-данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterTradeStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.Trade})">
      <summary>
            Зарегистрировать хранилище тиковых сделок.
            </summary>
      <param name="storage">Хранилище тиковых сделок</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterMarketDepthStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.MarketDepth})">
      <summary>
            Зарегистрировать хранилище стаканов.
            </summary>
      <param name="storage">Хранилище стаканов.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterOrderLogStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.OrderLogItem})">
      <summary>
            Зарегистрировать хранилище лога заявок.
            </summary>
      <param name="storage">Хранилище лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterOrderTraceStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.OrderTraceItem})">
      <summary>
            Зарегистрировать хранилище изменений заявок.
            </summary>
      <param name="storage">Хранилище изменений заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterSecurityChangeStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Algo.Storages.SecurityChange})">
      <summary>
            Зарегистрировать хранилище изменений инструмента.
            </summary>
      <param name="storage">Хранилище изменений инструмента.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.IStorageRegistry.RegisterCandleStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Algo.Candles.Candle},System.Type,System.Object)">
      <summary>
            Зарегистрировать хранилище свечек.
            </summary>
      <param name="storage">Хранилище свечек.</param>
      <param name="candleType">Тип свечки.</param>
      <param name="arg">Параметр свечки.</param>
    </member>
    <member name="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive">
      <summary>
            Хранилище, которое используется по-умолчанию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.StorageRegistry" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterTradeStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.Trade})">
      <summary>
            Добавить хранилище тиковых сделок.
            </summary>
      <param name="storage">Хранилище тиковых сделок</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterMarketDepthStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.MarketDepth})">
      <summary>
            Добавить хранилище стаканов.
            </summary>
      <param name="storage">Хранилище стаканов.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterOrderLogStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.OrderLogItem})">
      <summary>
            Зарегистрировать хранилище лога заявок.
            </summary>
      <param name="storage">Хранилище лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterOrderTraceStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.OrderTraceItem})">
      <summary>
            Зарегистрировать хранилище изменений заявок.
            </summary>
      <param name="storage">Хранилище изменений заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterSecurityChangeStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Algo.Storages.SecurityChange})">
      <summary>
            Зарегистрировать хранилище изменений инструмента.
            </summary>
      <param name="storage">Хранилище изменений инструмента.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.RegisterCandleStorage(StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.Algo.Candles.Candle},System.Type,System.Object)">
      <summary>
            Добавить хранилище свечек.
            </summary>
      <param name="storage">Хранилище свечек.</param>
      <param name="candleType">Тип свечки.</param>
      <param name="arg">Параметр свечки.</param>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetTradeStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище тиковых сделок для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetTradeStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище тиковых сделок для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="drive">Хранилище (база данных, файл и т.д.).</param>
      <returns>Хранилище тиковых сделок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetMarketDepthStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище стаканов для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetMarketDepthStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище стаканов для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="drive">Хранилище (база данных, файл и т.д.).</param>
      <returns>Хранилище стаканов.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetOrderLogStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище лога заявок для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище лога заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetOrderLogStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище лога заявок для заданного инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="drive">Хранилище (база данных, файл и т.д.).</param>
      <returns>Хранилище лога заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetSecurityChangeStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище изменений инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище изменений инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetSecurityChangeStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище лога изменений инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="drive">Хранилище (база данных, файл и т.д.).</param>
      <returns>Хранилище изменений инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetOrderTraceStorage(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить хранилище изменений заявок.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Хранилище изменений заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetOrderTraceStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище лога изменений заявок.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="drive">Хранилище (база данных, файл и т.д.).</param>
      <returns>Хранилище изменений заявок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetCandleStorage(System.Type,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Получить хранилище свечек для заданного инструмента.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <param name="security">Инструмент.</param>
      <param name="arg">Параметр свечки.</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetCandleStorage(System.Type,StockSharp.BusinessEntities.Security,System.Object,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище свечек для заданного инструмента.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <param name="security">Инструмент.</param>
      <param name="arg">Параметр свечки.</param>
      <param name="drive">Хранилище (база данных, файл и т.д.).</param>
      <returns>Хранилище свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetStorage(StockSharp.BusinessEntities.Security,System.Type,System.Object)">
      <summary>
            Получить хранилище маркет-данных.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="dataType">Тип маркет-данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <returns>Хранилище маркет-данных.</returns>
    </member>
    <member name="M:StockSharp.Algo.Storages.StorageRegistry.GetStorage(StockSharp.BusinessEntities.Security,System.Type,System.Object,StockSharp.Algo.Storages.IMarketDataDrive)">
      <summary>
            Получить хранилище маркет-данных.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="dataType">Тип маркет-данных.</param>
      <param name="arg">Параметр, ассоциированный с типом <paramref name="dataType" />. Например, <see cref="P:StockSharp.Algo.Candles.Candle.Arg" />.</param>
      <param name="drive">Хранилище.</param>
      <returns>Хранилище маркет-данных.</returns>
    </member>
    <member name="P:StockSharp.Algo.Storages.StorageRegistry.DefaultDrive">
      <summary>
            Хранилище, которое используется по-умолчанию.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.TradeList">
      <summary>
            Класс для представления в виде списка тиковых сделок, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.TradeList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.TradeList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Strategies.DeltaHedgeStrategy">
      <summary>
            Стратегия дельта хеджирования опционов.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.HedgeStrategy">
      <summary>
            Базовая стратегия хеджирования.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.Strategy">
      <summary>
            Базовый класс для всех торговых стратегий.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.Strategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.RaiseParametersChanged(System.String)">
      <summary>
            Вызвать события <see cref="E:StockSharp.Algo.Strategies.Strategy.ParametersChanged" /> и <see cref="E:StockSharp.Algo.Strategies.Strategy.PropertyChanged" />.
            </summary>
      <param name="name">Название параметра.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStarted">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopping">
      <summary>
            Метод вызывается тогда, когда состояние процесса <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Stopping" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopped">
      <summary>
            Метод вызывается тогда, когда состояние процесса <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Stopped" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку и автоматически добавить для запуска механизмов расчета прибыли-убытка и проскальзывания.
            </summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку и автоматически добавить для запуска механизмов расчета прибыли-убытка и проскальзывания.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять и на основе нее зарегистрировать новую.</param>
      <param name="newOrder">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку.
            </summary>
      <param name="order">Заявка для отмены.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ReRegisterSlippage(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Уведомить <see cref="P:StockSharp.Algo.Strategies.Strategy.SlippageManager" /> о перерегистрации заявки.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять и на основе нее зарегистрировать новую.</param>
      <param name="newOrder">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.AddOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить заявку в стратегию.
            </summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.AttachOrder(StockSharp.BusinessEntities.Order,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Добавить активную заявку в стратегию и обработать сделки по заявке.
            </summary>
      <remarks>
            Используется для восстановления состояния стратегии, когда необходимо
            подписаться на получение данных по заявкам, зарегистрированным ранее.
            </remarks>
      <param name="order">Заявка.</param>
      <param name="myTrades">Сделки по заявке.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.RaiseLog(StockSharp.Logging.LogMessage)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Logging.ILogSource.Log" />.
            </summary>
      <param name="message">Отладочное сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Start">
      <summary>
            Запустить торговый алгоритм.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Stop">
      <summary>
            Остановить торговый алгоритм.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.RaiseReseted">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.Reseted" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Reset">
      <summary>
            Переинициализировать торговый алгоритм.
            Вызывается после инициализации объекта стратегии и загрузки сохраненных параметров.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnReseted">
      <summary>
            Вызывается из метода <see cref="M:StockSharp.Algo.Strategies.Strategy.Reset" />. 
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.SuspendRules">
      <summary>
            Приостановить исполнение правил до следующего восстановления через метод <see cref="M:StockSharp.Algo.Strategies.Strategy.ResumeRules" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ResumeRules">
      <summary>
            Восстановить исполнение правил, остановленное через метод <see cref="M:StockSharp.Algo.Strategies.Strategy.SuspendRules" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnSecurityChanged">
      <summary>
            Метод, который вызывается при изменении инструмента стратегии.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnPortfolioChanged">
      <summary>
            Метод, который вызывается при изменении портфеля стратегии.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnPositionsChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position})">
      <summary>
            Метод, который вызывается при изменении позиций стратегии.
            </summary>
      <param name="positions">Измененные позиции стратегии.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Метод, который вызывается при появлении новых сделок стратегии.
            </summary>
      <param name="trades">Новые сделки стратегии.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderRegistering(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderRegistering" />.
            </summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderRegistered(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderRegistered" />.
            </summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderRegistering(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistering" />.
            </summary>
      <param name="order">Стоп-заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderRegistered(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistered" />.
            </summary>
      <param name="order">Стоп-заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderCanceling(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistered" />.
            </summary>
      <param name="order">Стоп-заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderCanceling(StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderRegistered" />.
            </summary>
      <param name="order">Заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderReRegistering(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.StopOrderReRegistering" />.
            </summary>
      <param name="oldOrder">Стоп-заявка, которую нужно снять.</param>
      <param name="newOrder">Новая стоп-заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderReRegistering(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.Strategy.OrderReRegistering" />.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять.</param>
      <param name="newOrder">Новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderChanged(StockSharp.BusinessEntities.Order)">
      <summary>
            Метод, который вызывается при изменении заявки стратегии.
            </summary>
      <param name="order">Измененная заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderChanged(StockSharp.BusinessEntities.Order)">
      <summary>
            Метод, который вызывается при изменении стоп-заявки стратегии.
            </summary>
      <param name="order">Измененная стоп-заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrdersChanged(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Метод, который вызывается при изменении стоп-заявок стратегии.
            </summary>
      <param name="orders">Измененные стоп-заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Метод, который вызывается при ошибке регистрации заявки стратегии.
            </summary>
      <param name="fail">Ошибка регистрации заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Метод, который вызывается при ошибке регистрации стоп-заявки стратегии.
            </summary>
      <param name="fail">Ошибка регистрации стоп-заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnOrderCancelFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Метод, который вызывается при ошибке отмены заявки стратегии.
            </summary>
      <param name="fail">Ошибка отмены заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnStopOrderCancelFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Метод, который вызывается при ошибке отмены стоп-заявки стратегии.
            </summary>
      <param name="fail">Ошибка отмены стоп-заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.ProcessNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},System.Boolean)">
      <summary>
            Обработать поступившие от шлюза <see cref="P:StockSharp.Algo.Strategies.Strategy.Trader" /> заявки, и найти из них те, что принадлежат стратегии.
            </summary>
      <param name="newOrders">Новые заявки.</param>
      <param name="isStopOrders">Признак того, пришли ли это обычные заявки или стоп-заявки.</param>
      <returns>Заявки, принадлежащие стратегии.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить настройки.
            </summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить настройки.
            </summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.CancelActiveOrders">
      <summary>
            Отменить все активные заявки (стоп и обычные).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.OnError(System.Exception)">
      <summary>
            Обработка ошибки, полученной в результате работы стратегии.
            </summary>
      <param name="error">Ошибка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.Clone">
      <summary>
            Создать копию стратегии со всеми настройками.
            </summary>
      <returns>Копия стратегии.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.Strategy.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.OnlyLogEvent">
      <summary>
            Подписаться только на Log события.
            </summary>
      <remarks>
            Данный флаг необходим для StrategyMonitorWindow.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Id">
      <summary>
            Уникальный идентификатор источника.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.LogLevel">
      <summary>
            Уровень логирования. По-умолчанию установлено в <see cref="F:StockSharp.Logging.LogLevels.Inherit" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Name">
      <summary>
            Название стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.NameGenerator">
      <summary>
            Генератор имени стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Trader">
      <summary>
            Шлюз к торговой системе.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Portfolio">
      <summary>
            Портфель.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Security">
      <summary>
            Инструмент.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.SlippageManager">
      <summary>
            Менеджер проскальзывания. Учитывает сделки данной стратегии, а так же ее дочерних стратегий <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Slippage">
      <summary>
            Суммарное значение проскальзывания.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.SlippageChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.Slippage" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.PnLManager">
      <summary>
            Менеджер прибыли-убытка. Учитывает сделки данной стратегии, а так же ее дочерних стратегий <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.PnL">
      <summary>
            Суммарное значение прибыли-убытка без учета комиссии <see cref="P:StockSharp.Algo.Strategies.Strategy.Commission" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PnLChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.PnL" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.CommissionManager">
      <summary>
            Менеджер комиссии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Commission">
      <summary>
            Суммарное значение комиссии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.CommissionChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.Commission" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.PositionManager">
      <summary>
            Менеджер позиции. Учитывает сделки данной стратегии, а так же ее дочерних стратегий <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Position">
      <summary>
            Суммарное значение позиции.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PositionChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.Position" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.LatencyManager">
      <summary>
            Менеджер задержки. Учитывает заявки данной стратегии, а так же ее дочерних стратегий <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Latency">
      <summary>
            Суммарное значение задержки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.LatencyChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.Latency" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.StatisticManager">
      <summary>
            Менеджер статистики.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Parameters">
      <summary>
            Параметры стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.ParametersChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.Parameters" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Environment">
      <summary>
            Параметры окружения стратегии. 
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.MaxErrorCount">
      <summary>
            Максимальное количество ошибок, которое должна получить стратегия прежде, чем она остановил работу.
            </summary>
      <remarks>Значение по умолчанию равно 1.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ErrorCount">
      <summary>
            Текущее количество ошибок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ProcessState">
      <summary>
            Состояние работы.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.ProcessStateChanged">
      <summary>
            Событие изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.CancelOrdersWhenStopping">
      <summary>
            Снимать активные заявки при остановке. По-умолчанию включено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Orders">
      <summary>
            Заявки, зарегистрированные в рамках стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.StopOrders">
      <summary>
            Стоп-заявки, зарегистрированные в рамках стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.OrdersKeepTime">
      <summary>
            Время хранения заявок <see cref="P:StockSharp.Algo.Strategies.Strategy.Orders" /> и <see cref="P:StockSharp.Algo.Strategies.Strategy.StopOrders" /> в памяти.
            По-умолчанию равно 2-ум дням. Если значение установлено в <see cref="F:System.TimeSpan.Zero" />, то заявки не будут удаляться.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.MyTrades">
      <summary>
            Cделки, прошедшие в течении работы стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.OrderFails">
      <summary>
            Заявки с ошибками, зарегистрированные в рамках стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Volume">
      <summary>
            Объем, которым необходимо оперировать.
            </summary>
      <remarks>
            Если значение установлено в 0, то параметр игнорируется.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ErrorState">
      <summary>
            Состояние ошибки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies">
      <summary>
            Дочерние торговые стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.StartedTime">
      <summary>
            Время запуска стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.TotalWorkingTime">
      <summary>
            Общее время работы стратегии с вычетом временных отрезков, когда стратегия останавливалась.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.DisposeOnStop">
      <summary>
            Автоматически освобождать занятые ресурсы стратерии при ее остановке
            (состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> стало равным <see cref="F:StockSharp.Algo.ProcessStates.Stopped" />)
            и удалять ее из родительской через <see cref="P:StockSharp.Algo.Strategies.Strategy.ChildStrategies" />.
            </summary>
      <remarks>Режим используется только для одноразовых стратегий, тоесть для тех, что не будут запущены повторно (например, котирование).</remarks>
      <remarks>По умолчанию выключено.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.WaitAllTrades">
      <summary>
            Останавливать стратегию только после получения всех сделок по зарегистрированным заявкам.
            </summary>
      <remarks>По умолчанию выключено.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.CommentOrders">
      <summary>
            Добавлять в <see cref="P:StockSharp.BusinessEntities.Order.Comment" /> название стратегии <see cref="P:StockSharp.Algo.Strategies.Strategy.Name" />, выставившая заявку.
            </summary>
      <remarks>По умолчанию выключено.</remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.Rules">
      <summary>
            Зарегистрированные правила.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.IsRulesSuspended">
      <summary>
            Приостановлено ли исполнение правил.
            </summary>
      <remarks>
            Приостановка правил происходит через метод <see cref="M:StockSharp.Algo.Strategies.Strategy.SuspendRules" />.
            </remarks>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderRegistering">
      <summary>
            Событие отправки заявки на регистрацию.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderRegistered">
      <summary>
            Событие об успешной регистрации заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderRegisterFailed">
      <summary>
            Событие об ошибке регистрации заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistering">
      <summary>
            Событие отправки стоп-заявки на регистрацию.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegistered">
      <summary>
            Событие об успешной регистрации стоп-заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderRegisterFailed">
      <summary>
            Событие об ошибке регистрации стоп-заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderChanged">
      <summary>
            Событие об изменении заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderChanged">
      <summary>
            Событие об изменении стоп-заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderCanceling">
      <summary>
            Событие отправки заявки на отмену.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderCanceling">
      <summary>
            Событие отправки стоп-заявки на отмену.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderReRegistering">
      <summary>
            Событие отправки заявки на перерегистрацию.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderReRegistering">
      <summary>
            Событие отправки стоп-заявки на перерегистрацию.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.OrderCancelFailed">
      <summary>
            Событие об ошибке отмены заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.StopOrderCancelFailed">
      <summary>
            Событие об ошибке отмены стоп-заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.NewMyTrades">
      <summary>
            Событие о появлении новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.TraderChanged">
      <summary>
            Событие изменения шлюза стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.SecurityChanged">
      <summary>
            Событие изменения инструмента стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PortfolioChanged">
      <summary>
            Событие изменения портфеля стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PositionsChanged">
      <summary>
            Событие изменения позиций стратегии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.Error">
      <summary>
            Событие возникновения ошибки в стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.CurrentTime">
      <summary>
            Текущее время, которое будет передано в <see cref="P:StockSharp.Logging.LogMessage.Time" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.Reseted">
      <summary>
            Событие переинициализации стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.UnrealizedPnLInterval">
      <summary>
            Интервал обработки события <see cref="E:StockSharp.Algo.Strategies.Strategy.SecurityChanged" /> для изменения <see cref="P:StockSharp.Algo.Strategies.Strategy.PnL" />.
            </summary>
      <remarks>
            Значение по-умолчанию равно 1 минуте.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.Strategy.PendingOrders">
      <summary>
            Заявки, ожидающие отправленные на регистрацию, но еще не получившие ответа.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.Strategy.PropertyChanged">
      <summary>
            Событие изменения параметров стратегии.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.IStrategyChildStrategyList">
      <summary>
            Коллекция дочерних стратегий.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.HedgeStrategy.#ctor">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.HedgeStrategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.HedgeStrategy.GetNotificationRules">
      <summary>
            Получить список правил, на которые будет реагировать рехеджирование.
            </summary>
      <returns>Список правил.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.HedgeStrategy.OnStarted">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.HedgeStrategy.GetReHedgeOrders">
      <summary>
            Получить список заявок, рехеджирующих опционную позицию.
            </summary>
      <returns>Заявки рехеджирования.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.HedgeStrategy.AddReHedgeQuoting(StockSharp.Algo.Strategies.Strategy,StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить стратегию рехеджирования.
            </summary>
      <param name="parentStrategy">Родительская стратегия (по страйку или по базовому активу).</param>
      <param name="order">Заявка рехеджирования.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.HedgeStrategy.AddReHedgeOrder(StockSharp.Algo.Strategies.Strategy,StockSharp.BusinessEntities.Order)">
      <summary>
            Добавить заявку рехеджирования.
            </summary>
      <param name="parentStrategy">Родительская стратегия (по страйку или по базовому активу).</param>
      <param name="order">Заявка рехеджирования.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.HedgeStrategy.ReHedge(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Запустить рехеджирование.
            </summary>
      <param name="orders">Заявки рехеджирования.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.HedgeStrategy.IsSuspended">
      <summary>
            Приостановлено ли рехеджирование.
            </summary>
      <returns>True, если приостановлено, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.HedgeStrategy.CreateQuoting(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать стратегию котирования для изменения позиции.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <returns>Стратегия котирования.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.HedgeStrategy.BlackScholes">
      <summary>
            Портфельная модель расчета значений "греков" по формуле Блэка-Шоулза.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.HedgeStrategy.UseQuoting">
      <summary>
            Котировать ли выставленную заявку по рыночной цене. По-умолчанию режим выключен.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.HedgeStrategy.PriceOffset">
      <summary>
            Отступ цены для выставляемой заявки. Определяет размер отступа от лучшей котировки (для покупки прибавляется к цене, для продажи - вычитается).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.DeltaHedgeStrategy.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.DeltaHedgeStrategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.DeltaHedgeStrategy.GetReHedgeOrders">
      <summary>
            Получить список заявок, рехеджирующих опционную позицию.
            </summary>
      <returns>Заявки рехеджирования.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.DeltaHedgeStrategy.PositionOffset">
      <summary>
            Сдвиг в позиции по базовому активу, позволяющая не хеджировать часть опционной позиции.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.TraderStorageFilters">
      <summary>
            Фильтры данных, которые необходимо сохранять.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.None">
      <summary>
            Не соранять ничего.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.NewSecurity">
      <summary>
            Сохранять инструмент при его появлении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.SecurityChanged">
      <summary>
            Сохранять инструмент при его изменении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.NewOrder">
      <summary>
            Сохранять заявку при ее появлении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.OrderChanged">
      <summary>
            Сохранять заявку при ее изменении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.RegisterOrderFailed">
      <summary>
            Сохранять ошибку регистрации заявки.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.RegisterCancelFailed">
      <summary>
            Сохранять ошибку снятия заявки.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.NewTrade">
      <summary>
            Сохранять сделку при его появлении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.NewMyTrade">
      <summary>
            Сохранять инструмент при ее появлении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.PositionChanged">
      <summary>
            Сохранять позицию при ее изменении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.NewPortfolio">
      <summary>
            Сохранять портфель при его появлении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.PortfolioChanged">
      <summary>
            Сохранять портфель при его изменении.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Storages.TraderStorageFilters.DepthsChanged">
      <summary>
            Сохранять стакан котировок.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.IProtectiveStrategy">
      <summary>
            Интерейс защитной стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IProtectiveStrategy.ProtectiveVolume">
      <summary>
            Защищаемый объем.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.IProtectiveStrategy.ProtectiveVolumeChanged">
      <summary>
            Событие об изменении защищаемого объема.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IProtectiveStrategy.Trade">
      <summary>
            Защищаемая сделка.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.LevelQuotingStrategy">
      <summary>
            Котирование по заданному уровню в стакане.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.QuotingStrategy">
      <summary>
            Базовая стратегия на котирование.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.QuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.#ctor(StockSharp.BusinessEntities.Order)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.QuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.NeedFinish">
      <summary>
            Можно ли остановить котирование.
            </summary>
      <remarks>
            По умолчанию, котирование останавливается тогда, когда все контракты реализованы и <see cref="P:StockSharp.Algo.Strategies.QuotingStrategy.LeftVolume" /> равно 0.
            </remarks>
      <returns>True, можно, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.GetOrderPrice(Ecng.ComponentModel.Range{System.Decimal})">
      <summary>
            Получить цену для выставляемой заявки.
            </summary>
      <param name="acceptablePriceRange">Приемлемый диапазон цены.</param>
      <returns>Цена, по которой будет выставлена заявка. Если возвращается 0, то заявка выставляться не будет.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.NeedQuoting(System.Decimal,System.Decimal,Ecng.ComponentModel.Range{System.Decimal},System.Decimal)">
      <summary>
            Нужно ли котировать заявку.
            </summary>
      <param name="currentPrice">Текущая цена.</param>
      <param name="currentVolume">Текущий объем.</param>
      <param name="acceptablePriceRange">Приемлемый диапазон цены.</param>
      <param name="newVolume">Новый объем.</param>
      <returns>Цена, по которой будет выставлена заявка. Если возвращается 0, то заявка выставляться не будет.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.GetAcceptablePriceRange">
      <summary>
            Получить приемлемый диапазон цены, попадая в который текущая заявка не будет перерегистрирована.
            </summary>
      <returns>Приемлемый диапазон цены. Если невозможно вычислить диапазон на данный момент, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.GetNewVolume">
      <summary>
            Получить новый объем для заявки.
            </summary>
      <returns>Новый объем для заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.GetNotificationRules">
      <summary>
            Получить список правил, на которые будет реагировать котирование.
            </summary>
      <returns>Список правил.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.SuspendNotificationRules(System.Action)">
      <summary>
            Приостановить правила нотификации стратегии котирования и выполнить указанное действие.
            </summary>
      <param name="action">Действие.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.OnStopped">
      <summary>
            Метод вызывается тогда, когда состояние процесса <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Stopped" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.OnStarted">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.ProcessTimeOut">
      <summary>
            Обработчик события наступления <see cref="P:StockSharp.Algo.Strategies.QuotingStrategy.TimeOut" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.OnStopping">
      <summary>
            Метод вызывается тогда, когда состояние процесса <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Stopping" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.SyncProcessQuoting">
      <summary>
            Инициировать котирование синхронно.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.NeedStop(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Нужно ли остановить котирование из-за ошибки регистрации новой заявки.
            </summary>
      <param name="fail">Описание ошибки.</param>
      <returns>True, если нужно остановить котирование. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.RegisterQuotingOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать котируемую заявку.
            </summary>
      <param name="order">Котируемая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.QuotingStrategy.ProcessQuoting">
      <summary>
            Инициировать котирование.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.QuotingDirection">
      <summary>
            Направление котирования.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.QuotingVolume">
      <summary>
            Объем, который необходимо скотировать.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.QuotingOrders">
      <summary>
            Заявки, с которыми работает в данный момент котировщик.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.MaxReRegisterCount">
      <summary>
            Максимальное количество изменений заявки, при превышении которого алгоритм будет остановлен.
            </summary>
      <remarks>
            Значение по умолчанию равно <see cref="F:System.Int32.MaxValue" />.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.CurrentReRegisterCount">
      <summary>
            Текущее количество изменений заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.MaxRegisterFailCount">
      <summary>
            Максимальное количество ошибок регистрации заявки, при превышении которого алгоритм будет остановлен.
            </summary>
      <remarks>
            Значение по умолчанию равно 100.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.CurrentRegisterFailCount">
      <summary>
            Текущее количество ошибок регистрации заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.LeftVolume">
      <summary>
            Объем, который осталось реализовать до завершения котирования.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.TimeOut">
      <summary>
            Ограничение по времени, в течении которого должно отработать котирование.
            Если весь объем <see cref="P:StockSharp.Algo.Strategies.QuotingStrategy.QuotingVolume" /> не будет реализован к этому времени, то стратегия остановит свою работу.
            </summary>
      <remarks>
            По-умолчанию ограничение выключено, и равно <see cref="F:System.TimeSpan.Zero" />.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.IsTimeOut">
      <summary>
            Наступил ли <see cref="P:StockSharp.Algo.Strategies.QuotingStrategy.TimeOut" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.RegisterInterval">
      <summary>
            Интервал частоты ререгистрации заявки, при превышении которого новая заявка выставляться не будет.
            </summary>
      <remarks>
            По-умолчанию интервал выключен, и равен <see cref="F:System.TimeSpan.Zero" />.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.BestPrice">
      <summary>
            Получить лучшую цену. Если невозможно вычислить лучшую цену на данный момент, то будет возвращено 0.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.QuotingStrategy.FilteredQuotes">
      <summary>
            Отфильтрованные с помощью <see cref="M:StockSharp.Algo.TraderHelper.GetFilteredQuotes(StockSharp.BusinessEntities.Security,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})" />
            котировки стакана (биды или оффера в зависимости от значения свойства <see cref="P:StockSharp.Algo.Strategies.QuotingStrategy.QuotingDirection" />).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.LevelQuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.LevelQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.LevelQuotingStrategy.GetAcceptablePriceRange">
      <summary>
            Получить приемлемый диапазон цены, попадая в который текущая заявка не будет перерегистрирована.
            </summary>
      <returns>Приемлемый диапазон цены. Если невозможно вычислить диапазон на данный момент, то будет возвращено null.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.LevelQuotingStrategy.GetOrderPrice(Ecng.ComponentModel.Range{System.Decimal})">
      <summary>
            Получить цену для выставляемой заявки.
            </summary>
      <param name="acceptablePriceRange">Приемлемый диапазон цены.</param>
      <returns>Цена, по которой будет выставлена заявка. Если возвращается 0, то заявка выставляться не будет.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.LevelQuotingStrategy.Level">
      <summary>
            Уровень в стакане. Определяет количество котировок вглубь стакана от лучшей. По-умолчанию равно 0, что означает котирование по лучшей котировке.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.LevelQuotingStrategy.OwnLevel">
      <summary>
            Создавать свой собственный ценовой уровень в стакане, если котировки с необходимой ценой еще нет. По-умолчанию выключено.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.LimitQuotingStrategy">
      <summary>
            Стратерия, реализующая алгоритм котирования объема по лимитированной цене.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.LimitQuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.LimitQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
      <param name="limitPrice">Лимитированная цена для котируемых заявок.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.LimitQuotingStrategy.LimitPrice">
      <summary>
            Лимитированная цена для котируемых заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.LimitQuotingStrategy.BestPrice">
      <summary>
            Получить лучшую цену. Если невозможно вычислить лучшую цену на данный момент, то будет возвращено 0.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.AutoProtectiveStrategy">
      <summary>
            Стратегия автоматической защиты позиции.
            </summary>
      <remarks>
            Новые сделки в стратегию поступают через <see cref="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.ProcessNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})" />.
            Они автоматически защищаются с помощью <see cref="T:StockSharp.Algo.Strategies.TakeProfitStopLossStrategy" />.
            Дополнительно, <see cref="T:StockSharp.Algo.Strategies.AutoProtectiveStrategy" /> переворачивает стопы в случае переворота позиции.
            </remarks>
    </member>
    <member name="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.AutoProtectiveStrategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.OnStarted">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.Protect(System.Decimal)">
      <summary>
            Защитить позицию, которая была обновлена через <see cref="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.Item(StockSharp.BusinessEntities.Security)" />.
            </summary>
      <param name="position">Позиция.</param>
      <returns>Защитная стратегия. Если будет возвращено null, значит защита позиции игнорируется.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.Protect(System.Collections.Generic.IDictionary{StockSharp.BusinessEntities.MyTrade,System.Decimal})">
      <summary>
            Защитить сделки.
            </summary>
      <param name="trades">Сделки. По ключу указана защищаемая сделка, по значению указан объем, который необходимо защитить.</param>
      <returns>Защитные стратегии.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.Sort(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{StockSharp.BusinessEntities.MyTrade,StockSharp.Algo.Strategies.IProtectiveStrategy}})">
      <summary>
            Отсортировать защитные стратегии для указания наиболее худшей и лучшей по рыночным ценам
            (при частичной закрытие позиции в первую очередь снимаются наиболее худшие).
            </summary>
      <param name="strategies">Защитные стратегии в неотсортированном порядке.</param>
      <returns>Защитные стратегии в отсортированном порядке.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.GetProtectiveTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade},System.Decimal)">
      <summary>
            Получить из всех сделок те, которые необходимо защитить.
            </summary>
      <param name="trades">Новые сделки.</param>
      <param name="maxVolume">Максимальный объем, который необъодимо защитить.</param>
      <returns>Сделки, которые необходимо защитить.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.ProcessNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Обработать сделки для коррекции объема защитных стратегий.
            </summary>
      <param name="trades">Сделки.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.TakeProfitLevel">
      <summary>
            Защитный уровень для тейк-профита. По-умолчанию уровень равен 0, что означает отключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.StopLossLevel">
      <summary>
            Защитный уровень для стоп-лосса. По-умолчанию уровень равен 0, что означает отключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.StopLossActivationOffset">
      <summary>
            Защитный сдвиг от расcчитанной цены стопа <see cref="P:StockSharp.Algo.Strategies.ProtectiveStrategy.ActivationPrice" />, который позволяет активировать защиту до достижения рынком данной цены.
            По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.IsTrailingStopLoss">
      <summary>
            Использовать ли механизм скольжения для <see cref="T:StockSharp.Algo.Strategies.StopLossStrategy" />. По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.IsTrailingTakeProfit">
      <summary>
            Использовать ли механизм скольжения для <see cref="T:StockSharp.Algo.Strategies.TakeProfitStrategy" />. По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.StopLossTimeOut">
      <summary>
            Ограничение по времени для <see cref="T:StockSharp.Algo.Strategies.StopLossStrategy" />.
            Если защита не сработает к этому времени, то позиция будет закрыта по рынку.
            По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.TakeProfitTimeOut">
      <summary>
            Ограничение по времени для <see cref="T:StockSharp.Algo.Strategies.TakeProfitStrategy" />.
            Если защита не сработает к этому времени, то позиция будет закрыта по рынку.
            По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.Item(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить или установить первоначальную позицию для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.AutoProtectiveStrategy.MyTradesStrategy">
      <summary>
            Стратегия, новые сделки которой автоматически транслируются в <see cref="M:StockSharp.Algo.Strategies.AutoProtectiveStrategy.ProcessNewMyTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyHelper">
      <summary>
            Вспомогательный класс для работы с классом <see cref="T:StockSharp.Algo.Strategies.Strategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.BuyAtMarket(StockSharp.Algo.Strategies.Strategy,System.Decimal)">
      <summary>
            Создать инициализированный объект заявки на покупку по рыночной цене.
            </summary>
      <remarks>
            Заявка не регистрируется, а только создается объект.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="volume">Объем. Если передается значение 0, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SellAtMarket(StockSharp.Algo.Strategies.Strategy,System.Decimal)">
      <summary>
            Создать инициализированный объект заявки на продажу по рыночной цене.
            </summary>
      <remarks>
            Заявка не регистрируется, а только создается объект.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="volume">Объем. Если передается значение 0, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.BuyAtLimit(StockSharp.Algo.Strategies.Strategy,System.Decimal,System.Decimal)">
      <summary>
            Создать инициализированный объект заявки на покупку.
            </summary>
      <remarks>
            Заявка не регистрируется, а только создается объект.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="price">Цена.</param>
      <param name="volume">Объем. Если передается значение 0, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.SellAtLimit(StockSharp.Algo.Strategies.Strategy,System.Decimal,System.Decimal)">
      <summary>
            Создать инициализированный объект заявки на продажу.
            </summary>
      <remarks>
            Заявка не регистрируется, а только создается объект.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="price">Цена.</param>
      <param name="volume">Объем. Если передается значение 0, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.CreateOrder(StockSharp.Algo.Strategies.Strategy,StockSharp.BusinessEntities.OrderDirections,System.Decimal,System.Decimal)">
      <summary>
            Создать инициализированный объект заявки.
            </summary>
      <remarks>
            Заявка не регистрируется, а только создается объект.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="direction">Направление заявки.</param>
      <param name="price">Цена.</param>
      <param name="volume">Объем. Если передается значение 0, то используется значение <see cref="P:StockSharp.Algo.Strategies.Strategy.Volume" />.</param>
      <returns>Инициализированный объект заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.ClosePosition(StockSharp.Algo.Strategies.Strategy,System.Decimal)">
      <summary>
            Закрыть открытую позицию по рынку (выставить заявку типа <see cref="F:StockSharp.BusinessEntities.OrderTypes.Market" />).
            </summary>
      <remarks>
            Рыночная заявка не работает на всех биржах.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="slippage">Уровень проскальзывания, допустимый при регистрации заявки. Используется, если заявка регистрируется лимиткой.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.OpenPositionByQuoting(StockSharp.Algo.Strategies.Strategy,System.Decimal)">
      <summary>
            Открыть позицию через котирование.
            </summary>
      <param name="strategy">Стратегия.</param>
      <param name="finishPosition">Значение позиции, которое необходимо достичь. Отрицательное значение означает короткую позицию.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.ClosePositionByQuoting(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Закрыть открытую позицию через котирование.
            </summary>
      <param name="strategy">Стратегия.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetMarketTime(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Получить биржевое время.
            </summary>
      <param name="strategy">Стратегия.</param>
      <returns>Биржевое время.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.GetCandleManager(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Получить менеджер свечек, ассоциированный с переданной стратегией.
            </summary>
      <param name="strategy">Стратегия.</param>
      <returns>Менеджер свечек.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyHelper.LoadState(StockSharp.Algo.Strategies.Strategy,Ecng.Serialization.SettingsStorage)">
      <summary>
            Восстановить состояние стратегии.
            </summary>
      <remarks>
            Данный метод используется для загрузки статистики, заявок и сделок.
            
            Хранилище данных должно содержать следующие параметры:
            1. Settings (SettingsStorage) - настройки стратегии.
            2. Statistics(SettingsStorage) - сохраненное состояние статистики.
            3. Orders (IDictionary[Order, IEnumerable[MyTrade]]) - заявки и сделки по ним.
            4. Positions (IEnumerable[Position]) - позиции стратегии.
            
            При отсутствии одного из параметров соответствующие данные восстанавливаться не будут.
            </remarks>
      <param name="strategy">Стратегия.</param>
      <param name="storage">Хранилище данных.</param>
    </member>
    <member name="T:StockSharp.Algo.MarketRuleHelper">
      <summary>
            Вспомогательный класс для работы с торговыми правилами <see cref="T:StockSharp.Algo.IMarketRule" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenRegistered(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие успешной регистрации заявки на бирже.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие успешной регистрации.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenActivated(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие активации стоп-заявки.
            </summary>
      <param name="stopOrder">Стоп-заявка, которую необходимо отслеживать на событие активации.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenPartiallyMatched(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие частичного исполнения заявки.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие частичного исполнения.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenRegisterFailed(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие неудачной регистрации заявки на бирже.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие неудачной регистрации.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCancelFailed(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие неудачного снятия заявки на бирже.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие неудачного снятия.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCanceled(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие отмены заявки.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие отмены.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMatched(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие полного исполнения заявки.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие полного исполнения.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие изменения заявки.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие изменения.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewTrades(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие появления сделок по заявке.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие появления сделок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenAllTrades(StockSharp.BusinessEntities.Order)">
      <summary>
            Создать правило на событие появления всех сделок по заявке.
            </summary>
      <param name="order">Заявка, которую необходимо отслеживать на событие появления всех сделок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMoneyLess(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие уменьшения денег в портфеле ниже определённого уровня.
            </summary>
      <param name="portfolio">Портфель, который необходимо отслеживать на событие уменьшении денег ниже определённого уровня.</param>
      <param name="money">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMoneyMore(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие увеличения денег в портфеле выше определённого уровня.
            </summary>
      <param name="portfolio">Портфель, который необходимо отслеживать на событие увеличения денег выше определённого уровня.</param>
      <param name="money">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenLess(StockSharp.BusinessEntities.Position,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие уменьшения позиции ниже определённого уровня.
            </summary>
      <param name="position">Позиция, которую необходимо отслеживать на событие уменьшения ниже определенного уровня.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMore(StockSharp.BusinessEntities.Position,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие увеличения позиции выше определенного уровня.
            </summary>
      <param name="position">Позиция, которую необходимо отслеживать на событие увеличения выше определенного уровня.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Changed(StockSharp.BusinessEntities.Position)">
      <summary>
            Создать правило на событие изменения позиции.
            </summary>
      <param name="position">Позиция, которую необходимо отслеживать на событие изменения.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать правило на событие изменения инструмента.
            </summary>
      <param name="security">Инструмент, изменения которого будут отслеживаться.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать правило на событие появления у инструмента новой сделки.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие появления новой сделки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewOrderLogItems(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать правило на событие появления у инструмента новых записей в логе заявок.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие появления новых записей в логе заявок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMarketDepthChanged(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать правило на событие изменения стакана по инструменту.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие изменения стакана по инструменту.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenMarketDepthChanged(StockSharp.BusinessEntities.BasketSecurity)">
      <summary>
            Создать правило на событие изменения стаканов по корзине инструментов.
            </summary>
      <param name="security">Корзина инструментов, которую необходимо отслеживать на событие изменения стаканов по внутренним инструментам.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceMore(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие превышения лучшего бида определенного уровня.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие превышения лучшего бида определенного уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceLess(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие понижения лучшего бида ниже определенного уровня.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие понижения лучшего бида ниже определенного уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceMore(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие превышения лучшего оффера определенного уровня.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие превышения лучшего оффера определенного уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceLess(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие понижения лучшего оффера ниже определенного уровня.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие понижения лучшего оффера ниже определенного уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenLastTradePriceMore(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие повышения цены последней сделки выше определённого уровня.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие повышения цены последней сделки выше определённого уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenLastTradePriceLess(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие понижения цены последней сделки ниже определённого уровня.
            </summary>
      <param name="security">Инструмент, который необходимо отслеживать на событие понижения цены последней сделки ниже определённого уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenTimeCome(StockSharp.BusinessEntities.Security,System.DateTime[])">
      <summary>
            Создать правило, которое активизируется при наступлении точного времени, указанного через <paramref name="times" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="times">Точное время. Может быть передано несколько значений.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenTimeCome(StockSharp.BusinessEntities.Security,System.Collections.Generic.IEnumerable{System.DateTime})">
      <summary>
            Создать правило, которое активизируется при наступлении точного времени, указанного через <paramref name="times" />.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="times">Точное время. Может быть передано несколько значений.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Создать правило на событие изменения стакана.
            </summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие изменения.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenSpreadMore(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие повышения размера спреда стакана на определенную величину.
            </summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие изменения спреда.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenSpreadLess(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие понижения размера спреда стакана на определенную величину.
            </summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие изменения спреда.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceMore(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие повышения лучшего бида на определенную величину.
            </summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие повышения лучшего бида на определенную величину.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestBidPriceLess(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие понижения лучшего бида на определенную величину.
            </summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие понижения лучшего бида на определенную величину.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceMore(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие повышения лучшего оффера на определенную величину.
            </summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие повышения лучшего оффера на определенную величину.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenBestAskPriceLess(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие понижения лучшего оффера на определенную величину.
            </summary>
      <param name="depth">Стакан, который необходимо отслеживать на событие понижения лучшего оффера на определенную величину.</param>
      <param name="price">Величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenClosePriceMore(StockSharp.Algo.Candles.Candle,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие превышения цены закрытия свечки выше определенного уровня.
            </summary>
      <param name="candle">Свечка, которую необходимо отслеживать на событие превышения цены закрытия свечки выше определенного уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenClosePriceLess(StockSharp.Algo.Candles.Candle,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие понижения цены закрытия свечки ниже определенного уровня.
            </summary>
      <param name="candle">Свечка, которую необходимо отслеживать на событие понижения цены закрытия свечки ниже определенного уровня.</param>
      <param name="price">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenTotalVolumeMore(StockSharp.Algo.Candles.Candle,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие превышения общего объема свечки выше определённого уровня.
            </summary>
      <param name="candle">Свечка, которую необходимо отслеживать на событие превышения общего объема выше определённого уровня.</param>
      <param name="volume">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCurrentCandleTotalVolumeMore(StockSharp.Algo.Candles.CandleSeries,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие превышения общего объема свечки выше определенного уровня.
            </summary>
      <param name="series">Серия свечек, из которой будет браться свечка.</param>
      <param name="volume">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCandlesStarted(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Создать правило на событие появления новых свечек.
            </summary>
      <param name="series">Серия свечек, для которой будут отслеживаться новые свечки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCandlesChanged(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Создать правило на событие изменения свечек.
            </summary>
      <param name="series">Серия свечек, для которой будут отслеживаться измененные свечки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCandlesFinished(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Создать правило на событие окончания свечек.
            </summary>
      <param name="series">Серия свечек, для которой будут отслеживаться законченные свечки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenCandles(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Создать правило на событие появления, изменения и икончания свечек.
            </summary>
      <param name="series">Серия свечек, для которой будут отслеживаться свечки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenChanged(StockSharp.Algo.Candles.Candle)">
      <summary>
            Создать правило на событие изменения свечки.
            </summary>
      <param name="candle">Свечка, для которой будет отслеживаться изменение.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenFinished(StockSharp.Algo.Candles.Candle)">
      <summary>
            Создать правило на событие окончания свечки.
            </summary>
      <param name="candle">Свечка, для которой будет отслеживаться окончание.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenPartiallyFinished(StockSharp.Algo.Candles.Candle,System.Decimal)">
      <summary>
            Создать правило на событие частичного окончания свечки.
            </summary>
      <param name="candle">Свечка, для которой будет отслеживаться частичное окончание.</param>
      <param name="percent">Процент завершения свечки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenPartiallyFinishedCandles(StockSharp.Algo.Candles.CandleSeries,System.Decimal)">
      <summary>
            Создать правило на событие частичного окончания свечек.
            </summary>
      <param name="series">Серия свечек, для которой будут отслеживаться частичное окончание свечки.</param>
      <param name="percent">Процент завершения свечки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewMyTrades(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие появление новых сделок стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться появление сделок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenOrderRegistered(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие появление новой заявки стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться появление заявки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenOrderChanged(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие изменения любой заявки стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение заявок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenPositionChanged(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие изменения позиции у стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение позиции.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenPositionLess(StockSharp.Algo.Strategies.Strategy,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие уменьшения позиции у стратегии ниже определённого уровня.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение позиции.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenPositionMore(StockSharp.Algo.Strategies.Strategy,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие увеличения позиции у стратегии выше определенного уровня.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение позиции.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenPnLLess(StockSharp.Algo.Strategies.Strategy,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие уменьшения прибыли ниже определённого уровня.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение прибыли.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenPnLMore(StockSharp.Algo.Strategies.Strategy,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать правило на событие увеличения прибыли выше определенного уровня.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение прибыли.</param>
      <param name="value">Уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />, то задается конкретная цена. Иначе, указывается величина сдвига.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenPnLChanged(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие изменения прибыли.
            </summary>
      <param name="strategy">Стратегия, по которой будет отслеживаться изменение прибыли.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenStarted(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие начала работы стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет ожидаться начало работы стратегии.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenStopping(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие начала остановки работы стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет ожидаться начало остановки.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenStopped(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие полной остановки работы стратегии.
            </summary>
      <param name="strategy">Стратегия, по которой будет ожидаться полная остановка.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenError(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие ошибки стратегии (переход состояния <see cref="P:StockSharp.Algo.Strategies.Strategy.ErrorState" /> в <see cref="F:StockSharp.Logging.LogLevels.Error" />).
            </summary>
      <param name="strategy">Стратегия, по которой будет ожидаться ошибка.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenWarning(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать правило на событие предупреждения стратегии (переход состояния <see cref="P:StockSharp.Algo.Strategies.Strategy.ErrorState" /> в <see cref="F:StockSharp.Logging.LogLevels.Warning" />).
            </summary>
      <param name="strategy">Стратегия, по которой будет ожидаться предупреждение.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenIntervalElapsed(StockSharp.BusinessEntities.ITrader,System.TimeSpan)">
      <summary>
            Создать правило на событие <see cref="E:StockSharp.BusinessEntities.ITrader.MarketTimeChanged" />, активизирующееся по истечению <paramref name="interval" />.
            </summary>
      <param name="trader">Шлюз к торговой системе.</param>
      <param name="interval">Интервал.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewMyTrades(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать правило на событие появление новых сделок.
            </summary>
      <param name="trader">Шлюз, по которому будет отслеживаться появление сделок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.WhenNewOrder(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать правило на событие появление новых заявок.
            </summary>
      <param name="trader">Шлюз, по которому будет отслеживаться появление заявок.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Apply(StockSharp.Algo.IMarketRule)">
      <summary>
            Сформировать правило (включить <see cref="P:StockSharp.Algo.IMarketRule.IsReady" />).
            </summary>
      <param name="rule">Правило.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Apply(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRuleContainer)">
      <summary>
            Сформировать правило (включить <see cref="P:StockSharp.Algo.IMarketRule.IsReady" />).
            </summary>
      <param name="rule">Правило.</param>
      <param name="container">Контейнер правил.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Apply``2(StockSharp.Algo.MarketRule{``0,``1})">
      <summary>
            Сформировать правило (включить <see cref="P:StockSharp.Algo.IMarketRule.IsReady" />).
            </summary>
      <typeparam name="TToken">Тип токена.</typeparam>
      <typeparam name="TArg">Тип принимаемого правилом аргумента.</typeparam>
      <param name="rule">Правило.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Apply``2(StockSharp.Algo.MarketRule{``0,``1},StockSharp.Algo.IMarketRuleContainer)">
      <summary>
            Сформировать правило (включить <see cref="P:StockSharp.Algo.IMarketRule.IsReady" />).
            </summary>
      <typeparam name="TToken">Тип токена.</typeparam>
      <typeparam name="TArg">Тип принимаемого правилом аргумента.</typeparam>
      <param name="rule">Правило.</param>
      <param name="container">Контейнер правил.</param>
      <returns>Правило.</returns>
    </member>
    <member name="F:StockSharp.Algo.MarketRuleHelper.DefaultRuleContainer">
      <summary>
            Контейнер правил, который будет применяться по умолчанию ко всем правилам, не входящим в стратегию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.SuspendRules(System.Action)">
      <summary>
            Обработать правила в приостановленном режиме (например, создать несколько правил и запустить их одновременно).
            После окончания работы метода все правила, присоединенные к контейнеру, возобновляют свою активность.
            </summary>
      <param name="action">Действие, которое необходимо обработать при остановленных правилах. Например, добавить одновременно несколько правил.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.SuspendRules(StockSharp.Algo.IMarketRuleContainer,System.Action)">
      <summary>
            Обработать правила в приостановленном режиме (например, создать несколько правил и запустить их одновременно).
            После окончания работы метода все правила, присоединенные к контейнеру, возобновляют свою активность.
            </summary>
      <param name="container">Контейнер правил.</param>
      <param name="action">Действие, которое необходимо обработать при остановленных правилах. Например, добавить одновременно несколько правил.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.TryRemoveRule(StockSharp.Algo.IMarketRuleContainer,StockSharp.Algo.IMarketRule)">
      <summary>
            Удалить правило. Если правило выполняется в момент вызова данного метода, то оно не будет удалено.
            </summary>
      <param name="container">Контейнер правил.</param>
      <param name="rule">Правило.</param>
      <returns>True, если правило было успешно удалено, false - если правило нельзя удалить в текущий момент.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Exclusive(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule)">
      <summary>
            Сделать правила взаимо исключающими.
            </summary>
      <param name="rule1">Первое правило.</param>
      <param name="rule2">Второе правило.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Or(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule[])">
      <summary>
            Объединить правила по условию ИЛИ.
            </summary>
      <param name="rule">Первое правило.</param>
      <param name="rules">Дополнительные правила.</param>
      <returns>Объединенное правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Or(System.Collections.Generic.IEnumerable{StockSharp.Algo.IMarketRule})">
      <summary>
            Объединить правила по условию ИЛИ.
            </summary>
      <param name="rules">Правила.</param>
      <returns>Объединенное правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Or``2(StockSharp.Algo.MarketRule{``0,``1},StockSharp.Algo.MarketRule{``0,``1}[])">
      <summary>
            Объединить правила по условию ИЛИ.
            </summary>
      <typeparam name="TToken">Тип токена.</typeparam>
      <typeparam name="TArg">Тип принимаемого правилом аргумента.</typeparam>
      <param name="rule">Первое правило.</param>
      <param name="rules">Дополнительные правила.</param>
      <returns>Объединенное правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.And(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRule[])">
      <summary>
            Объединить правила по условию И.
            </summary>
      <param name="rule">Первое правило.</param>
      <param name="rules">Дополнительные правила.</param>
      <returns>Объединенное правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.And(System.Collections.Generic.IEnumerable{StockSharp.Algo.IMarketRule})">
      <summary>
            Объединить правила по условию И.
            </summary>
      <param name="rules">Правила.</param>
      <returns>Объединенное правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.And``2(StockSharp.Algo.MarketRule{``0,``1},StockSharp.Algo.MarketRule{``0,``1}[])">
      <summary>
            Объединить правила по условию И.
            </summary>
      <typeparam name="TToken">Тип токена.</typeparam>
      <typeparam name="TArg">Тип принимаемого правилом аргумента.</typeparam>
      <param name="rule">Первое правило.</param>
      <param name="rules">Дополнительные правила.</param>
      <returns>Объединенное правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Register(StockSharp.Algo.IMarketRule,StockSharp.BusinessEntities.Order)">
      <summary>
            Создать действие, регистрирующее заявку.
            </summary>
      <param name="rule">Правило.</param>
      <param name="order">Заявка, которую необходимо зарегистрировать.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.ReRegister(StockSharp.Algo.IMarketRule,StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Создать действие, перерегистрирующее заявку.
            </summary>
      <param name="rule">Правило.</param>
      <param name="oldOrder">Заявка, которую необходимо перезарегистрировать.</param>
      <param name="newOrder">Информация о новой заявке.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Cancel(StockSharp.Algo.IMarketRule,StockSharp.BusinessEntities.Order)">
      <summary>
            Создать действие, отменяющее заявку.
            </summary>
      <param name="rule">Правило.</param>
      <param name="order">Заявка, которую необходимо отменить.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Protect(StockSharp.Algo.MarketRule{StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order},StockSharp.BusinessEntities.Unit,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать действие, защищающее заявку стратегиями <see cref="T:StockSharp.Algo.Strategies.TakeProfitStrategy" /> и <see cref="T:StockSharp.Algo.Strategies.StopLossStrategy" />.
            </summary>
      <param name="rule">Правило, ассоциированное с заявкой.</param>
      <param name="takePriceDelta">Дельта от цены защищаемой сделки, по которой должна быть выставлена защитная заявка тейк-профит.</param>
      <param name="stopPriceDelta">Дельта от цены защищаемой сделки, по которой должна быть выставлена защитная заявка стоп-лосс.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Protect(StockSharp.Algo.MarketRule{StockSharp.BusinessEntities.Order,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade}},StockSharp.BusinessEntities.Unit,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать действие, защищающее сделки стратегиями <see cref="T:StockSharp.Algo.Strategies.TakeProfitStrategy" /> и <see cref="T:StockSharp.Algo.Strategies.StopLossStrategy" />.
            </summary>
      <param name="rule">Правило на появление новых сделок.</param>
      <param name="takePriceDelta">Дельта от цены защищаемой сделки, по которой должна быть выставлена защитная заявка тейк-профит.</param>
      <param name="stopPriceDelta">Дельта от цены защищаемой сделки, по которой должна быть выставлена защитная заявка стоп-лосс.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Protect(StockSharp.Algo.MarketRule{StockSharp.BusinessEntities.Order,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade}},System.Func{StockSharp.BusinessEntities.MyTrade,StockSharp.Algo.Strategies.TakeProfitStrategy},System.Func{StockSharp.BusinessEntities.MyTrade,StockSharp.Algo.Strategies.StopLossStrategy})">
      <summary>
            Создать действие, защищающее сделки стратегиями <see cref="T:StockSharp.Algo.Strategies.TakeProfitStrategy" /> и <see cref="T:StockSharp.Algo.Strategies.StopLossStrategy" />.
            </summary>
      <param name="rule">Правило на появление новых сделок.</param>
      <param name="takeProfit">Функция, создающая по сделке стратегию <see cref="T:StockSharp.Algo.Strategies.TakeProfitStrategy" />.</param>
      <param name="stopLoss">Функция, создающая по сделке стратегию <see cref="T:StockSharp.Algo.Strategies.StopLossStrategy" />.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.UpdateName``1(``0,System.String)">
      <summary>
            Задать новое имя правила <see cref="P:StockSharp.Algo.IMarketRule.Name" />.
            </summary>
      <typeparam name="TRule">Тип правила.</typeparam>
      <param name="rule">Правило.</param>
      <param name="name">Новое имя правила.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.UpdateLogLevel``1(``0,StockSharp.Logging.LogLevels)">
      <summary>
            Установить уровень логирования.
            </summary>
      <typeparam name="TRule">Тип правила.</typeparam>
      <param name="rule">Правило.</param>
      <param name="level">Уровень, на котором осуществлять логирование.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Suspend``1(``0,System.Boolean)">
      <summary>
            Приостановить или возобновить правило.
            </summary>
      <typeparam name="TRule">Тип правила.</typeparam>
      <param name="rule">Правило.</param>
      <param name="suspend">True - приостановить, false - возобновить.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Sync``1(``0,System.Object)">
      <summary>
            Синхронизовать или рассинхронизовать реагирование правила с другими правилами.
            </summary>
      <typeparam name="TRule">Тип правила.</typeparam>
      <param name="rule">Правило.</param>
      <param name="syncToken">Объект синхронизации. Если значение равно null, то правило рассинхронизовывается.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.Once``1(``0)">
      <summary>
            Сделать правило одноразовым (будет вызвано только один раз).
            </summary>
      <typeparam name="TRule">Тип правила.</typeparam>
      <param name="rule">Правило.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRuleHelper.AddRuleLog(StockSharp.Algo.IMarketRuleContainer,StockSharp.Logging.LogLevels,StockSharp.Algo.IMarketRule,System.String,System.Object[])">
      <summary>
            Записать сообщение от правила.
            </summary>
      <param name="container">Контейнер правил.</param>
      <param name="level">Уровень лог-сообщения.</param>
      <param name="rule">Правило.</param>
      <param name="message">Текстовое сообщение.</param>
      <param name="args">Параметры текстового сообщения.
            Используются в случае, если message является форматирующей строкой.
            Подробнее, <see cref="M:System.String.Format(System.String,System.Object[])" />.</param>
    </member>
    <member name="T:StockSharp.Algo.MarketRule`2">
      <summary>
            Правило, активизирующее действие при наступлении рыночного условия.
            </summary>
      <typeparam name="TToken">Тип токена.</typeparam>
      <typeparam name="TArg">Тип принимаемого аргумента.</typeparam>
    </member>
    <member name="T:StockSharp.Algo.IMarketRule">
      <summary>
            Интерфейс правила, активизирующее действие при наступлении рыночного условия.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.IMarketRule.Until(System.Func{System.Boolean})">
      <summary>
            Сделать правило периодичным (будет вызываться до тех пор, пока <paramref name="canFinish" /> не вернет true).
            </summary>
      <param name="canFinish">Критерий окончания периодичности.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.IMarketRule.Do(System.Action)">
      <summary>
            Добавить действие, активизирующееся при наступлении условия.
            </summary>
      <param name="action">Действие.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.IMarketRule.Do(System.Action{System.Object})">
      <summary>
            Добавить действие, активизирующееся при наступлении условия.
            </summary>
      <param name="action">Действие, принимающее значение.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.IMarketRule.Do``1(System.Func{``0})">
      <summary>
            Добавить действие, возвращающее результат, активизирующееся при наступлении условия.
            </summary>
      <typeparam name="TResult">Тип возвращаемого результата.</typeparam>
      <param name="action">Действие, возвращающее результат.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.IMarketRule.CanFinish">
      <summary>
            Можно ли закончить правило.
            </summary>
      <returns>True, если правило больше не нужно. Иначе, false.</returns>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.Name">
      <summary>
            Имя правила.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.Container">
      <summary>
            Контейнер правил.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.LogLevel">
      <summary>
            Уровень, на котором осуществлять логирование данного правила.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.IsSuspended">
      <summary>
            Приостановлено ли правило.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.IsReady">
      <summary>
            Сформировано ли правило.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.IsActive">
      <summary>
            Активировано ли правило в данный момент.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.Token">
      <summary>
            Токен правила, с которым он ассоциирован (например, для правила <see cref="M:StockSharp.Algo.MarketRuleHelper.WhenRegistered(StockSharp.BusinessEntities.Order)" /> токеном будет являтся заявка).
            Если правильно ни с чем не ассоциировано, то будет возвращено null.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.ExclusiveRules">
      <summary>
            Правила, которые противоположны данному. Удалаются автоматически при активации данного правила.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.IMarketRule.SyncRoot">
      <summary>
            Объект синхронизации.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.#ctor(`0)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.MarketRule`2" />.
            </summary>
      <param name="token">Токен правила.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.CanFinish">
      <summary>
            Можно ли закончить правило.
            </summary>
      <returns>True, если правило больше не нужно. Иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Until(System.Func{System.Boolean})">
      <summary>
            Сделать правило периодичным (будет вызываться до тех пор, пока <paramref name="canFinish" /> не вернет true).
            </summary>
      <param name="canFinish">Критерий окончания периодичности.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Do(System.Action{`1})">
      <summary>
            Добавить действие, активизирующееся при наступлении условия.
            </summary>
      <param name="action">Действие.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Do(System.Action{StockSharp.Algo.MarketRule{`0,`1},`1})">
      <summary>
            Добавить действие, активизирующееся при наступлении условия.
            </summary>
      <param name="action">Действие.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Do``1(System.Func{`1,``0})">
      <summary>
            Добавить действие, возвращающее результат, активизирующееся при наступлении условия.
            </summary>
      <typeparam name="TResult">Тип возвращаемого результата.</typeparam>
      <param name="action">Действие, возвращающее результат.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Do``1(System.Func{StockSharp.Algo.MarketRule{`0,`1},`1,``0})">
      <summary>
            Добавить действие, возвращающее результат, активизирующееся при наступлении условия.
            </summary>
      <typeparam name="TResult">Тип возвращаемого результата.</typeparam>
      <param name="action">Действие, возвращающее результат.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Do(System.Action)">
      <summary>
            Добавить действие, активизирующееся при наступлении условия.
            </summary>
      <param name="action">Действие.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Do``1(System.Func{``0})">
      <summary>
            Добавить действие, возвращающее результат, активизирующееся при наступлении условия.
            </summary>
      <typeparam name="TResult">Тип возвращаемого результата.</typeparam>
      <param name="action">Действие, возвращающее результат.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Activated(System.Action)">
      <summary>
            Добавить обработчик, который будет вызван при активации действия.
            </summary>
      <param name="handler">Обработчик.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Activated``1(System.Action{``0})">
      <summary>
            Добавить обработчик, принимающий аргумент из <see cref="M:StockSharp.Algo.MarketRule`2.Do``1(System.Func{``0})" />, который будет вызван при активации действия.
            </summary>
      <typeparam name="TResult">Тип возвращаемого результата из обработчика правила.</typeparam>
      <param name="handler">Обработчик.</param>
      <returns>Правило.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Activate">
      <summary>
            Активировать правило.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.Activate(`1)">
      <summary>
            Активировать правило.
            </summary>
      <param name="arg">Значение, которое будет передано в обработчик, зарегистрированный через <see cref="M:StockSharp.Algo.MarketRule`2.Do(System.Action{`1})" />.</param>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.ToString">
      <summary>
            Получить строковое представление.
            </summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="M:StockSharp.Algo.MarketRule`2.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.Name">
      <summary>
            Имя правила.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.LogLevel">
      <summary>
            Уровень, на котором осуществлять логирование данного правила. По-умолчанию, <see cref="F:StockSharp.Logging.LogLevels.Inherit" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.IsSuspended">
      <summary>
            Приостановлено ли правило.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.Token">
      <summary>
            Токен правила, с которым он ассоциирован (например, для правила <see cref="M:StockSharp.Algo.MarketRuleHelper.WhenRegistered(StockSharp.BusinessEntities.Order)" /> токеном будет являтся заявка).
            Если правильно ни с чем не ассоциировано, то будет возвращено null.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.ExclusiveRules">
      <summary>
            Правила, которые противоположны данному. Удалаются автоматически при активации данного правила.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.Container">
      <summary>
            Контейнер правил.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.SyncRoot">
      <summary>
            Объект синхронизации.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.IsReady">
      <summary>
            Сформировано ли правило.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.MarketRule`2.IsActive">
      <summary>
            Активировано ли правило в данный момент.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.BasketStrategyFinishModes">
      <summary>
            Условия окончания работы дочерних стратегий.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.First">
      <summary>
            Если закончилась хотя бы одна стратегия.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.All">
      <summary>
            Если закончились все стратегии.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.None">
      <summary>
            Дочерние стратегии никак не зависят друг на друга.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.BasketStrategy">
      <summary>
            Пакетная стратегия, содержащая в себе дочерние стратегии, которые влияют друг на друга своим исполнением.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BasketStrategy.#ctor(StockSharp.Algo.Strategies.BasketStrategyFinishModes)">
      <summary>
            Создать стратегию.
            </summary>
      <param name="finishMode">Условие окончания работы дочерних стратегий.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BasketStrategy.OnStarted">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BasketStrategy.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.BasketStrategy.FinishMode">
      <summary>
            Условие окончания работы дочерних стратегий.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.BasketStrategy.FirstFinishStrategy">
      <summary>
            Первая остановившаяся дочерняя стратегия. Свойство заполняется при <see cref="P:StockSharp.Algo.Strategies.BasketStrategy.FinishMode" /> равным <see cref="F:StockSharp.Algo.Strategies.BasketStrategyFinishModes.First" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleManager">
      <summary>
            Менеджер свечек.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleManager" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.#ctor(StockSharp.Algo.Candles.Compression.ICandleBuilderSource)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleManager" />.
            </summary>
      <param name="builderSource">Источник данных для <see cref="T:StockSharp.Algo.Candles.Compression.ICandleBuilder" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleManager" />.
            </summary>
      <param name="trader">Шлюз к торговой системе для создания источника тиковых сделок по-умолчанию.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.GetSupportedRanges(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Получить временные диапазоны, для которых у данного источниках для передаваемой серии свечек есть данные.
            </summary>
      <param name="series">Серия свечек.</param>
      <returns>Временные диапазоны.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)">
      <summary>
            Запросить получение данных.
            </summary>
      <param name="series">Серия свечек, для которой необходимо начать получать данные.</param>
      <param name="from">Начальная дата, с которой необходимо получать данные.</param>
      <param name="to">Конечная дата, до которой необходимо получать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.Stop(StockSharp.Algo.Candles.CandleSeries)">
      <summary>
            Прекратить получение данных, запущенное через <see cref="M:StockSharp.Algo.Candles.CandleManager.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)" />.
            </summary>
      <param name="series">Серия свечек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.RaiseProcessDataError(System.Exception)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Candles.CandleManager.ProcessDataError" />.
            </summary>
      <param name="error">Информация об ошибке.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleManager.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleManager.Container">
      <summary>
            Kонтейнер данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleManager.StorageRegistry">
      <summary>
            Хранилище данных. Передается во все источники, реализующие интерфейс <see cref="T:StockSharp.Algo.Candles.IStorageCandleSource" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleManager.Series">
      <summary>
            Все активные на текущий момент серии свечек, запущенные через <see cref="M:StockSharp.Algo.Candles.CandleManager.Start(StockSharp.Algo.Candles.CandleSeries,System.DateTime,System.DateTime)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleManager.Sources">
      <summary>
            Источники свечек.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleManager.SpeedPriority">
      <summary>
            Приоритет источника по скорости (0 - самый оптимальный).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleManager.Processing">
      <summary>
            Событие появления нового значения для обработки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleManager.Stopped">
      <summary>
            Событие окончания обработки серии.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleManager.ProcessDataError">
      <summary>
            Событие ошибки формирования свечек.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Candles.CandleSeries">
      <summary>
            Серия свечек.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleSeries.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleSeries.#ctor(System.Type,StockSharp.BusinessEntities.Security,System.Object)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Candles.CandleSeries" />.
            </summary>
      <param name="candleType">Тип свечки.</param>
      <param name="security">Инструмент, по которому необходимо формировать свечки.</param>
      <param name="arg">Параметр формирования свечки. Например, для <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" /> это значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleSeries.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleSeries.ToString">
      <summary>
            Получить строковое представление.
            </summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleSeries.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить настройки.
            </summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Candles.CandleSeries.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить настройки.
            </summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleSeries.Security">
      <summary>
            Инструмент, по которому необходимо формировать свечки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleSeries.CandleType">
      <summary>
            Тип свечки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleSeries.Arg">
      <summary>
            Параметр формирования свечки. Например, для <see cref="T:StockSharp.Algo.Candles.TimeFrameCandle" /> это значение <see cref="P:StockSharp.Algo.Candles.TimeFrameCandle.TimeFrame" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleSeries.CandleManager">
      <summary>
            Менеджер свечек, который зарегистрировал данную серию.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleSeries.ProcessCandle">
      <summary>
            Событие обработки свечки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Candles.CandleSeries.Stopped">
      <summary>
            Событие окончания обработки серии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleSeries.WorkingTime">
      <summary>
            Граница времени, в пределах которой должны транслироваться свечки для данной серии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleSeries.From">
      <summary>
            Начальная дата, с которой необходимо получать данные.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Candles.CandleSeries.To">
      <summary>
            Конечная дата, до которой необходимо получать данные.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.ProtectiveStrategy">
      <summary>
            Базовая стратегия защиты позиции.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.#ctor(StockSharp.BusinessEntities.MyTrade,StockSharp.BusinessEntities.Unit)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.ProtectiveStrategy" />.
            </summary>
      <param name="trade">Защищаемая сделка.</param>
      <param name="protectiveLevel">
            Защитный уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />,
            то задается конкретная цена. Иначе, указывается величина сдвига от защищаемой сделки <paramref name="trade" />.
            </param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.OnStarted">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.ProcessTimeOut">
      <summary>
            Обработчик события наступления <see cref="P:StockSharp.Algo.Strategies.QuotingStrategy.TimeOut" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.NeedQuoting(System.Decimal,System.Decimal,Ecng.ComponentModel.Range{System.Decimal},System.Decimal)">
      <summary>
            Нужно ли котировать заявку.
            </summary>
      <param name="currentPrice">Текущая цена.</param>
      <param name="currentVolume">Текущий объем.</param>
      <param name="acceptablePriceRange">Приемлемый диапазон цены.</param>
      <param name="newVolume">Новый объем.</param>
      <returns>Цена, по которой будет выставлена заявка. Если возвращается 0, то заявка выставляться не будет.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.ProcessQuoting">
      <summary>
            Инициировать котирование.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.RegisterQuotingOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать котируемую заявку.
            </summary>
      <param name="order">Котируемая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.CreateQuoting">
      <summary>
            Создать стратегию котирования для защитной заявки (гарантированно исполнить ее).
            </summary>
      <returns>Стратегия котирования.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.ProtectiveStrategy.RaiseActivated">
      <summary>
            Вызвать событие <see cref="E:StockSharp.Algo.Strategies.ProtectiveStrategy.Activated" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.ProtectiveVolume">
      <summary>
            Защищаемый объем.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.ProtectiveStrategy.ProtectiveVolumeChanged">
      <summary>
            Событие об изменении защищаемого объема.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.Trade">
      <summary>
            Защищаемая сделка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.ProtectiveLevel">
      <summary>
            Защитный уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />,
            то задается конкретная цена. Иначе, указывается величина сдвига от защищаемой сделки <see cref="P:StockSharp.Algo.Strategies.ProtectiveStrategy.Trade" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.IsTrailing">
      <summary>
            Использовать ли механизм скольжения.
            Для <see cref="T:StockSharp.Algo.Strategies.TakeProfitStrategy" /> при увеличении прибыли автоматически увеличивается уровень взятия прибыли.
            Для <see cref="T:StockSharp.Algo.Strategies.StopLossStrategy" /> при увеличении прибыли автоматически увеличивается уровень защиты убытка.
            По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.ActivationPrice">
      <summary>
            Абсолютное значение цены, при достижении которой автивизируется защитная стратегия. Если цена равна 0, то активация не требуется.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.IsActivated">
      <summary>
            Активирована ли защитная стратегия.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.ProtectiveStrategy.Activated">
      <summary>
            Событие активации защитной стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.UseQuoting">
      <summary>
            Котировать ли выставленную заявку по рыночной цене. По-умолчанию режим выключен.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.BestPriceOffset">
      <summary>
            Отступ от лучшей цены, на которую может уйти котируемая заявка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.PriceOffset">
      <summary>
            Отступ цены для выставляемой заявки. Определяет размер отступа от лучшей котировки (для покупки прибавляется к цене, для продажи - вычитается).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.QuotingVolume">
      <summary>
            Объем, который необходимо скотировать.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.ProtectiveDirection">
      <summary>
            Направление защищаемой позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.BasePrice">
      <summary>
            Базовая цена защищаемой позиции, от которой будет рассчитываться <see cref="P:StockSharp.Algo.Strategies.ProtectiveStrategy.ProtectiveLevel" /> для определения <see cref="P:StockSharp.Algo.Strategies.ProtectiveStrategy.ActivationPrice" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.ProtectiveStrategy.ClosePositionPrice">
      <summary>
            Рыночная цена закрытия позиции.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Latency.LatencyManager">
      <summary>
            Менеджер менеджера расчета задержки регистрации заявок.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.LatencyManager.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Latency.LatencyManager" /></summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.LatencyManager.Reset">
      <summary>
            Обнулить расчеты.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Latency.LatencyManager.ProcessNewOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Обработать задержку регистрации заявки <see cref="P:StockSharp.BusinessEntities.Order.LatencyRegistration" />.
            </summary>
      <param name="order">Заявка.</param>
      <returns>Задержка регистрации заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Latency.LatencyManager.ProcessChangedOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Обработать задержку отмены заявки <see cref="P:StockSharp.BusinessEntities.Order.LatencyCancellation" />.
            </summary>
      <param name="order">Заявка.</param>
      <returns>Задержка отмены заявки.</returns>
    </member>
    <member name="P:StockSharp.Algo.Latency.LatencyManager.LatencyRegistration">
      <summary>
            Суммарное значение задержки регистрации по всем заявкам.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Latency.LatencyManager.LatencyCancellation">
      <summary>
            Суммарное значение задержки отмены по всем заявкам.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.PnL.PnLManager">
      <summary>
            Менеджер прибыли-убытка.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.PnL.IPnLManager">
      <summary>
            Интерфейс менеджера расчета прибыли-убытка.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.IPnLManager.Reset">
      <summary>
            Обнулить <see cref="P:StockSharp.Algo.PnL.IPnLManager.PnL" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.IPnLManager.ProcessMyTrade(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Рассчитать прибыльность сделки. Если сделка уже ранее была обработана, то возвращается предыдущая информация.
            </summary>
      <param name="trade">Сделка.</param>
      <returns>Информация о новой сделке.</returns>
    </member>
    <member name="P:StockSharp.Algo.PnL.IPnLManager.PnL">
      <summary>
            Суммарное значение прибыли-убытка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.IPnLManager.RealizedPnL">
      <summary>
            Реализованное значение прибыли-убытка.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLManager.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.PnL.PnLManager" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLManager.Reset">
      <summary>
            Обнулить <see cref="P:StockSharp.Algo.PnL.PnLManager.PnL" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.PnL.PnLManager.ProcessMyTrade(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Рассчитать прибыльность сделки. Если сделка уже ранее была обработана, то возвращается предыдущая информация.
            </summary>
      <param name="trade">Сделка.</param>
      <returns>Информация о новой сделке.</returns>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLManager.PnL">
      <summary>
            Суммарное значение прибыли-убытка.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.PnL.PnLManager.RealizedPnL">
      <summary>
            Относительное значение прибыли-убытка без учета открытой позиции.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Positions.PositionManager">
      <summary>
            Менеджер расчета позиции.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Positions.IPositionManager">
      <summary>
            Интерфейс для менеджера расчета позиции.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.IPositionManager.Reset">
      <summary>
            Обнулить позицию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.IPositionManager.ProcessOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Рассчитать позицию по заявке.
            </summary>
      <param name="order">Заявка.</param>
      <returns>Позиция по заявке.</returns>
    </member>
    <member name="M:StockSharp.Algo.Positions.IPositionManager.ProcessMyTrade(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Рассчитать позицию по сделке.
            </summary>
      <param name="trade">Сделка.</param>
      <returns>Позиция по сделке.</returns>
    </member>
    <member name="P:StockSharp.Algo.Positions.IPositionManager.Position">
      <summary>
            Суммарное значение позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.IPositionManager.Positions">
      <summary>
            Позиции, сгруппированные по инструментам и портфелям.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Positions.IPositionManager.NewPosition">
      <summary>
            Событие появления новой позиций в <see cref="P:StockSharp.Algo.Positions.IPositionManager.Positions" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Positions.IPositionManager.PositionChanged">
      <summary>
            Событие изменения позиции в <see cref="P:StockSharp.Algo.Positions.IPositionManager.Positions" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.PositionManager.#ctor(System.Boolean)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Positions.PositionManager" />.
            </summary>
      <param name="byOrders">Расчитывать позицию по реализованному объему у заявок (true) или по сделкам (false).</param>
    </member>
    <member name="M:StockSharp.Algo.Positions.PositionManager.ProcessOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Рассчитать позицию по заявке.
            </summary>
      <param name="order">Заявка.</param>
      <returns>Позиция по заявке.</returns>
    </member>
    <member name="M:StockSharp.Algo.Positions.PositionManager.Reset">
      <summary>
            Обнулить позицию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Positions.PositionManager.ProcessMyTrade(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Рассчитать позицию по сделке.
            </summary>
      <param name="trade">Сделка.</param>
      <returns>Позиция по сделке.</returns>
    </member>
    <member name="P:StockSharp.Algo.Positions.PositionManager.ByOrders">
      <summary>
            Расчитывать позицию по реализованному объему у заявок (true) или по сделкам (false).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.PositionManager.Position">
      <summary>
            Суммарное значение позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Positions.PositionManager.Positions">
      <summary>
            Позиции, сгруппированные по инструментам и портфелям.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Positions.PositionManager.NewPosition">
      <summary>
            Событие появления новой позиций в <see cref="P:StockSharp.Algo.Positions.IPositionManager.Positions" />.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Positions.PositionManager.PositionChanged">
      <summary>
            Событие изменения позиции в <see cref="P:StockSharp.Algo.Positions.IPositionManager.Positions" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Reporting.ExcelStrategyReport">
      <summary>
            Генератор отчета для стратегии в формате Excel.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Reporting.ExcelStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
      <summary>
            Создать генератор Excel отчетов.
            </summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Excel.</param>
    </member>
    <member name="M:StockSharp.Algo.Reporting.ExcelStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String,System.String)">
      <summary>
            Создать генератор Excel отчетов.
            </summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Excel.</param>
      <param name="template">Файл-шаблон, который будет скопирован в <see cref="P:StockSharp.Algo.Reporting.ExcelStrategyReport.FileName" /> и дозаполнен листом <see cref="P:StockSharp.Algo.Reporting.ExcelStrategyReport.SheetName" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Reporting.ExcelStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String,System.String,System.String)">
      <summary>
            Создать генератор Excel отчетов.
            </summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Excel.</param>
      <param name="template">Файл-шаблон, который будет скопирован в <see cref="P:StockSharp.Algo.Reporting.ExcelStrategyReport.FileName" /> и дозаполнен листом <see cref="P:StockSharp.Algo.Reporting.ExcelStrategyReport.SheetName" />.</param>
      <param name="sheetName">Названия листа, в который будет записан отчет.</param>
    </member>
    <member name="M:StockSharp.Algo.Reporting.ExcelStrategyReport.Generate">
      <summary>
            Сгенерировать отчет в формате Excel.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Reporting.ExcelStrategyReport.FileName">
      <summary>
            Название файла, в котором сгенерируется отчет в формате Excel.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Reporting.ExcelStrategyReport.Template">
      <summary>
            Файл-шаблон, который будет скопирован в <see cref="P:StockSharp.Algo.Reporting.ExcelStrategyReport.FileName" /> и дозаполнен листами Strategy, Orders и Trades.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Reporting.ExcelStrategyReport.SheetName">
      <summary>
            Названия листа, в который будет записан отчет.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Reporting.ExcelStrategyReport.ExcelVersion">
      <summary>
            Версия Excel-я. Влияет на максимальное количество строчек. По-умолчанию установлено значение 2007.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Reporting.ExcelStrategyReport.IncludeOrders">
      <summary>
            Добавлять в отчет заявки. По-умолчанию заявки добавляются.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Reporting.ExcelStrategyReport.Decimals">
      <summary>
            Количество знаков после запятой. По-умолчанию равно 2.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.IDailyInfoSoap">
      <summary>
            Интерфейс для доступа к сервису валют.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.IDailyInfoSoap.GetCursOnDate(System.DateTime)">
      <summary>
            Получить курсы валют на определенную дату.
            </summary>
      <param name="date">Дата курсов.</param>
      <returns>Курсы валют.</returns>
    </member>
    <member name="T:StockSharp.Algo.BasketTrader">
      <summary>
            Шлюз-агрегатор, позволяющий оперировать одновременно несколькими шлюзами, подключенных к разным торговым системам.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.#ctor">
      <summary>
            Создать шлюз-агрегатор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.GetMarketTime(StockSharp.BusinessEntities.Exchange)">
      <summary>
            Получить биржевое время.
            </summary>
      <param name="exchange">Биржа.</param>
      <returns>Биржевое время.</returns>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.GetSortedTraders">
      <summary>
            Получить шлюзы <see cref="P:StockSharp.Algo.BasketTrader.IInnerTraderList.SortedTraders" />, отсортированные в зависимости от заданного приоритета. По-умолчанию сортировка отсутствует.
            </summary>
      <returns>Отсортированные шлюзы.</returns>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.Connect">
      <summary>
            Подключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.Disconnect">
      <summary>
            Отключиться от торговой системы.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.Reconnect">
      <summary>
            Переподключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.StartExport">
      <summary>
            Запустить экспорт данных из торговой системы в программу (получение портфелей, инструментов, заявок и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.StopExport">
      <summary>
            Остановить экспорт данных из торговой системы в программу, запущенный через <see cref="M:StockSharp.BusinessEntities.ITrader.StartExport" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.ReStartExport">
      <summary>
            Перезапустить экспорт данных из торговой системы через методы <see cref="M:StockSharp.BusinessEntities.ITrader.StopExport" /> и <see cref="M:StockSharp.BusinessEntities.ITrader.StartExport" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.GetPosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security,System.String)">
      <summary>
            Получить позицию по портфелю и инструменту.
            </summary>
      <param name="portfolio">Портфель, по которому нужно найти позицию.</param>
      <param name="security">Инструмент, по которому нужно найти позицию.</param>
      <param name="depoName">Название депозитария, где находится физически ценная бумага.
            По-умолчанию передается пустая строка, что означает суммарную позицию по всем депозитариям.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.GetMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить стакан котировок.
            </summary>
      <param name="security">Инструмент, по которому нужно получить стакан.</param>
      <returns>Стакан котировок.</returns>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку на бирже.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку на бирже.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять.</param>
      <param name="newOrder">Новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,System.Decimal,System.Decimal)">
      <summary>
            Перерегистрировать заявку на бирже.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять и на основе нее зарегистрировать новую.</param>
      <param name="price">Цена новой заявки.</param>
      <param name="volume">Объем новой заявки.</param>
      <returns>Новая заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку на бирже.
            </summary>
      <param name="order">Заявка, которую нужно отменить.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.CancelOrders(System.Nullable{System.Boolean},StockSharp.BusinessEntities.Portfolio,System.Nullable{StockSharp.BusinessEntities.OrderDirections},System.String,StockSharp.BusinessEntities.Security)">
      <summary>
            Отменить группу заявок на бирже по фильтру.
            </summary>
      <param name="isStopOrder">True, если нужно отменить только стоп-заявки, false - если только обычный и null - если оба типа.</param>
      <param name="portfolio">Портфель. Если значение равно null, то портфель не попадает в фильтр снятия заявок.</param>
      <param name="direction">Направление заявки. Если значение равно null, то направление не попадает в фильтр снятия заявок.</param>
      <param name="classCode">Код класса. Если переданная строка пустая, то код не попадает в фильтр снятия заявок.</param>
      <param name="security">Инструмент. Если значение равно null, то инструмент не попадает в фильтр снятия заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.RegisterMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать котировки (стакан) по инструменту.
            Значение котировок можно получить через метод <see cref="M:StockSharp.BusinessEntities.ITrader.GetMarketDepth(StockSharp.BusinessEntities.Security)" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать котировки.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.UnRegisterMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение котировок по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение котировок.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.RegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать сделки (тиковые данные) по инструменту. Новые сделки будут приходить через
            событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewTrades" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.UnRegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение сделок (тиковые данные) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.RegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать новую информацию (например, <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" /> или <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.UnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение новой информации.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Начать получать новую информацию по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.UnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Остановить получение новой информации по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.RegisterOrderLog(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать лог заявок для инструмента.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать лог заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.UnRegisterOrderLog(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение лога заявок для инструмента.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.IsSupport(StockSharp.BusinessEntities.Security)">
      <summary>
            Поддерживает ли шлюз инструмент.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>True, если шлюз поддерживает инструмент, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить настройки.
            </summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить настройки.
            </summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.SaveInnerTraders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.ITrader})">
      <summary>
            Сохранить настройки вложенных шлюзов.
            </summary>
      <param name="innerTraders">Вложенные шлюзы.</param>
      <returns>Настройки.</returns>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderNewPortfolios(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.NewPortfolios" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="portfolios">Новые портфели.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderPortfoliosChanged(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.PortfoliosChanged" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="portfolios">Измененные портфели.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderNewPositions(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.NewPositions" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="positions">Новые позиции.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderPositionsChanged(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.PositionsChanged" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="positions">Измененные позиции.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderNewSecurities(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.NewSecurities" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="securities">Новые инструменты.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderSecuritiesChanged(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.SecuritiesChanged" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="securities">Измененные инструменты.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderNewTrades(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.NewTrades" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="trades">Новые сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderNewMyTrades(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.NewMyTrades" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="trades">Новые сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderNewOrders(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.NewOrders" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="orders">Новые заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderOrdersChanged(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.OrdersChanged" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="orders">Измененные заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderOrdersRegisterFailed(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderFail})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.OrdersRegisterFailed" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="fails">Информация об ошибках.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderOrdersCancelFailed(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderFail})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.OrdersCancelFailed" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="fails">Информация об ошибках.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderNewStopOrders(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.NewStopOrders" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="orders">Новые заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderStopOrdersChanged(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.StopOrdersChanged" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="orders">Измененные заявки.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderStopOrdersRegisterFailed(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderFail})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.StopOrdersRegisterFailed" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="fails">Информация об ошибках.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderStopOrdersCancelFailed(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderFail})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.StopOrdersCancelFailed" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="fails">Информация об ошибках.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderNewMarketDepths(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MarketDepth})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.NewMarketDepths" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="depths">Новые стаканы.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderMarketDepthsChanged(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MarketDepth})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.MarketDepthsChanged" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="depths">Измененные стаканы.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderNewOrderLogItems(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderLogItem})">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.NewOrderLogItems" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="items">Новые строки лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderConnected(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.Connected" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderDisconnected(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.Disconnected" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderConnectionError(StockSharp.BusinessEntities.ITrader,System.Exception)">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.ConnectionError" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="error">Информация об ошибке.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderProcessDataError(StockSharp.BusinessEntities.ITrader,System.Exception)">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.ProcessDataError" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="error">Информация об ошибке.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderNewDataExported(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.NewDataExported" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.OnInnerTraderMarketTimeChanged(StockSharp.BusinessEntities.ITrader,System.TimeSpan)">
      <summary>
            Обработчик события <see cref="E:StockSharp.BusinessEntities.ITrader.MarketTimeChanged" /> вложенного шлюза.
            </summary>
      <param name="innerTrader">Вложенный шлюз.</param>
      <param name="diff">Разница во времени, прошедшее с последнего вызова события. Первый раз событие передает значение <see cref="F:System.TimeSpan.Zero" />.</param>
    </member>
    <member name="M:StockSharp.Algo.BasketTrader.DisposeManaged">
      <summary>
            Освободить ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.SupportUnique">
      <summary>
            Поддерживать ли уникальность данных в пределах всех вложенных шлюзов <see cref="P:StockSharp.Algo.BasketTrader.InnerTraders" />.
            Например, если один и тот же инструмент транслируется из нескольких вложенных шлюзов <see cref="P:StockSharp.Algo.BasketTrader.InnerTraders" />,
            то событие <see cref="E:StockSharp.Algo.BasketTrader.NewSecurities" /> будет вызвано только один раз. По-умолчанию режим выключен.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.SupportTradesUnique">
      <summary>
            Поддерживать ли уникальность сделок в пределах всех вложенных шлюзов <see cref="P:StockSharp.Algo.BasketTrader.InnerTraders" />. По-умолчанию режим включен.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.InnerTraders">
      <summary>
            Шлюзы к торговым системам, с которыми оперирует агрегатор.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.ExchangeBoards">
      <summary>
            Список всех биржевых площадок, для которых загружены инструменты <see cref="P:StockSharp.BusinessEntities.ITrader.Securities" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.Securities">
      <summary>
            Список всех загруженных инструментов.
            Вызывать необходимо после того, как пришло событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewSecurities" />.
            Иначе будет возвращено постое множество.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.Orders">
      <summary>
            Получить все заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.StopOrders">
      <summary>
            Получить все стоп-заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.OrderRegisterFails">
      <summary>
            Получить все ошибки при регистрации заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.OrderCancelFails">
      <summary>
            Получить все ошибки при снятии заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.Trades">
      <summary>
            Получить все сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.MyTrades">
      <summary>
            Получить все собственные сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.Portfolios">
      <summary>
            Получить все портфели.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.Positions">
      <summary>
            Получить все позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.IsConnected">
      <summary>
            Проверить соединение.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.IsExportStarted">
      <summary>
            Запущен ли экспорт. Экспорт запускается через метод <see cref="M:StockSharp.Algo.BasketTrader.StartExport" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.IsSupportAtomicReRegister">
      <summary>
            Поддерживается ли перерегистрация заявок через метод <see cref="M:StockSharp.BusinessEntities.ITrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)" />
            в виде одной транзакции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.RegisteredSecurities">
      <summary>
            Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.BusinessEntities.ITrader.RegisterSecurity(StockSharp.BusinessEntities.Security)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.RegisteredMarketDepths">
      <summary>
            Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.BusinessEntities.ITrader.RegisterMarketDepth(StockSharp.BusinessEntities.Security)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.RegisteredTrades">
      <summary>
            Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.BusinessEntities.ITrader.RegisterTrades(StockSharp.BusinessEntities.Security)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.RegisteredOrderLogs">
      <summary>
            Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.BusinessEntities.ITrader.RegisterOrderLog(StockSharp.BusinessEntities.Security)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.RegisteredPortfolios">
      <summary>
            Список всех портфелей, зарегистрированных через <see cref="M:StockSharp.BusinessEntities.ITrader.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.DisplayName">
      <summary>
            Текстовое описание шлюза.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewMyTrades">
      <summary>
            Событие появления собственных новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewTrades">
      <summary>
            Событие появления всех новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewOrders">
      <summary>
            Событие появления новых заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.OrdersChanged">
      <summary>
            Событие изменения состояния заявок (снята, удовлетворена).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.OrdersRegisterFailed">
      <summary>
            Событие ошибок при регистрации заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.OrdersCancelFailed">
      <summary>
            Событие ошибок при снятии заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.StopOrdersRegisterFailed">
      <summary>
            Событие ошибок при регистрации стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.StopOrdersCancelFailed">
      <summary>
            Событие ошибок при снятии стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewStopOrders">
      <summary>
            Событие появления новых стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.StopOrdersChanged">
      <summary>
            Событие изменения состояния стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewSecurities">
      <summary>
            Событие появления новых инструментов.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.SecuritiesChanged">
      <summary>
            Событие изменения параметров инструментов.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewPortfolios">
      <summary>
            Событие появления новых портфелей.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.PortfoliosChanged">
      <summary>
            Событие изменения параметров портфелей.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewPositions">
      <summary>
            Событие появления новых позиций.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.PositionsChanged">
      <summary>
            Событие изменения параметров позиций.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewMarketDepths">
      <summary>
            Событие появления новых стаканов с котировками.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.MarketDepthsChanged">
      <summary>
            Событие изменения стаканов с котировками.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewOrderLogItems">
      <summary>
            Событие появления новых записей в логе заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.Connected">
      <summary>
            Событие успешного подключения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.Disconnected">
      <summary>
            Событие успешного отключения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.ConnectionError">
      <summary>
            Событие ошибки подключения (например, соединения было разорвано).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.NewDataExported">
      <summary>
            Событие, сигнализирующее о новых экспортируемых данных.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.ProcessDataError">
      <summary>
            Событие, сигнализирующее об ошибке при получении или обработке новых данных с сервера.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.BasketTrader.MarketTimeChanged">
      <summary>
            Событие, сигнализирующее об изменении текущего времени на биржевых площадках <see cref="P:StockSharp.BusinessEntities.ITrader.ExchangeBoards" />.
            Передается разница во времени, прошедшее с последнего вызова события. Первый раз событие передает значение <see cref="F:System.TimeSpan.Zero" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.BasketTrader.IInnerTraderList">
      <summary>
            Интерфейс, описывающий список шлюзов к торговым системам, с которыми оперирует агрегатор.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.IInnerTraderList.SortedTraders">
      <summary>
            Внутренние шлюзы, отсортированные по скорости работы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.BasketTrader.IInnerTraderList.Item(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Индексатор, через который задаются приоритеты скорости (чем меньше значение, те быстрее шлюз) на внутренние шлюзы.
            </summary>
      <param name="trader">Внутренний шлюз.</param>
      <returns>Приоритет шлюза. Если задается значение -1, то шлюз считается выключенным.</returns>
    </member>
    <member name="T:StockSharp.Algo.Slippage.SlippageManager">
      <summary>
            Менеджер проскальзывания.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Slippage.SlippageManager" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.Registering(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку для начала мониторинга проскальзывания. Ожидаемая цена равна <see cref="P:StockSharp.BusinessEntities.Order.Price" />.
            </summary>
      <param name="order">Заявка, на основе которой необходимо вычислять проскальзывание.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.Registering(StockSharp.BusinessEntities.Order,System.Decimal)">
      <summary>
            Зарегистрировать заявку для начала мониторинга проскальзывания.
            </summary>
      <param name="order">Заявка, на основе которой необходимо вычислять проскальзывание.</param>
      <param name="estimatedPrice">Ожидаемая цена сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.ReRegistering(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку <paramref name="oldOrder" /> с новой ценой из <paramref name="newOrder" />.
            </summary>
      <param name="oldOrder">Старая заявка, которая мониторится на учет проскальзывания.</param>
      <param name="newOrder">Новая заявка, которая содержит обновленную ожидаемую цену по сделкам.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.RegisterFailed(StockSharp.BusinessEntities.OrderFail)">
      <summary>
            Удалить расчет проскальзывания для ранее зарегистрированной заявки в случае ее ошибки при регистрации.
            </summary>
      <param name="fail">Информация об ошибке.</param>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.GetSlippage(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить текущее проскальзывание по заявке.
            Если заявка все еще активна, то возвращается проскальзывание,
            рассчитанное на основе частично исполненных сделок.
            </summary>
      <param name="order">Заявка, по которой необходимо получить проскальзывание.</param>
      <returns>Значение проскальзывания.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.GetOriginalOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить для текущей заявки изначальную, с цены которой начался мониторинг проскальзывания.
            </summary>
      <param name="order">Текущая заявка.</param>
      <returns>Изначальная заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.GetEstimatedPrice(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить ожидаемую цену сделки для заявки.
            </summary>
      <param name="order">Заявка, для которой необходимо получить ожидаемую цену сделки для заявки.</param>
      <returns>Ожидаемая цена сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.GetSlippage(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Получить проскальзывание по сделке.
            В качестве ожидаемой цены берется цена первоначальной заявки, которая в результате
            изменений цены через перерегистрацию <see cref="M:StockSharp.Algo.Slippage.SlippageManager.ReRegistering(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)" /> привела к сделке.
            </summary>
      <param name="trade">Сделка, для которой необходимо получить проскальзывание.</param>
      <returns>Значение проскальзывания.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.AddTrade(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Добавить новую сделку для раcсчета проскальзывания.
            </summary>
      <param name="trade">Новая сделка.</param>
      <returns>Проскальзывание для сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.Slippage.SlippageManager.Reset">
      <summary>
            Обнулить <see cref="P:StockSharp.Algo.Slippage.ISlippageManager.Slippage" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.SlippageManager.Slippage">
      <summary>
            Общее значение проскальзывания по всем заявкам, зарегистрированным через <see cref="M:StockSharp.Algo.Slippage.SlippageManager.Registering(StockSharp.BusinessEntities.Order)" />
            или <see cref="M:StockSharp.Algo.Slippage.SlippageManager.Registering(StockSharp.BusinessEntities.Order,System.Decimal)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Slippage.SlippageManager.CalculateNegative">
      <summary>
            Считать отрицательное проскальзывание. По-умолчанию расчет выключен.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StopLossStrategy">
      <summary>
            Стратегия защиты убытка.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StopLossStrategy.#ctor(StockSharp.BusinessEntities.MyTrade,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать стратегию <see cref="T:StockSharp.Algo.Strategies.StopLossStrategy" />.
            </summary>
      <param name="trade">Защищаемая позиция.</param>
      <param name="protectiveLevel">
            Защитный уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />,
            то задается конкретная цена. Иначе, указывается величина сдвига от защищаемой сделки <paramref name="trade" />.
            </param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StopLossStrategy.ActivationOffset">
      <summary>
            Защитный сдвиг от расcчитанной цены стопа <see cref="P:StockSharp.Algo.Strategies.StopLossStrategy.ActivationPrice" />, который позволяет активировать защиту до достижения рынком данной цены.
            По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StopLossStrategy.ActivationPrice">
      <summary>
            Абсолютное значение цены, при достижении которой автивизируется защитная стратегия. Если цена равна 0, то активация не требуется.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy">
      <summary>
            Котирование по лучшей цене. Для данного котирования указывается отступ от лучшей цены <see cref="P:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy.BestPriceOffset" />,
            на который может уйти котируемая заявка.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy.#ctor(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <param name="bestPriceOffset">Отступ от лучшей цены, на который может уйти котируемая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy.GetAcceptablePriceRange">
      <summary>
            Получить приемлемый диапазон цены, попадая в который текущая заявка не будет перерегистрирована.
            </summary>
      <returns>Приемлемый диапазон цены. Если невозможно вычислить диапазон на данный момент, то будет возвращено null.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.BestByPriceQuotingStrategy.BestPriceOffset">
      <summary>
            Отступ от лучшей цены, на который может уйти котируемая заявка.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy">
      <summary>
            Котирование по принципу "Лучшая по объему". Для данного котирования указывается дельта объема <see cref="P:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy.VolumeExchange" />,
            который может стоять перед котируемой заявкой.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy.#ctor(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <param name="volumeExchange">Дельта объема, который может стоять перед котируемой заявкой.</param>
      <returns>Стратегия.</returns>
    </member>
    <member name="M:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy.NeedQuoting(System.Decimal,System.Decimal,Ecng.ComponentModel.Range{System.Decimal},System.Decimal)">
      <summary>
            Нужно ли котировать заявку.
            </summary>
      <param name="currentPrice">Текущая цена.</param>
      <param name="currentVolume">Текущий объем.</param>
      <param name="acceptablePriceRange">Приемлемый диапазон цены.</param>
      <param name="newVolume">Новый объем.</param>
      <returns>Цена, по которой будет выставлена заявка. Если возвращается 0, то заявка выставляться не будет.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.BestByVolumeQuotingStrategy.VolumeExchange">
      <summary>
            Дельта объема, который может стоять перед котируемой заявкой.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.LastTradeQuotingStrategy">
      <summary>
            Котирование по цене последней сделки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.LastTradeQuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.LastTradeQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.LastTradeQuotingStrategy.#ctor(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.LastTradeQuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <param name="bestPriceOffset">Отступ от лучшей цены, на которую может уйти котируемая заявка.</param>
      <returns>Стратегия.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.LastTradeQuotingStrategy.BestPrice">
      <summary>
            Получить лучшую цену. Если невозможно вычислить лучшую цену на данный момент, то будет возвращено 0.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.MarketQuotingStrategy">
      <summary>
            Котирование по рыночной цене.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.MarketQuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.MarketQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.MarketQuotingStrategy.#ctor(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Unit,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.MarketQuotingStrategy" />.
            </summary>
      <param name="order">Заявка, которую необходимо котировать.</param>
      <param name="bestPriceOffset">Отступ от лучшей цены, на которую может уйти котируемая заявка.</param>
      <param name="priceOffset">Отступ цены для выставляемой заявки. Определяет размер отступа от лучшей котировки (для покупки прибавляется к цене, для продажи - вычитается).</param>
      <returns>Стратегия.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.MarketQuotingStrategy.PriceType">
      <summary>
            Тип рыночной цены. По умолчанию равен <see cref="F:StockSharp.Algo.MarketPriceTypes.Following" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.MarketQuotingStrategy.PriceOffset">
      <summary>
            Отступ цены для выставляемой заявки. Определяет размер отступа от лучшей котировки (для покупки прибавляется к цене, для продажи - вычитается).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.MarketQuotingStrategy.BestPrice">
      <summary>
            Получить лучшую цену. Если невозможно вычислить лучшую цену на данный момент, то будет возвращено 0.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.ProcessStates">
      <summary>
            Состояния торгового алгоритма.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.ProcessStates.Stopped">
      <summary>
            Остановлен.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.ProcessStates.Stopping">
      <summary>
            Останавливается.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.ProcessStates.Started">
      <summary>
            Запущен.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyNameGenerator">
      <summary>
            Класс для формирования имени стратегии.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyNameGenerator.#ctor(StockSharp.Algo.Strategies.Strategy)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.StrategyNameGenerator" />.
            </summary>
      <param name="strategy">Стратегия.</param>
    </member>
    <member name="F:StockSharp.Algo.Strategies.StrategyNameGenerator.Changed">
      <summary>
            Событие изменения имени.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.AutoGenerateStrategyName">
      <summary>
            Использовать ли автоматическую генерацию имени стратегии. По-умолчанию включено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.ShortName">
      <summary>
            Короткое название стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.Pattern">
      <summary>
            Паттерн для формирования имени стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyNameGenerator.Value">
      <summary>
            Сгенерированное или установленное имя стратегии.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.IStrategyParam">
      <summary>
            Параметр стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IStrategyParam.Name">
      <summary>
            Название параметра.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.IStrategyParam.Value">
      <summary>
            Значение параметра.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyParam`1">
      <summary>
            Обертка для типизированного доступа к параметру стратегии.
            </summary>
      <typeparam name="T">Тип значения параметра.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1" />.
            </summary>
      <param name="strategy">Стратегия.</param>
      <param name="name">Название параметра.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyParam`1.#ctor(StockSharp.Algo.Strategies.Strategy,System.String,`0)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1" />.
            </summary>
      <param name="strategy">Стратегия.</param>
      <param name="name">Название параметра.</param>
      <param name="initialValue">Первоначальное значение.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.Name">
      <summary>
            Название параметра.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.AllowNull">
      <summary>
            Возможно ли в <see cref="P:StockSharp.Algo.Strategies.StrategyParam`1.Value" /> хранить значение, равное null.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyParam`1.Value">
      <summary>
            Значение параметра.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyParamHelper">
      <summary>
            Вспомогательный класс для с <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyParamHelper.Param``1(StockSharp.Algo.Strategies.Strategy,System.String,``0)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.StrategyParam`1" />.
            </summary>
      <typeparam name="T">Тип значения параметра.</typeparam>
      <param name="strategy">Стратегия.</param>
      <param name="name">Название параметра.</param>
      <param name="initialValue">Первоначальное значение.</param>
      <returns>Параметр стратегии.</returns>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyTracingMode">
      <summary>
            Режимы трассировки.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.StrategyTracingMode.NoTrace">
      <summary>
            Без трассировки.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.StrategyTracingMode.WriteTrace">
      <summary>
            Писать изменения.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.StrategyTracingMode.ReadTrace">
      <summary>
            Читать изменения.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyTracer">
      <summary>
            Трассировщик заявок стратегии.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyTracer.#ctor(StockSharp.Algo.Strategies.Strategy,StockSharp.Algo.Storages.IMarketDataStorage{StockSharp.BusinessEntities.OrderTraceItem})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.StrategyTracer" />.
            </summary>
      <param name="strategy">Стратегия.</param>
      <param name="storage">Хранилище.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyTracer.DisposeManaged">
      <summary>
            Освободить ресурсы.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.StrategyTracer.NewTraceItem">
      <summary>
            Событие появления нового элемента трассировки.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.StrategyTracing">
      <summary>
            Менеджер трассировки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyTracing.#ctor(StockSharp.Algo.Storages.IStorageRegistry,System.String)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.StrategyTracing" />.
            </summary>
      <param name="storageRegistry">Внешнее хранилище.</param>
      <param name="basePath">Путь к хранилищу.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.StrategyTracing.Trace(StockSharp.Algo.Strategies.Strategy,StockSharp.Algo.Strategies.StrategyTracingMode,System.String)">
      <summary>
            Трассировать стратегию.
            </summary>
      <param name="strategy">Стратегия.</param>
      <param name="mode">Режим трассировки.</param>
      <param name="directory">Директория к данным. По-умолчанию совпадает с именем стратегии.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyTracing.StorageRegistry">
      <summary>
            Внешнее хранилище.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.StrategyTracing.BasePath">
      <summary>
            Путь к хранилищу.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.TakeProfitStopLossStrategy">
      <summary>
            Стратегия, защищающая сделки одновременно стратегиями <see cref="T:StockSharp.Algo.Strategies.TakeProfitStrategy" /> и <see cref="T:StockSharp.Algo.Strategies.StopLossStrategy" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TakeProfitStopLossStrategy.#ctor(StockSharp.Algo.Strategies.TakeProfitStrategy,StockSharp.Algo.Strategies.StopLossStrategy)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.TakeProfitStopLossStrategy" /></summary>
      <param name="takeProfit">Стратегия защиты прибыли.</param>
      <param name="stopLoss">Стратегия защиты убытка.</param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TakeProfitStopLossStrategy.ProtectiveVolume">
      <summary>
            Защищаемый объем.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Strategies.TakeProfitStopLossStrategy.ProtectiveVolumeChanged">
      <summary>
            Событие об изменении защищаемого объема.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TakeProfitStopLossStrategy.Trade">
      <summary>
            Защищаемая позиция.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.TakeProfitStrategy">
      <summary>
            Стратегия защиты прибыли.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TakeProfitStrategy.#ctor(StockSharp.BusinessEntities.MyTrade,StockSharp.BusinessEntities.Unit)">
      <summary>
            Создать стратегию <see cref="T:StockSharp.Algo.Strategies.TakeProfitStrategy" />.
            </summary>
      <param name="trade">Защищаемая позиция.</param>
      <param name="protectiveLevel">
            Защитный уровень. Если тип <see cref="P:StockSharp.BusinessEntities.Unit.Type" /> равен <see cref="F:StockSharp.BusinessEntities.UnitTypes.Limit" />,
            то задается конкретная цена. Иначе, указывается величина сдвига от защищаемой сделки <paramref name="trade" />.
            </param>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TakeProfitStrategy.ActivationPrice">
      <summary>
            Абсолютное значение цены, при достижении которой автивизируется защитная стратегия. Если цена равна 0, то активация не требуется.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.TheorPriceQuotingStrategy">
      <summary>
            Котирование опционов по теоретической цене.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TheorPriceQuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal,Ecng.ComponentModel.Range{StockSharp.BusinessEntities.Unit})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.TheorPriceQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
      <param name="theorPriceOffset">Отклонение от теоретической цены.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TheorPriceQuotingStrategy.GetAcceptablePriceRange">
      <summary>
            Получить приемлемый диапазон цены, попадая в который текущая заявка не будет перерегистрирована.
            </summary>
      <returns>Приемлемый диапазон цены. Если невозможно вычислить диапазон на данный момент, то будет возвращено null.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TheorPriceQuotingStrategy.TheorPriceOffset">
      <summary>
            Отклонение от теоретической цены.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.ProcessResults">
      <summary>
            Результаты работы одной итерации торговой стратегии.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.ProcessResults.Continue">
      <summary>
            Продолжить работу дальше.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Strategies.ProcessResults.Stop">
      <summary>
            Прекратить работу стратегии.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.TimeFrameStrategy">
      <summary>
            Торговая стратегия, основанное на тайм-фрейме.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.#ctor(System.TimeSpan)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Strategies.TimeFrameStrategy" />.
            </summary>
      <param name="timeFrame">Таймфрейм стратегии.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.OnStarted">
      <summary>
            Метод вызывается тогда, когда вызвался метод <see cref="M:StockSharp.Algo.Strategies.Strategy.Start" />, и состояние <see cref="P:StockSharp.Algo.Strategies.Strategy.ProcessState" /> перешло в значение <see cref="F:StockSharp.Algo.ProcessStates.Started" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.TimeFrameStrategy.OnProcess">
      <summary>
            Реализация торгового алгоритма.
            </summary>
      <returns>
            Результат работы одной итерации торгового алгоритма.
            </returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TimeFrameStrategy.TimeFrame">
      <summary>
            Таймфрейм стратегии.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.TimeFrameStrategy.Interval">
      <summary>
            Интервал запуска стратегии. По умолчанию равен <see cref="P:StockSharp.Algo.Strategies.TimeFrameStrategy.TimeFrame" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Strategies.VolatilityQuotingStrategy">
      <summary>
            Котирование опционов по волатильности.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Strategies.VolatilityQuotingStrategy.#ctor(StockSharp.BusinessEntities.OrderDirections,System.Decimal,Ecng.ComponentModel.Range{System.Decimal})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Strategies.VolatilityQuotingStrategy" />.
            </summary>
      <param name="quotingDirection">Направление котирования.</param>
      <param name="quotingVolume">Объем, который необходимо скотировать.</param>
      <param name="ivRange">Границы волатильности.</param>
    </member>
    <member name="M:StockSharp.Algo.Strategies.VolatilityQuotingStrategy.GetAcceptablePriceRange">
      <summary>
            Получить приемлемый диапазон цены, попадая в который текущая заявка не будет перерегистрирована.
            </summary>
      <returns>Приемлемый диапазон цены. Если невозможно вычислить диапазон на данный момент, то будет возвращено null.</returns>
    </member>
    <member name="P:StockSharp.Algo.Strategies.VolatilityQuotingStrategy.IVRange">
      <summary>
            Границы волатильности.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Strategies.VolatilityQuotingStrategy.Security">
      <summary>
            Инструмент.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.OrderFailList">
      <summary>
            Класс для представления в виде списка заявок с ошибками, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.OrderFailList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.OrderFailList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Testing.EmulationTrader">
      <summary>
            Эмуляционный шлюз. Использует исторические данные и/или случайно сгенерированные.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.#ctor(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio})">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.EmulationTrader" />.
            </summary>
      <param name="securities">Инструменты, которые будут переданы через событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewSecurities" />.</param>
      <param name="portfolios">Портфели, которые будут переданы через событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewPortfolios" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.#ctor(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Security},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio},StockSharp.Algo.Storages.IStorageRegistry)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.EmulationTrader" />.
            </summary>
      <param name="securities">Инструменты, с которыми будет вестись работа.</param>
      <param name="portfolios">Портфели, с которыми будет вестись работа.</param>
      <param name="storageRegistry">Хранилище данных.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.StartMarketTimeExport">
      <summary>
            Начать экспорт события об изменении времени.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.GetMarketTime(StockSharp.BusinessEntities.Exchange)">
      <summary>
            Получить биржевое время.
            </summary>
      <param name="exchange">Биржа.</param>
      <returns>Биржевое время.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.OnConnect">
      <summary>
            Подключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.StartExport">
      <summary>
            Запустить экспорт данных из торговой системы в программу (получение портфелей, инструментов, заявок и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.Start(System.DateTime,System.DateTime)">
      <summary>
            Начать эмуляцию.
            </summary>
      <param name="startDate">Дата в истории, с которой необходимо начать эмуляцию.</param>
      <param name="stopDate">Дата в истории, на которой необходимо закончить эмуляцию (дата включается).</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.Stop">
      <summary>
            Остановить эмуляцию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.Suspend">
      <summary>
            Приостановить эмуляцию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.Resume">
      <summary>
            Возобновить эмуляцию.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.OnRegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку на бирже.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.OnCancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку на бирже.
            </summary>
      <param name="order">Заявка, которую нужно отменять.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.OnReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку.
            </summary>
      <param name="oldOrder">Старая заявка.</param>
      <param name="newOrder">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.RegisterTrades(StockSharp.Algo.Testing.TradeGenerator)">
      <summary>
            Зарегистрировать генератор сделок.
            </summary>
      <param name="generator">Генератор сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.UnRegisterTrades(StockSharp.Algo.Testing.TradeGenerator)">
      <summary>
            Удалить генератор сделок, ранее зарегистрированный через <see cref="M:StockSharp.Algo.Testing.EmulationTrader.RegisterTrades(StockSharp.Algo.Testing.TradeGenerator)" />.
            </summary>
      <param name="generator">Генератор сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.RegisterMarketDepth(StockSharp.Algo.Testing.MarketDepthGenerator)">
      <summary>
            Зарегистрировать генератор стаканов.
            </summary>
      <param name="generator">Генератор стаканов.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.UnRegisterMarketDepth(StockSharp.Algo.Testing.MarketDepthGenerator)">
      <summary>
            Удалить генератор стаканов, ранее зарегистрированный через <see cref="M:StockSharp.Algo.Testing.EmulationTrader.RegisterMarketDepth(StockSharp.Algo.Testing.MarketDepthGenerator)" />.
            </summary>
      <param name="generator">Генератор стаканов.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.RegisterOrderLog(StockSharp.Algo.Testing.OrderLogGenerator)">
      <summary>
            Зарегистрировать генератор лога заявок.
            </summary>
      <param name="generator">Генератор лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.UnRegisterOrderLog(StockSharp.Algo.Testing.OrderLogGenerator)">
      <summary>
            Удалить генератор лога заявок, ранее зарегистрированный через <see cref="M:StockSharp.Algo.Testing.EmulationTrader.RegisterOrderLog(StockSharp.Algo.Testing.OrderLogGenerator)" />.
            </summary>
      <param name="generator">Генератор лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.RaiseMarketDepthChanged(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Вызвать событие <see cref="E:StockSharp.BusinessEntities.ITrader.MarketDepthsChanged" />.
            </summary>
      <param name="marketDepth">Стакан, который нужно передать в событие.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.OnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Начать получать новую информацию по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.OnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать новую информацию (например, <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" /> или <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationTrader.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.SecurityChangedInterval">
      <summary>
            Период аггрегации изменений инструмента. Значение TimeSpan.Zero соответствует отсутствию аггрегации.
            При большем периоде тестирование будет идти быстрее, но обновления полей Security будет с задержкой.
            Значение по умолчанию TimeSpan.Zero.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.LoadedEventCount">
      <summary>
            Число загруженных событий.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.ProcessedEventCount">
      <summary>
            Число обработанных событий.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.State">
      <summary>
            Состояние эмулятора.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.EmulationTrader.StateChanged">
      <summary>
            Событие о изменении состояния эмулятора <see cref="P:StockSharp.Algo.Testing.EmulationTrader.State" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.StorageRegistry">
      <summary>
            Хранилище данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.Drive">
      <summary>
            Хранилище, которое используется по-умолчанию. По умолчанию используется <see cref="P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.MarketEmulator">
      <summary>
            Эмулятор биржи.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.HistoricalQueue">
      <summary>
            Очередь исторических данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.IsSupportAtomicReRegister">
      <summary>
            Поддерживается ли перерегистрация заявок через метод <see cref="M:StockSharp.BusinessEntities.ITrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)" />
            в виде одной транзакции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.OrderTraces">
      <summary>
            Хранилище изменений заявок стратегий.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.PostTradeMarketTimeChangedCount">
      <summary>
            Количество вызовов события <see cref="E:StockSharp.BusinessEntities.ITrader.MarketTimeChanged" /> после окончания торгов. По-умолчанию равно 2.
            </summary>
      <remarks>
            Необходимо для активации пост-трейд правил (правила, которые опираются на события, происходящие после окончания торгов).
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.IsFinished">
      <summary>
            Закончил ли эмулятор свою работу по причине окончания данных или он был прерван через метод <see cref="M:StockSharp.Algo.Testing.EmulationTrader.Stop" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.UseMarketDepth">
      <summary>
            Загружать ли и использовать ли стаканы. 
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.UseOrderLog">
      <summary>
            Загружать ли и использовать ли ордерлог. 
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.UseCandlesTimeFrame">
      <summary>
            Использовать свечи с заданным тайм-фреймом. Если тайм-фрейм равен <see cref="F:System.TimeSpan.Zero" />, свечи не используются.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.UseSecurityChanges">
      <summary>
            Использовать ли изменения инструментов.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.DisplayName">
      <summary>
            Текстовое описание шлюза.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationTrader.CurrentTime">
      <summary>
            Текущее время, которое будет передано в <see cref="P:StockSharp.Logging.LogMessage.Time" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.MarketEmulatorSettings">
      <summary>
            Настройки эмулятора биржи.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulatorSettings.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.MarketEmulatorSettings" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.Slippage">
      <summary>
            Максимальный уровень проскальзывания, который может происходить при исполнении заявки.
            По умолчанию проскальзывание отсутствует.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.FillOnTouch">
      <summary>
            При эмулировании сведения по сделкам, производить сведение заявок, когда цена сделки коснулась цены заявки (равна цене заявки),
            а не только, когда цена сделки лучше цены заявки. По-умолчанию выключено (пессимисичный случай).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.FillMode">
      <summary>
            Стакан "наезжает" на эмулируемую заявку. В результате заявка и стакан конфликтуют.
            По умолчанию режим равен <see cref="F:StockSharp.Algo.Testing.MarketEmulatorSettings.FillModes.Fill" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.DepthExpirationTime">
      <summary>
            Максимальное время, которое стакан находится в эмуляторе. Если за это время не произошло обновление, стакан стирается.
            Это свойство можно использовать, чтобы убирать старые стаканы при наличии дыр в данных. По-умолчанию равно 1 дню.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.SyncDepthToTrades">
      <summary>
            Синхронизировать стаканы со сделками в эмуляторе (из снэпшота стакана убираются уровни по которым прошли сделки).
            Если режим выключен, новые заявки имитируются на вновь поступивших стаканах (появляется задержка). По-умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.Failing">
      <summary>
            Процентное значение ошибки регистрации новых заявок.
            Значение может быть от 0 (не будет ни одной ошибки) до 100. По-умолчанию значение равно 0.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.Latency">
      <summary>
            Минимальное значение задержки выставляемых заявок.
            По-умолчанию равно <see cref="F:System.TimeSpan.Zero" />, что означает мгновенное принятие биржей выставляемых заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.IsSupportAtomicReRegister">
      <summary>
            Поддерживается ли перерегистрация заявок в виде одной транзакции. По-умолчанию включено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.UseMarketDepth">
      <summary>
            Использовать стаканы для эмуляции. По умолчанию стаканы не используются.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.UseOrderLog">
      <summary>
            Производить эмуляцию используя ордер-лог. Входные стаканы и сделки будут игнорироваться эмулятором.
            При этом в исходящие сообщения эмулятора будут генерироваться сделки и стаканы по ордерлогу.
            По умолчанию выключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.UseOrderLogTrades">
      <summary>
            При эмуляции на ордер-логе пытаться определять <see cref="P:StockSharp.BusinessEntities.Trade.Id" /> реальных сделок при эмуляции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulatorSettings.MaxFlushTime">
      <summary>
            Посылать стратегии сделки/ордерлог пакетам. Длина пакета РТС 75мс. Опция задает максимальное 
            время между cбросами пакетов эмулятором. Реальне время может быть записано.
            По умолчанию 0 мс.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.MarketEmulatorSettings.FillModes">
      <summary>
            Режимы разрешения конфликтов.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketEmulatorSettings.FillModes.Fill">
      <summary>
            Заявка целиком сводится.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketEmulatorSettings.FillModes.Cancel">
      <summary>
            Остаток заявки после первоначального сведения снимается.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.MarketEmulatorSettings.FillModes.Keep">
      <summary>
            Заявка остается, несмотря на то что конфликтует со стаканом.
            При поступлении последующих стаканов она будет возможно сведена.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.SecurityEmulationSettings">
      <summary>
            Настройки эмулятора на уровне инструмента.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.SecurityEmulationSettings.Slippage">
      <summary>
            Максимальный уровень проскальзывания, который может происходить при исполнении заявки.
            По умолчанию проскальзывание отсутствует.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.SecurityEmulationSettings.UseOrderLog">
      <summary>
            Производить эмуляцию используя ордер-лог. Входные стаканы и сделки будут игнорироваться эмулятором.
            При этом в исходящие сообщения эмулятора будут генерироваться сделки и стаканы по ордерлогу.
            По умолчанию см. <see cref="P:StockSharp.Algo.Testing.MarketEmulatorSettings.UseOrderLog" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.IMarketEmulator">
      <summary>
            Интерфейс, описывающий эмулятор биржи.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку в эмуляторе.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку в эмуляторе.
            </summary>
      <param name="order">Заявка, которую нужно отменить.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку в эмуляторе.
            </summary>
      <param name="oldOrder">Старая заявка.</param>
      <param name="newOrder">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.UpdateQuotes(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Обновить эмулятор новыми данными о стаканах.
            </summary>
      <param name="marketDepth">Новый стакан.</param>
      <param name="delta">Приращение от старого стакана к новому. Если значение null, прарещение будет вычислено автоматически.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.UpdateTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade})">
      <summary>
            Обновить эмулятор новыми данными о сделках.
            </summary>
      <param name="newTrades">Новые сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.UpdateOrderLog(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderLogItem})">
      <summary>
            Обновить эмулятор новыми данными об ордерлоге.
            </summary>
      <param name="newItems">Новые сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.Emulate(StockSharp.Algo.Testing.Message)">
      <summary>
            Добавить сообщение в очередь и провести его эмуляцию (и более ранних сообщений).
            </summary>
      <param name="msg">Входное сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.GetSettings(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить настройки для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Настройки для инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.Reset(System.DateTime)">
      <summary>
            Сброосить состояние эмулятора и установить <see cref="P:StockSharp.Algo.Testing.IMarketEmulator.CurrentTime" />.
            </summary>
      <param name="time">Текущее время в эмуляторе.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.Start">
      <summary>
            Запустить эмулятор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.IMarketEmulator.Stop">
      <summary>
            Остановить эмулятор.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IMarketEmulator.Settings">
      <summary>
            Настройки эмулятора биржи.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IMarketEmulator.Orders">
      <summary>
            Получить все заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IMarketEmulator.OrderRegisterFails">
      <summary>
            Получить все ошибки регистрации заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IMarketEmulator.OrderCancelFails">
      <summary>
            Получить все ошибки снятия заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IMarketEmulator.MyTrades">
      <summary>
            Получить все собственные сделки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.NewMyTrades">
      <summary>
            Событие появления собственных новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.NewOrder">
      <summary>
            Событие появления новой заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.OrderChanged">
      <summary>
            Событие изменения состояния заявки (снята, удовлетворена).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.OrderFailed">
      <summary>
            Событие об ошибке регистрации или отмены заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.ProcessDataError">
      <summary>
            Событие, сигнализирующее об ошибке при получении или обработке новых данных.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.NewTrades">
      <summary>
            Событие о новых сделках.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.MarketDepthsChanged">
      <summary>
            Событие о изменении стакана.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.NewOrderLogItems">
      <summary>
            Событие появления новых записей в логе заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.MarketTimeChanged">
      <summary>
            Событие о изменении времени эмулятора.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.MessageSent">
      <summary>
            Оповещение об обработке сообщения. Для входящих сообщений вызывается при их чтении из очереди.
            Для исходящих сообщений вызывается при их постановке в очередь исходящих.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.IMarketEmulator.MessageReceived">
      <summary>
            Оповещение о вызове всех событий соответствующих приходу сообщения на сторону клиента. 
            Это происходит в момент чтения из исходящей очереди.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IMarketEmulator.CurrentTime">
      <summary>
            Текущее время в эмуляторе.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.IMarketEmulator.IsStarted">
      <summary>
            Запущен ли эмулятор.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.EmulationStates">
      <summary>
            Состояния <see cref="T:StockSharp.Algo.Testing.IEmulationTrader" />.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Stopped">
      <summary>
            Остановлен.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Stopping">
      <summary>
            Останавливается.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Starting">
      <summary>
            Запускается.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Started">
      <summary>
            Работает.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Suspending">
      <summary>
            В процессе приостановки.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.Testing.EmulationStates.Suspended">
      <summary>
            Приостановлен.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.MarketDataGenerator`1">
      <summary>
            Генератор случайным образом маркет-данных.
            </summary>
      <typeparam name="TData">Тип маркер-данных.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDataGenerator`1.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Testing.MarketDataGenerator`1" />.
            </summary>
      <param name="security">Инструмент, для которого необходимо генерировать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDataGenerator`1.Init">
      <summary>
            Инициализировать состояние генератора.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDataGenerator`1.Generate(`0,System.DateTime)">
      <summary>
            Сгенерировать маркет-данные.
            </summary>
      <param name="data">Маркет-данные.</param>
      <param name="time">Текущее время.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDataGenerator`1.IsTimeToGenerate(System.DateTime)">
      <summary>
            Требуется ли генерация новых данных.
            </summary>
      <param name="time">Текущее время.</param>
      <returns>true если надо сгенерировать данные.</returns>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.Security">
      <summary>
            Инструмент, для которого необходимо генерировать данные.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.LastGenerationTime">
      <summary>
            Время последней генерации данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.Interval">
      <summary>
            Интервал генерации данных.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MaxVolume">
      <summary>
            Максимальный объем. Объем будет выбран случайно от <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MinVolume" /> до <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MaxVolume" />.
            </summary>
      <remarks>
            Значение по умолчанию равно 20.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MinVolume">
      <summary>
            Максимальный объем. Объем будет выбран случайно от <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MinVolume" /> до <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MaxVolume" />.
            </summary>
      <remarks>
            Значение по умолчанию равно 1.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MaxPriceStepCount">
      <summary>
            Максимальное количество шагов цены <see cref="P:StockSharp.BusinessEntities.Security.MinStepSize" />, которое будет возвращатся через массив <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.Steps" />.
            </summary>
      <remarks>
            Значение по умолчанию равно 10.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.Volumes">
      <summary>
            Массив случайных объемов в диапазоне от <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MinVolume" /> до <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MaxVolume" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDataGenerator`1.Steps">
      <summary>
            Массив случайных количеств шагов цены в диапазоне от 1 до <see cref="P:StockSharp.Algo.Testing.MarketDataGenerator`1.MaxPriceStepCount" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.MarketDepthGenerator">
      <summary>
            Генератор стакана случайным методом.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDepthGenerator.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Testing.MarketDepthGenerator" />.
            </summary>
      <param name="security">Инструмент, для которого необходимо генерировать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDepthGenerator.Generate(System.DateTime)">
      <summary>
            Сгенерировать стакан.
            </summary>
      <param name="time">Биржевое время.</param>
      <returns>Сгенерированный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDepthGenerator.UpdateTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade})">
      <summary>
            Обновить генератор данными о сделках.
            </summary>
      <param name="trades">Сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDepthGenerator.CreateQuote(System.Decimal,StockSharp.BusinessEntities.OrderDirections)">
      <summary>
            Создать случайным методом котировку.
            </summary>
      <param name="startPrice">Начальная цена, от которой случайным методом необходимо получить цену котировки.</param>
      <param name="direction">Направление котировки.</param>
      <returns>Случайная котировка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketDepthGenerator.IsTimeToGenerate(System.DateTime)">
      <summary>
            Требуется ли генерация новых данных.
            </summary>
      <param name="time">Текущее время.</param>
      <returns>true если надо сгенерировать данные.</returns>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.UseTradeVolume">
      <summary>
            Использовать для генерации лучших котировок в стакане объем исторических сделок.
            </summary>
      <remarks>
            Значение по умолчанию true.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MinSpreadStepCount">
      <summary>
            Минимальная величина спреда между лучшими котировками в единицах числа шагов цены.
            Величина спреда будет выбрана случайно между <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MinSpreadStepCount" /> и <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxSpreadStepCount" />.
            </summary>
      <remarks>
            Значение по умолчанию 1.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxSpreadStepCount">
      <summary>
            Максимальная величина спреда между лучшими котировками в единицах числа шагов цены.
            Величина спреда будет выбрана случайно между <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MinSpreadStepCount" /> и <see cref="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxSpreadStepCount" />.
            </summary>
      <remarks>
            Значение по умолчанию <see cref="F:System.Int32.MaxValue" />.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxBidsDepth">
      <summary>
            Максимальная глубина бидов.
            </summary>
      <remarks>
            Значение по умолчанию равно 1.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxAsksDepth">
      <summary>
            Максимальная глубина офферов.
            </summary>
      <remarks>
            Значение по умолчанию равно 1.
            </remarks>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.GenerateDepthOnEachTrade">
      <summary>
            Генерировать ли стаканы после каждой сделки. По умолчанию false.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketDepthGenerator.MaxGenerations">
      <summary>
            Максимальное количество генераций после последнего поступления исходных данных для стакана.
            </summary>
      <remarks>
            Значение по умолчанию равно 20.
            </remarks>
    </member>
    <member name="T:StockSharp.Algo.Testing.TrendMarketDepthGenerator">
      <summary>
            Генератор стаканов, учитывающий последовательность сделок.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.TrendMarketDepthGenerator" />.
            </summary>
      <param name="security">Инструмент, для которого необходимо генерировать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.Init">
      <summary>
            Инициализировать состояние генератора.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.UpdateTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade})">
      <summary>
            Обновить генератор данными о сделках.
            </summary>
      <param name="trades">Сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.Generate(StockSharp.BusinessEntities.MarketDepth,System.DateTime)">
      <summary>
            Сгенерировать стакан, имитируя спред по направлению изменения цены последних 2х сделок.
            </summary>
      <param name="data">Маркет-данные.</param>
      <param name="time">Текущее время.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.IsTimeToGenerate(System.DateTime)">
      <summary>
            Нужно ли генерировать ли новый стакан.
            </summary>
      <param name="time">Биржевое время.</param>
      <returns>true если надо сгенерировать данные.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.TrendMarketDepthGenerator.Clone">
      <summary>
            Создать копию генератора.
            </summary>
      <returns>Копия.</returns>
    </member>
    <member name="T:StockSharp.Algo.Testing.MarketEmulator">
      <summary>
            Эмулятор биржи.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Testing.MarketEmulator" />.
            </summary>
      <param name="trader">Шлюз к торговой системе.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.GetSettings(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить настройки для инструмента.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>Настройки для инструмента.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку в эмуляторе.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку в эмуляторе.
            </summary>
      <param name="order">Старая заявка.</param>
      <param name="newOrder">Новая заявка.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.EnqueueMessage(StockSharp.Algo.Testing.Message)">
      <summary>
            Дбавить входное сообщение в очередь.
            </summary>
      <param name="message">Входное сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку в эмуляторе.
            </summary>
      <param name="order">Заявка, которую нужно отменить.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.UpdateQuotes(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Обновить эмулятор новыми данными о стаканах.
            </summary>
      <param name="marketDepth">Новый стакан.</param>
      <param name="delta">Приращение от старого стакана к новому. Если значение null, прарещение будет вычислено автоматически.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.UpdateTrades(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade})">
      <summary>
            Обновить эмулятор новыми данными о сделках.
            </summary>
      <param name="newTrades">Новые сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.UpdateOrderLog(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.OrderLogItem})">
      <summary>
            Обновить эмулятор новыми данными об ордерлоге.
            </summary>
      <param name="newItems">Новые сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.Reset(System.DateTime)">
      <summary>
            Сброосить состояние эмулятора на первоначальное.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.Start">
      <summary>
            Запустить эмулятор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.Stop">
      <summary>
            Остановить эмулятор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.Emulate(StockSharp.Algo.Testing.Message)">
      <summary>
            Добавить сообщение в очередь и провести его эмуляцию (и более ранних сообщений).
            </summary>
      <param name="msg">Входное сообщение.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.MarketEmulator.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.OrdersKeepTime">
      <summary>
            Максимальное время хранения заявок. По умолчанию 1 день.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.Settings">
      <summary>
            Настройки эмулятора биржи.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.OrderRegisterFails">
      <summary>
            Получить все ошибки регистрации заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.OrderCancelFails">
      <summary>
            Получить все ошибки снятия заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.Orders">
      <summary>
            Получить все заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.MyTrades">
      <summary>
            Получить все собственные сделки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.MarketTimeChanged">
      <summary>
            Изменилось время в эмуляторе (<see cref="P:StockSharp.Algo.Testing.MarketEmulator.CurrentTime" />).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.NewOrder">
      <summary>
            Событие появления новой заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.OrderChanged">
      <summary>
            Событие изменения состояния заявки (снята, удовлетворена).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.OrderFailed">
      <summary>
            Событие об ошибке регистрации или отмены заявки.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.ProcessDataError">
      <summary>
            Событие, сигнализирующее об ошибке при получении или обработке новых данных.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.NewMyTrades">
      <summary>
            Событие появления собственных новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.NewOrderLogItems">
      <summary>
            Событие появления новых записей в логе заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.NewTrades">
      <summary>
            Событие появления всех новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.MarketDepthsChanged">
      <summary>
            Событие изменения стаканов с котировками.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.MessageSent">
      <summary>
            Оповещение об отсылке входного сообщения в очередь.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.MarketEmulator.MessageReceived">
      <summary>
            Оповещение о приходе сообщения. Это происходит в момент чтения из исходящей очереди.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.IsStarted">
      <summary>
            Запущен ли эмулятор.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.CurrentTime">
      <summary>
            Текущее время в эмуляторе.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.MarketEmulator.EmulatorTimeZone">
      <summary>
            Временная зона, в которой работает эмулятор. По-умолчанию значение равно <see cref="P:System.TimeZoneInfo.Local" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Storages.MyTradeList">
      <summary>
            Класс для представления в виде списка собственных сделок, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.MyTradeList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.MyTradeList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.OrderList">
      <summary>
            Класс для представления в виде списка заявок, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.OrderList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.OrderList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.PortfolioList">
      <summary>
            Класс для представления в виде списка портфелей, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.PortfolioList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.PortfolioList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.PositionList">
      <summary>
            Класс для представления в виде списка позиций, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.PositionList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.PositionList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Storages.SecurityList">
      <summary>
            Класс для представления в виде списка инструментов, хранящихся во внешнем хранилище.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Storages.SecurityList.#ctor(Ecng.Serialization.IStorage)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Storages.SecurityList" />.
            </summary>
      <param name="storage">Специальный интерфейс для прямого доступа к хранилищу.</param>
    </member>
    <member name="T:StockSharp.Algo.Testing.Message">
      <summary>
            Сообщение, содержащее рыночные данные(события) или команду на операцию с заявкой, или статус заявки.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.Message.Append(StockSharp.Algo.Testing.Message)">
      <summary>
            Добавить сообщение.
            </summary>
      <param name="other">Другое сообщение, которое необходимо добавить.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.Message.Emulate(StockSharp.Algo.Testing.MarketEmulator)">
      <summary>
            Произвести эмуляцию сообщения в эмуляторе.
            </summary>
      <param name="emulator">Эмулятор.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.Message.RaiseEvents(StockSharp.Algo.Storages.DataFeedTrader)">
      <summary>
            Послать сообщение клиенту.
            </summary>
      <param name="trader">Шлюз.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.Message.RaiseEvents(StockSharp.Algo.Testing.MarketEmulator)">
      <summary>
            Послать сообщение клиенту.
            </summary>
      <param name="emulator">Эмулятор.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.Message.ToString">
      <summary>
            Получить строковое представление.
            </summary>
      <returns>Строковое представление.</returns>
    </member>
    <member name="P:StockSharp.Algo.Testing.Message.Time">
      <summary>
            Момент времени, когда сообщение придет в конечную точку. 
            Может не совпадать с временой меткой данных в сообщении (latency).
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.Message.Security">
      <summary>
            Инструмент.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.Message.DataType">
      <summary>
            Тип сообщения.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.Message.EventCount">
      <summary>
            Число рыночных событий в сообщении.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.OrderLogGenerator">
      <summary>
            Генератор лога заявок случайным методом.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.#ctor(StockSharp.BusinessEntities.Security,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.OrderLogGenerator" />.
            </summary>
      <param name="security">Инструмент, для которого необходимо генерировать данные.</param>
      <param name="startPrice">Цена, от которой начинается расчёт нормального распределения.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.#ctor(StockSharp.BusinessEntities.Security,System.Decimal,StockSharp.Algo.Testing.TradeGenerator)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.OrderLogGenerator" />.
            </summary>
      <param name="security">Инструмент, для которого необходимо генерировать данные.</param>
      <param name="startPrice">Цена, от которой начинается расчёт нормального распределения.</param>
      <param name="tradeGenerator">Генератор тиковых сделок случайным методом.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.Init">
      <summary>
            Инициализировать состояние генератора.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.Generate(System.DateTime)">
      <summary>
            Сгенерировать случайную операцию.
            </summary>
      <param name="time">Время операции.</param>
      <returns>Случайная операция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.OrderLogGenerator.Clone">
      <summary>
            Создать копию генератора.
            </summary>
      <returns>Копия.</returns>
    </member>
    <member name="P:StockSharp.Algo.Testing.OrderLogGenerator.TradeGenerator">
      <summary>
            Генератор тиковых сделок случайным методом.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.OrderLogGenerator.IdGenerator">
      <summary>
            Генератор номера заявки <see cref="P:StockSharp.BusinessEntities.Order.Id" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.RealTimeEmulationTrader`1">
      <summary>
            Тестовый шлюз, предназначенный для тестирования стратегии c реальном подключения к торговой системе через <see cref="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnderlyingTrader" />,
            но без реального выставления заявок на бирже. Испонение заявок и их сделки эмулируются шлюзом, используя информацию по стаканам, приходящих от реального шлюза.
            </summary>
      <typeparam name="TUnderlyingTrader">Тип реального шлюза, с которым будет вестить тестирование.</typeparam>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.#ctor">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.RealTimeEmulationTrader`1" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.#ctor(`0,System.Boolean)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.RealTimeEmulationTrader`1" />.
            </summary>
      <param name="underlyingTrader">Реальный шлюз к торговой системе.</param>
      <param name="ownTrader">Контролировать время жизни шлюза <paramref name="underlyingTrader" />.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.GetMarketTime(StockSharp.BusinessEntities.Exchange)">
      <summary>
            Получить биржевое время.
            </summary>
      <param name="exchange">Биржа.</param>
      <returns>Биржевое время.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Connect">
      <summary>
            Подключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Disconnect">
      <summary>
            Отключиться от торговой системы.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Reconnect">
      <summary>
            Переподключиться к торговой системе.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.ReStartExport">
      <summary>
            Перезапустить экспорт данных из торговой системы через методы <see cref="M:StockSharp.BusinessEntities.ITrader.StopExport" /> и <see cref="M:StockSharp.BusinessEntities.ITrader.StartExport" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.GetPosition(StockSharp.BusinessEntities.Portfolio,StockSharp.BusinessEntities.Security,System.String)">
      <summary>
            Получить позицию по портфелю и инструменту.
            </summary>
      <param name="portfolio">Портфель, по которому нужно найти позицию.</param>
      <param name="security">Инструмент, по которому нужно найти позицию.</param>
      <param name="depoName">Название депозитария, где находится физически ценная бумага.
            По-умолчанию передается пустая строка, что означает суммарную позицию по всем депозитариям.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.GetMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить стакан котировок.
            </summary>
      <param name="security">Инструмент, по которому нужно получить стакан.</param>
      <returns>Стакан котировок.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.IsSupport(StockSharp.BusinessEntities.Security)">
      <summary>
            Поддерживает ли шлюз инструмент.
            </summary>
      <param name="security">Инструмент.</param>
      <returns>True, если шлюз поддерживает инструмент, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Начать получать новую информацию по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnRegisterPortfolio(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Остановить получение новой информации по портфелю.
            </summary>
      <param name="portfolio">Портфель, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisterOrderLog(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать лог заявок для инструмента.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать лог заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnRegisterOrderLog(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение лога заявок для инструмента.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение лога заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать новую информацию (например, <see cref="P:StockSharp.BusinessEntities.Security.LastTrade" /> или <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать новую информацию.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnRegisterSecurity(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение новой информации.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение новой информации.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisterOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Зарегистрировать заявку на бирже.
            </summary>
      <param name="order">Заявка, содержащая информацию для регистрации.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)">
      <summary>
            Перерегистрировать заявку на бирже.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять.</param>
      <param name="newOrder">Новая заявка, которую нужно зарегистрировать.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.ReRegisterOrder(StockSharp.BusinessEntities.Order,System.Decimal,System.Decimal)">
      <summary>
            Перерегистрировать заявку на бирже.
            </summary>
      <param name="oldOrder">Заявка, которую нужно снять и на основе нее зарегистрировать новую.</param>
      <param name="price">Цена новой заявки.</param>
      <param name="volume">Объем новой заявки.</param>
      <returns>Новая заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.CancelOrder(StockSharp.BusinessEntities.Order)">
      <summary>
            Отменить заявку на бирже.
            </summary>
      <param name="order">Заявка, которую нужно отменять.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.CancelOrders(System.Nullable{System.Boolean},StockSharp.BusinessEntities.Portfolio,System.Nullable{StockSharp.BusinessEntities.OrderDirections},System.String,StockSharp.BusinessEntities.Security)">
      <summary>
            Отменить группу заявок на бирже по фильтру.
            </summary>
      <param name="isStopOrder">True, если нужно отменить только стоп-заявки, false - если только обычный и null - если оба типа.</param>
      <param name="portfolio">Портфель. Если значение равно null, то портфель не попадает в фильтр снятия заявок.</param>
      <param name="direction">Направление заявки. Если значение равно null, то направление не попадает в фильтр снятия заявок.</param>
      <param name="classCode">Код класса. Если переданная строка пустая, то код не попадает в фильтр снятия заявок.</param>
      <param name="security">Инструмент. Если значение равно null, то инструмент не попадает в фильтр снятия заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisterMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать котировки (стакан) по инструменту.
            Значение котировок можно получить через метод <see cref="M:StockSharp.BusinessEntities.ITrader.GetMarketDepth(StockSharp.BusinessEntities.Security)" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать котировки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnRegisterMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение котировок по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение котировок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Начать получать сделки (тиковые данные) по инструменту. Новые сделки будут приходить через событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewTrades" />.
            </summary>
      <param name="security">Инструмент, по которому необходимо начать получать сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnRegisterTrades(StockSharp.BusinessEntities.Security)">
      <summary>
            Остановить получение сделок (тиковые данные) по инструменту.
            </summary>
      <param name="security">Инструмент, по которому необходимо остановить получение сделок.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.StartExport">
      <summary>
            Запустить экспорт данных из торговой системы в программу (получение портфелей, инструментов, заявок и т.д.).
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.StopExport">
      <summary>
            Остановить экспорт данных из торговой системы в программу, запущенный через <see cref="M:StockSharp.BusinessEntities.ITrader.StartExport" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Load(Ecng.Serialization.SettingsStorage)">
      <summary>
            Загрузить настройки.
            </summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Save(Ecng.Serialization.SettingsStorage)">
      <summary>
            Сохранить настройки.
            </summary>
      <param name="storage">Хранилище настроек.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnderlyingTrader">
      <summary>
            Реальный шлюз к торговой системе.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.IsHistoryEmulation">
      <summary>
            True, если тестирование производится на истории с помощью <see cref="T:StockSharp.Algo.Storages.DataFeedTrader" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.MarketEmulator">
      <summary>
            Эмулятор биржи.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.TransactionIdGenerator">
      <summary>
            Генератор идентификаторов транзакций.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewPortfolios">
      <summary>
            Событие появления новых портфелей.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.PortfoliosChanged">
      <summary>
            Событие изменения параметров портфелей.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewPositions">
      <summary>
            Событие появления новых позиций.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.PositionsChanged">
      <summary>
            Событие изменения параметров позиций.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewSecurities">
      <summary>
            Событие появления новых инструментов.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.SecuritiesChanged">
      <summary>
            Событие изменения параметров инструментов.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewTrades">
      <summary>
            Событие появления всех новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewMyTrades">
      <summary>
            Событие появления собственных новых сделок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewOrders">
      <summary>
            Событие появления новых заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.OrdersChanged">
      <summary>
            Событие изменения состояния заявок (снята, удовлетворена).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.OrdersRegisterFailed">
      <summary>
            Событие об ошибках, связанных с регистрацией заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.OrdersCancelFailed">
      <summary>
            Событие об ошибках, связанных со снятием заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewStopOrders">
      <summary>
            Событие появления новых стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.StopOrdersChanged">
      <summary>
            Событие появления новых стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.StopOrdersRegisterFailed">
      <summary>
            Событие об ошибках, связанных с регистрацией стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.StopOrdersCancelFailed">
      <summary>
            Событие об ошибках, связанных со снятием стоп-заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewMarketDepths">
      <summary>
            Событие появления новых стаканов с котировками.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.MarketDepthsChanged">
      <summary>
            Событие изменения стаканов с котировками.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewOrderLogItems">
      <summary>
            Событие появления новых записей в логе заявок.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Connected">
      <summary>
            Событие успешного подключения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Disconnected">
      <summary>
            Событие успешного отключения.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.ConnectionError">
      <summary>
            Событие ошибки подключения (например, соединения было разорвано).
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.NewDataExported">
      <summary>
            Событие, сигнализирующее о новых экспортируемых данных.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.ProcessDataError">
      <summary>
            Событие, сигнализирующее об ошибке при получении или обработке новых данных с сервера.
            </summary>
    </member>
    <member name="E:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.MarketTimeChanged">
      <summary>
            Событие, сигнализирующее об изменении текущего времени на биржевых площадках <see cref="P:StockSharp.BusinessEntities.ITrader.ExchangeBoards" />.
            Передается разница во времени, прошедшее с последнего вызова события. Первый раз событие передает значение <see cref="F:System.TimeSpan.Zero" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.DisplayName">
      <summary>
            Текстовое описание шлюза.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.ExchangeBoards">
      <summary>
            Список всех биржевых площадок, для которых загружены инструменты <see cref="P:StockSharp.BusinessEntities.ITrader.Securities" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Securities">
      <summary>
            Список всех загруженных инструментов.
            Вызывать необходимо после того, как пришло событие <see cref="E:StockSharp.BusinessEntities.ITrader.NewSecurities" />. Иначе будет возвращено постое множество.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Orders">
      <summary>
            Получить все заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.StopOrders">
      <summary>
            Получить все стоп-заявки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.OrderRegisterFails">
      <summary>
            Получить все ошибки при регистрации заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.OrderCancelFails">
      <summary>
            Получить все ошибки при снятии заявок.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Trades">
      <summary>
            Получить все сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.MyTrades">
      <summary>
            Получить все собственные сделки.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Portfolios">
      <summary>
            Получить все портфели.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.Positions">
      <summary>
            Получить все позиции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.IsConnected">
      <summary>
            Проверить соединение.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.IsExportStarted">
      <summary>
            Запущен ли экспорт. Экспорт запускается через метод <see cref="M:StockSharp.BusinessEntities.ITrader.StartExport" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.IsSupportAtomicReRegister">
      <summary>
            Поддерживается ли перерегистрация заявок через метод <see cref="M:StockSharp.BusinessEntities.ITrader.ReRegisterOrder(StockSharp.BusinessEntities.Order,StockSharp.BusinessEntities.Order)" />
            в виде одной транзакции.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisteredSecurities">
      <summary>
            Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.BusinessEntities.ITrader.RegisterSecurity(StockSharp.BusinessEntities.Security)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisteredMarketDepths">
      <summary>
            Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.BusinessEntities.ITrader.RegisterMarketDepth(StockSharp.BusinessEntities.Security)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisteredTrades">
      <summary>
            Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.BusinessEntities.ITrader.RegisterTrades(StockSharp.BusinessEntities.Security)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisteredOrderLogs">
      <summary>
            Список всех инструментов, зарегистрированных через <see cref="M:StockSharp.BusinessEntities.ITrader.RegisterOrderLog(StockSharp.BusinessEntities.Security)" />.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.RegisteredPortfolios">
      <summary>
            Список всех портфелей, зарегистрированных через <see cref="M:StockSharp.BusinessEntities.ITrader.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.RealTimeEmulationTrader">
      <summary>
            Тестовый шлюз, предназначенный для тестирования стратегии c реальном подключения к торговой системе через <see cref="P:StockSharp.Algo.Testing.RealTimeEmulationTrader`1.UnderlyingTrader" />,
            но без реального выставления заявок на бирже. Испонение заявок и их сделки эмулируются шлюзом, используя информацию по стаканам, приходящих от реального шлюза.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RealTimeEmulationTrader.#ctor(StockSharp.BusinessEntities.ITrader)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.RealTimeEmulationTrader" />.
            </summary>
      <param name="underlyingTrader">Реальный шлюз к торговой системе.</param>
    </member>
    <member name="T:StockSharp.Algo.Testing.EmulationDebug">
      <summary>
            Вспомогательный класс для программной остановки (и последующего возобновления) работы эмулятора.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationDebug.Get(StockSharp.Algo.Testing.RealTimeEmulationTrader{StockSharp.Algo.Storages.DataFeedTrader})">
      <summary>
            Получить <see cref="T:StockSharp.Algo.Testing.EmulationDebug" />.
            </summary>
      <param name="trader">Интерфейс шлюза-эмулятора биржи.</param>
      <returns>API для программной приостановки исполнения стратегии.</returns>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationDebug.Break">
      <summary>
            Приостановить исполнение эмулятора. Для возобновления необходимо вызвать <see cref="M:StockSharp.Algo.Testing.EmulationDebug.Resume" />.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationDebug.Resume">
      <summary>
            Возобновить исполнение эмулятора.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.EmulationDebug.DisposeManaged">
      <summary>
            Освободить занятые ресурсы.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationDebug.BreakOnNewMyTrade">
      <summary>
            Приостанавливать эмуляцию при возникновении собственной сделки. По умолчанию отключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationDebug.BreakOnNewOrder">
      <summary>
            Приостанавливать эмуляцию при регистрации новой заявки. По умолчанию отключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationDebug.BreakOnNewTrade">
      <summary>
            Приостановить эмуляцию на получении новой сделки. По умолчанию отключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.EmulationDebug.BreakOnNewDepth">
      <summary>
            Приостановить эмуляцию на получении нового стакана. По умолчанию отключено.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.TradeGenerator">
      <summary>
            Генератор тиковых сделок случайным методом.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.TradeGenerator.#ctor(StockSharp.BusinessEntities.Security)">
      <summary>
            Инициализировать <see cref="T:StockSharp.Algo.Testing.TradeGenerator" />.
            </summary>
      <param name="security">Инструмент, для которого необходимо генерировать данные.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.TradeGenerator.Generate(System.DateTime)">
      <summary>
            Сгенерировать случайную сделку.
            </summary>
      <param name="time">Время сделки.</param>
      <returns>Случайная сделка.</returns>
    </member>
    <member name="P:StockSharp.Algo.Testing.TradeGenerator.GenerateDirection">
      <summary>
            Генерировать значение для <see cref="P:StockSharp.BusinessEntities.Trade.OrderDirection" />. По-умолчанию отключено.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Testing.TradeGenerator.IdGenerator">
      <summary>
            Генератор номера сделки <see cref="P:StockSharp.BusinessEntities.Trade.Id" />.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.Testing.RandomWalkTradeGenerator">
      <summary>
            Генератор сделок на основе нормального распределения.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Testing.RandomWalkTradeGenerator.#ctor(StockSharp.BusinessEntities.Security,System.Decimal)">
      <summary>
            Создать <see cref="T:StockSharp.Algo.Testing.RandomWalkTradeGenerator" />.
            </summary>
      <param name="security">Инструмент, для которого необходимо генерировать данные.</param>
      <param name="startPrice">Цена, от которой начинается расчёт нормального распределения.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RandomWalkTradeGenerator.Generate(StockSharp.BusinessEntities.Trade,System.DateTime)">
      <summary>
            Сгенерировать маркет-данные.
            </summary>
      <param name="data">Маркет-данные.</param>
      <param name="time">Текущее время.</param>
    </member>
    <member name="M:StockSharp.Algo.Testing.RandomWalkTradeGenerator.Clone">
      <summary>
            Создать копию генератора.
            </summary>
      <returns>Копия.</returns>
    </member>
    <member name="T:StockSharp.Algo.ShrinkRules">
      <summary>
            Правила округления цены.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.ShrinkRules.Auto">
      <summary>
            Автоматически определять, к меньшему или большему значению округлять.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.ShrinkRules.Less">
      <summary>
            Округлять к меньшему значению.
            </summary>
    </member>
    <member name="F:StockSharp.Algo.ShrinkRules.More">
      <summary>
            Округлять к большему значению.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.TraderHelper">
      <summary>
            Вспомогательный класс для предоставления различной алгоритмической функциональности.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetMarketDepth(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить стакан котировок для заданного инструмента.
            </summary>
      <param name="security">Инструмент, по которому необходимо получить стакан.</param>
      <returns>Cтакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetFilteredQuotes(StockSharp.BusinessEntities.Security,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Получить отфильтрованный стакан инструмента от всех активных заявок.
            </summary>
      <param name="security">Инструмент, по которому необходимо получить стакан.</param>
      <param name="orders">Заявки, которые необходимо игнорировать.</param>
      <returns>Отфильтрованный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetFilteredQuotes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Получить отфильтрованный стакан от всех активных заявок.
            </summary>
      <param name="quotes">Исходный стакан, который необходимо отфильтровать.</param>
      <param name="orders">Заявки, которые необходимо игнорировать.</param>
      <returns>Отфильтрованный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetFilteredQuotes(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Отфильтровать стакан от собственных заявок.
            </summary>
      <param name="quotes">Исходный стакан, который необходимо отфильтровать.</param>
      <param name="ownOrders">Активные заявки по данному инструменту.</param>
      <param name="orders">Заявки, которые необходимо игнорировать.</param>
      <returns>Отфильтрованный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetMarketPrice(StockSharp.BusinessEntities.Security,StockSharp.BusinessEntities.OrderDirections)">
      <summary>
            Получить рыночную цену для инструмента.
            </summary>
      <param name="security">Инструмент, по которому вычисляется рыночная цена.</param>
      <param name="direction">Направление заявки.</param>
      <returns>Рыночная цена. Если по инструменту возможна регистрация заявок типа <see cref="F:StockSharp.BusinessEntities.OrderTypes.Market" />, будет возвращено 0.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetCurrentPrice(StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.BusinessEntities.OrderDirections},StockSharp.Algo.MarketPriceTypes,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Высчитать текущую цену по инструменту в зависимости от направления заявки.
            </summary>
      <param name="security">Инструмент, по которому вычисляется текущая цена.</param>
      <param name="direction">Направление заявки.</param>
      <param name="priceType">Тип рыночной цены.</param>
      <param name="orders">Заявки, которые необходимо игнорировать.</param>
      <returns>Текущая цена. Если информации в стакане недостаточно, будет возвращено 0.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetCurrentPrice(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.OrderDirections,StockSharp.Algo.MarketPriceTypes,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Высчитать текущую цену по стакану в зависимости от направления заявки.
            </summary>
      <remarks>Для корректной работы метода необходимо запустить экспорт стакана.</remarks>
      <param name="depth">Стакан, по которому нужно высчитать текущую цену.</param>
      <param name="direction">Направление заявки. Если это покупка, то будет использоваться
            значение <see cref="P:StockSharp.BusinessEntities.Security.BestAsk" />, иначе <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />.</param>
      <param name="priceType">Тип текущей цены.</param>
      <param name="orders">Заявки, которые необходимо игнорировать.</param>
      <returns>Текущая цена. Если информации в стакане недостаточно, будет возвращено 0.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetCurrentPrice(StockSharp.BusinessEntities.MarketDepthPair,StockSharp.BusinessEntities.OrderDirections,StockSharp.Algo.MarketPriceTypes)">
      <summary>
            Высчитать текущую цену по лучшей паре котировок в зависимости от направления заявки.
            </summary>
      <remarks>Для корректной работы метода необходимо запустить экспорт стакана.</remarks>
      <param name="bestPair">Лучшая пара котировок, по которой вычисляется текущая цена.</param>
      <param name="direction">Направление заявки. Если это покупка, то будет использоваться
            значение <see cref="P:StockSharp.BusinessEntities.Security.BestAsk" />, иначе <see cref="P:StockSharp.BusinessEntities.Security.BestBid" />.</param>
      <param name="priceType">Тип текущей цены.</param>
      <returns>Текущая цена. Если информации в стакане недостаточно, будет возвращено 0.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ApplyOffset(StockSharp.BusinessEntities.Unit,StockSharp.BusinessEntities.OrderDirections,StockSharp.BusinessEntities.Unit)">
      <summary>
            Применить для цены сдвиг в зависимости от направления <paramref name="direction" />.
            </summary>
      <param name="price">Цена.</param>
      <param name="direction">Направление заявки, котороые использует в качестве направления для сдвига (для покупки сдвиг прибавляется, для продажи - вычитается).</param>
      <param name="offset">Сдвиг цены.</param>
      <returns>Новая цена.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ShrinkPrice(StockSharp.BusinessEntities.Order,StockSharp.Algo.ShrinkRules)">
      <summary>
            Обрезать цену для заявки, чтобы она стала кратной минимальному шагу, а так же ограничить количество знаков после запятой.
            </summary>
      <param name="order">Заявка, для которой будет обрезана цена <see cref="P:StockSharp.BusinessEntities.Order.Price" />.</param>
      <param name="rule">Правило округления цены.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ShrinkPrice(StockSharp.BusinessEntities.Security,System.Decimal,StockSharp.Algo.ShrinkRules)">
      <summary>
            Обрезать цену, чтобы она стала кратной минимальному шагу, а так же ограничить количество знаков после запятой.
            </summary>
      <param name="security">Инструмент, из которого берется значения <see cref="P:StockSharp.BusinessEntities.Security.MinStepSize" /> и <see cref="P:StockSharp.BusinessEntities.Security.Decimals" />.</param>
      <param name="price">Цена, которую нужно сделать кратной.</param>
      <param name="rule">Правило округления цены.</param>
      <returns>Кратная цена.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPosition(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Получить позицию по Моей сделке.
            </summary>
      <param name="trade">Моя сделка, по которой рассчитывается позиция. При покупке объем сделки <see cref="P:StockSharp.BusinessEntities.Trade.Volume" />
            берется с положительным знаком, при продаже - с отрицательным.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPosition(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить позицию по заявке.
            </summary>
      <param name="order">Заявка, по которой рассчитывается позиция. При покупке позиция берется с положительным знаком, при продаже - с отрицательным.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPosition(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Получить позицию по портфелю.
            </summary>
      <param name="portfolio">Портфель, для которого необходимо получить позицию.</param>
      <returns>Позиция по портфелю.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPosition(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Получить позицию по Моим сделкам.
            </summary>
      <param name="trades">Мои сделки, по которым рассчитывается позиция через метод <see cref="M:StockSharp.Algo.TraderHelper.GetPosition(StockSharp.BusinessEntities.MyTrade)" />.</param>
      <returns>Позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetOrderVolume(StockSharp.BusinessEntities.Position)">
      <summary>
            Получить объем заявки, сопоставимый с размером позиции.
            </summary>
      <param name="position">Позиция по инструменту.</param>
      <returns>Объем заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Join(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})">
      <summary>
            Сгруппировать заявки по инструменту и портфелю.
            </summary>
      <remarks>Рекомендуется использовать для уменьшения транзакционных издержек.</remarks>
      <param name="orders">Исходные заявки.</param>
      <returns>Сгруппированные заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPnL(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Рассчитать прибыль-убыток на основе сделок.
            </summary>
      <param name="trades">Сделки, по которым необходимо рассчитывать прибыль-убыток.</param>
      <returns>Прибыль-убыток.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPnL(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Рассчитать прибыль-убыток для сделки.
            </summary>
      <param name="trade">Сделка, для которой необходимо рассчитывать прибыль-убыток.</param>
      <returns>Прибыль-убыток.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPnL(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Рассчитать прибыль-убыток на основе портфеля.
            </summary>
      <param name="portfolio">Портфель, для которого необходимо расcчитать прибыль-убыток.</param>
      <returns>Прибыль-убыток.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPrice(StockSharp.BusinessEntities.Position)">
      <summary>
            Рассчитать стоимость позиции.
            </summary>
      <param name="position">Позиция.</param>
      <returns>Стоимость позиции.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetPrice(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Рассчитать стоимость портфеля.
            </summary>
      <param name="portfolio">Портфель.</param>
      <returns>Стоимость портфеля.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetSlippage(StockSharp.BusinessEntities.MyTrade,System.Boolean)">
      <summary>
            Рассчитать проскальзывание по сделке. В качестве ожидаемой цены берется <see cref="P:StockSharp.BusinessEntities.Order.Price" />.
            </summary>
      <param name="trade">Моя сделка, для которой необходимо рассчитать проскальзывание.</param>
      <param name="calcNegative">Считать ли отрицательное проскальзывание. Если false, то отрицательное значение проскальзывания заменяется нулем.</param>
      <returns>Значение проскальзывания.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetSlippage(StockSharp.BusinessEntities.MyTrade,System.Decimal,System.Boolean)">
      <summary>
            Рассчитать проскальзывание по сделке.
            </summary>
      <param name="trade">Моя сделка, для которой необходимо рассчитать проскальзывание.</param>
      <param name="estimatedPrice">Ожидаемая цена заявки.</param>
      <param name="calcNegative">Считать ли отрицательное проскальзывание. Если false, то отрицательное значение проскальзывания заменяется нулем.</param>
      <returns>Значение проскальзывания.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(System.Collections.Generic.IEnumerable{Ecng.ComponentModel.Range{System.TimeSpan}},System.DateTime)">
      <summary>
            Проверить, является ли переданное время торгуемым (началась ли сессия, не закончилась ли, нет ти клиринга).
            </summary>
      <param name="timeBounds">Временные интервалы работы биржи. Например, для FORTS можно передавать значения 10:00-13:59, 14:03-18:49 и 19:00-23:49.</param>
      <param name="dateTime">Передаваемое время, которое нужно проверить.</param>
      <returns>True, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.BusinessEntities.Security,System.DateTime)">
      <summary>
            Проверить, является ли текущее время торгуемым (началась ли сессия, не закончилась ли, нет ти клиринга).
            </summary>
      <param name="security">Инструмент, хранящий информацию о бирже <see cref="P:StockSharp.BusinessEntities.Security.ExchangeBoard" />. Если она равна null, то инструмент торгуется
            круглосуточно. Иначе, информация передается в метод <see cref="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.BusinessEntities.ExchangeBoard,System.DateTime)" />.</param>
      <param name="dateTime">Передаваемое время, которое нужно проверить.</param>
      <returns>True, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.BusinessEntities.ExchangeBoard,StockSharp.BusinessEntities.ITrader)">
      <summary>
            Проверить, является ли текущее время торгуемым (началась ли сессия, не закончилась ли, нет ти клиринга).
            </summary>
      <param name="board">Информация о площадке, хранящая временные интервалы работы биржи <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.WorkingTime" />.</param>
      <param name="trader">Шлюз с торговой системой. В качестве текущего времени берется результат выполнения метода <see cref="M:StockSharp.BusinessEntities.ITrader.GetMarketTime(StockSharp.BusinessEntities.Exchange)" />.</param>
      <returns>True, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.BusinessEntities.ExchangeBoard,System.DateTime)">
      <summary>
            Проверить, является ли текущее время торгуемым (началась ли сессия, не закончилась ли, нет ти клиринга).
            </summary>
      <param name="board">Информация о площадке, хранящая временные интервалы работы биржи <see cref="P:StockSharp.BusinessEntities.ExchangeBoard.WorkingTime" />.
            Например, для FORTS будут значения 10:00-13:59, 14:03-18:49 и 19:00-23:49.</param>
      <param name="dateTime">Передаваемое время, которое нужно проверить.</param>
      <returns>True, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeTime(StockSharp.BusinessEntities.WorkingTime,System.DateTime)">
      <summary>
            Проверить, является ли время торгуемым (началась ли сессия, не закончилась ли, нет ли клиринга).
            </summary>
      <param name="workingTime">Информация о режиме работы биржи.</param>
      <param name="dateTime">Передаваемое время, которое нужно проверить.</param>
      <returns>True, если торгуемое время, иначе, неторгуемое.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsTradeDate(StockSharp.BusinessEntities.WorkingTime,System.DateTime,System.Boolean)">
      <summary>
            Проверить, является ли дата торгуемой.
            </summary>
      <param name="workingTime">Информация о режиме работы биржи.</param>
      <param name="date">Передаваемая дата, которую необходимо проверить.</param>
      <param name="checkHolidays">Проверять ли переданную дату на день недели (суббота и воскресенье являются выходными и для них будет возвращено false).</param>
      <returns>True, если торгуемая дата, иначе, неторгуемая.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ApplyDefaultHolidays(StockSharp.BusinessEntities.ExchangeBoard,System.DateTime,System.DateTime)">
      <summary>
            Заполнить <see cref="P:StockSharp.BusinessEntities.WorkingTime.SpecialHolidays" /> праздниками по-умолчанию.
            </summary>
      <param name="board">Площадка.</param>
      <param name="startYear">Начальный год.</param>
      <param name="endYear">Конечный год.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetMarketTime(StockSharp.BusinessEntities.Security)">
      <summary>
            Получить биржевое время.
            </summary>
      <param name="security">Инструмент, из которого будет взята информация о бирже <see cref="P:StockSharp.BusinessEntities.Security.ExchangeBoard" />.</param>
      <returns>Биржевое время.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ReRegisterClone(StockSharp.BusinessEntities.Order,System.Decimal)">
      <summary>
            Создать копию заявки для перерегистрации с новым объемом, равным <see cref="P:StockSharp.BusinessEntities.Order.Balance" /> заявки <paramref name="oldOrder" />.
            </summary>
      <param name="oldOrder">Оригинальная заявка.</param>
      <param name="newPrice">Цена новой заявки.</param>
      <returns>Новая заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ReRegisterClone(StockSharp.BusinessEntities.Order,System.Decimal,System.Decimal)">
      <summary>
            Создать копию заявки для перерегистрации.
            </summary>
      <param name="oldOrder">Оригинальная заявка.</param>
      <param name="newPrice">Цена новой заявки.</param>
      <param name="newVolume">Объем новой заявки.</param>
      <returns>Новая заявка.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Convert(StockSharp.BusinessEntities.Currency,StockSharp.BusinessEntities.CurrencyTypes)">
      <summary>
            Сконвертировать одну валюту в другую.
            </summary>
      <param name="currencyFrom">Валюта, из которой нужно произвести конвертацию.</param>
      <param name="currencyTypeTo">Код валюты, в которую нужно произвести конвертацию.</param>
      <returns>Сконвертированная валюта.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Convert(StockSharp.BusinessEntities.CurrencyTypes,StockSharp.BusinessEntities.CurrencyTypes)">
      <summary>
            Получить курс конвертации одной валюту в другую.
            </summary>
      <param name="from">Код валюты, из которой нужно произвести конвертацию.</param>
      <param name="to">Код валюты, в которую нужно произвести конвертацию.</param>
      <returns>Курс.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Convert(StockSharp.BusinessEntities.CurrencyTypes,StockSharp.BusinessEntities.CurrencyTypes,System.DateTime)">
      <summary>
            Получить курс конвертации одной валюту в другую на определенную дату.
            </summary>
      <param name="from">Код валюты, из которой нужно произвести конвертацию.</param>
      <param name="to">Код валюты, в которую нужно произвести конвертацию.</param>
      <param name="date">Дата курса.</param>
      <returns>Курс.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Sparse(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Создать из обычного стакана разреженный с минимальным шагом цены равный <see cref="P:StockSharp.BusinessEntities.Security.MinStepSize" />.
            <remarks>
            В разреженном стакане показаны котировки на те цены, по которым не выставлены заявки. Объем таких котировок равен 0.
            </remarks></summary>
      <param name="depth">Обычный стакан.</param>
      <returns>Разреженный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Sparse(StockSharp.BusinessEntities.MarketDepth,System.Decimal)">
      <summary>
            Создать из обычного стакана разреженный.
            <remarks>
            В разреженном стакане показаны котировки на те цены, по которым не выставлены заявки. Объем таких котировок равен 0.
            </remarks></summary>
      <param name="depth">Обычный стакан.</param>
      <param name="minStepSize">Минимальный шаг цены.</param>
      <returns>Разреженный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Sparse(StockSharp.BusinessEntities.MarketDepthPair,System.Decimal)">
      <summary>
            Создать из пары котировок разреженную коллекцию котировок, которая будет входить в диапазон между парой.
            <remarks>
            В разреженной коллекции показаны котировки на те цены, по которым не выставлены заявки. Объем таких котировок равен 0.
            </remarks></summary>
      <param name="pair">Пара обычных котировок.</param>
      <param name="minStepSize">Минимальный шаг цены.</param>
      <returns>Разреженная коллекция котировок.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Sparse(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},System.Decimal)">
      <summary>
            Создать из обычных котировок разреженную коллекцию котировок.
            <remarks>
            В разреженной коллекции показаны котировки на те цены, по которым не выставлены заявки. Объем таких котировок равен 0.
            </remarks></summary>
      <param name="quotes">Обычные котировки. Коллекция должна содержать одинаково направленные котировки (только биды или только оффера).</param>
      <param name="minStepSize">Минимальный шаг цены.</param>
      <returns>Разреженная коллекция котировок.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Join(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Объединить первоначальный стакан, и его разреженное представление.
            </summary>
      <param name="original">Первоначальный стакан.</param>
      <param name="rare">Разреженный стакан.</param>
      <returns>Объединенный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Group(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)">
      <summary>
            Сгруппировать стакан по ценовому диапазону.
            </summary>
      <param name="depth">Стакан, который необходимо сгруппировать.</param>
      <param name="priceRange">Ценовой диапазон, по которому необходимо произвести группировку.</param>
      <returns>Сгруппированный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.UnGroup(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Разгруппировать стакан, сгруппированный через метод <see cref="M:StockSharp.Algo.TraderHelper.Group(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Unit)" />.
            </summary>
      <param name="depth">Сгруппированный стакан.</param>
      <returns>Разгруппированный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.EmulateTrades(StockSharp.BusinessEntities.MarketDepth,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade})">
      <summary>
            Удалить в стакане те уровни, которые должны исчезнуть в случае появления сделок <paramref name="trades" />.
            </summary>
      <param name="depth">Стакан, который необходимо очистить.</param>
      <param name="trades">Сделки.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Group(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},StockSharp.BusinessEntities.Unit)">
      <summary>
            Сгруппировать котировки по ценовому диапазону.
            </summary>
      <param name="quotes">Котировки, которые необходимо сгруппировать.</param>
      <param name="priceRange">Ценовой диапазон, по которому необходимо произвести группировку.</param>
      <returns>Сгруппированные котировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetDelta(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Вычислить изменение между стаканами.
            </summary>
      <param name="from">Первый стакан.</param>
      <param name="to">Второй стакан.</param>
      <returns>Стакан, хранищий только изменения.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetDelta(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote})">
      <summary>
            Вычислить изменение между котировками.
            </summary>
      <param name="from">Первые котировки.</param>
      <param name="to">Вторые котировки.</param>
      <returns>Изменения.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetDiff(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Вычислить приращение между стаканами.
            </summary>
      <param name="from">Первый стакан.</param>
      <param name="to">Второй стакан.</param>
      <returns>Стакан, хранищий только приращения.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetDiff(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Quote})">
      <summary>
            Вычислить приращение между котировками. 
            </summary>
      <param name="from">Первые котировки.</param>
      <param name="to">Вторые котировки.</param>
      <returns>Изменения.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.AddDelta(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Прибавить изменение к первому стакану.
            </summary>
      <param name="from">Первый стакан.</param>
      <param name="delta">Изменение.</param>
      <returns>Измененный стакан.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.AddDelta(StockSharp.BusinessEntities.Quote[],StockSharp.BusinessEntities.Quote[],System.Boolean)">
      <summary>
            Прибавить изменение к котировки.
            </summary>
      <param name="from">Котировки.</param>
      <param name="delta">Изменения.</param>
      <param name="isBids">Признак направления котировок.</param>
      <returns>Измененные котировки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsCanceled(StockSharp.BusinessEntities.Order)">
      <summary>
            Проверить, отменена ли заявка.
            </summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>True, если заявка отменена, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsMatched(StockSharp.BusinessEntities.Order)">
      <summary>
            Проверить, исполнена ли полностью заявка.
            </summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>True, если заявка полностью исполнена, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsMatchedPartially(StockSharp.BusinessEntities.Order)">
      <summary>
            Проверить, реализована ли часть объема в заявке.
            </summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>True, если часть объема реализована, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsMatchedEmpty(StockSharp.BusinessEntities.Order)">
      <summary>
            Проверить, что не реализован ни один контракт в заявке.
            </summary>
      <param name="order">Заявка, которую необходимо проверить.</param>
      <returns>True, если ни один контракт не реализована, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetTrades(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить сделки заявки.
            </summary>
      <param name="order">Заявки.</param>
      <returns>Сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetMatchedVolume(StockSharp.BusinessEntities.Order,System.Boolean)">
      <summary>
            Расcчитать реализованную часть объема для заявки.
            </summary>
      <param name="order">Заявка, для которой необходимо расcчитать реализованную часть объема.</param>
      <param name="byOrder">Проверять реализованный объем по балансу заявке (<see cref="P:StockSharp.BusinessEntities.Order.Balance" />) или по полученным сделкам.
            По-умолчанию проверяется по заявке.</param>
      <returns>Реализованная часть объема.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetAveragePrice(StockSharp.BusinessEntities.Order)">
      <summary>
            Получить средневзрешанную цену исполнения заявки.
            </summary>
      <param name="order">Заявка, для которой необходимо получить средневзрешанную цену исполнения.</param>
      <returns>Средневзвешанная цена. Если заявка не существует ни одной сделки, то возвращается 0.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetAveragePrice(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade})">
      <summary>
            Получить средневзрешанную цену исполнения по собственным сделкам.
            </summary>
      <param name="trades">Сделки, для которых необходимо получить средневзрешанную цену исполнения.</param>
      <returns>Средневзвешанная цена. Если сделки отсутствуют, то возвращается 0.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetAveragePrice(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade})">
      <summary>
            Получить средневзрешанную цену исполнения по тиковым сделкам.
            </summary>
      <param name="trades">Сделки, для которых необходимо получить средневзрешанную цену исполнения.</param>
      <returns>Средневзвешанная цена. Если сделки отсутствуют, то возвращается 0.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetTheoreticalTrades(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.Order)">
      <summary>
            Получить вероятные сделки по стакану для заданной заявки.
            </summary>
      <param name="depth">Стакан, который в момент вызова функции отражает ситуацию на рынке.</param>
      <param name="order">Заявку, для которой необходимо расcчитать вероятные сделки.</param>
      <returns>Вероятные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetTheoreticalTrades(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.OrderDirections,System.Decimal)">
      <summary>
            Получить вероятные сделки по стакану для рыночной цены и заданного объема.
            </summary>
      <param name="depth">Стакан, который в момент вызова функции отражает ситуацию на рынке.</param>
      <param name="orderDirection">Направление заявки.</param>
      <param name="volume">Объем, который предполагается реализовать.</param>
      <returns>Вероятные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetTheoreticalTrades(StockSharp.BusinessEntities.MarketDepth,StockSharp.BusinessEntities.OrderDirections,System.Decimal,System.Decimal)">
      <summary>
            Получить вероятные сделки по стакану для заданных цены и объема.
            </summary>
      <param name="depth">Стакан, который в момент вызова функции отражает ситуацию на рынке.</param>
      <param name="orderDirection">Направление заявки.</param>
      <param name="volume">Объем, который предполагается реализовать.</param>
      <param name="price">Цена, по которой предполагает выставить заявку. Если она равна 0, то будет рассматриваться вариант рыночной заявки.</param>
      <returns>Вероятные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Invert(StockSharp.BusinessEntities.OrderDirections)">
      <summary>
            Поменять направление заявки на противоположное.
            </summary>
      <param name="direction">Первоначальное направление.</param>
      <returns>Противоположное направление.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetDirection(StockSharp.BusinessEntities.Position)">
      <summary>
            Получить направление заявки для позиции.
            </summary>
      <remarks>
            Положительное значение равно <see cref="F:StockSharp.BusinessEntities.OrderDirections.Buy" />, отрицательное - <see cref="F:StockSharp.BusinessEntities.OrderDirections.Sell" />, нулевое - null.
            </remarks>
      <param name="position">Значение позиции.</param>
      <returns>Направление заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetDirection(System.Decimal)">
      <summary>
            Получить направление заявки для позиции.
            </summary>
      <remarks>
            Положительное значение равно <see cref="F:StockSharp.BusinessEntities.OrderDirections.Buy" />, отрицательное - <see cref="F:StockSharp.BusinessEntities.OrderDirections.Sell" />, нулевое - null.
            </remarks>
      <param name="position">Значение позиции.</param>
      <returns>Направление заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.CancelOrders(StockSharp.BusinessEntities.ITrader,System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},System.Nullable{System.Boolean},StockSharp.BusinessEntities.Portfolio,System.Nullable{StockSharp.BusinessEntities.OrderDirections},System.String,StockSharp.BusinessEntities.Security)">
      <summary>
            Отменить группу заявок на бирже по фильтру.
            </summary>
      <param name="trader">Шлюз взаимодействия с торговыми системами.</param>
      <param name="orders">Группа заявок, из которой необходимо найти требуемые заявки и отменить их.</param>
      <param name="isStopOrder">True, если нужно отменить только стоп-заявки, false - если только обычный и null - если оба типа.</param>
      <param name="portfolio">Портфель. Если значение равно null, то портфель не попадает в фильтр снятия заявок.</param>
      <param name="direction">Направление заявки. Если значение равно null, то направление не попадает в фильтр снятия заявок.</param>
      <param name="classCode">Код класса. Если переданная строка пустая, то код не попадает в фильтр снятия заявок.</param>
      <param name="security">Инструмент. Если значение равно null, то инструмент не попадает в фильтр снятия заявок.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.BusinessEntities.Security)">
      <summary>
            Отфильтровать заявки для заданного инструмента.
            </summary>
      <param name="orders">Все заявки, в которых необходимо искать требуемые.</param>
      <param name="security">Инструмент, для которого нужно отфильтровать заявки.</param>
      <returns>Отфильтрованные заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Отфильтровать заявки для заданного портфеля.
            </summary>
      <param name="orders">Все заявки, в которых необходимо искать требуемые.</param>
      <param name="portfolio">Портфель, для которого нужно отфильтровать заявки.</param>
      <returns>Отфильтрованные заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.BusinessEntities.OrderStates)">
      <summary>
            Отфильтровать заявки для заданного состояния.
            </summary>
      <param name="orders">Все заявки, в которых необходимо искать требуемые.</param>
      <param name="state">Состояние заявки.</param>
      <returns>Отфильтрованные заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.BusinessEntities.OrderDirections)">
      <summary>
            Отфильтровать заявки для заданного направления.
            </summary>
      <param name="orders">Все заявки, в которых необходимо искать требуемые.</param>
      <param name="direction">Направление заявки.</param>
      <returns>Отфильтрованные заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade},StockSharp.BusinessEntities.Security)">
      <summary>
            Отфильтровать сделки для заданного инструмента.
            </summary>
      <param name="trades">Все сделки, в которых необходимо искать требуемые.</param>
      <param name="security">Инструмент, для которого нужно отфильтровать сделки.</param>
      <returns>Отфильтрованные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Trade},System.DateTime,System.DateTime)">
      <summary>
            Отфильтровать сделки для заданного временного периода.
            </summary>
      <param name="trades">Все сделки, в которых необходимо искать требуемые.</param>
      <param name="from">Дата, с которой нужно искать сделки.</param>
      <param name="to">Дата, до которой нужно искать сделки.</param>
      <returns>Отфильтрованные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position},StockSharp.BusinessEntities.Security)">
      <summary>
            Отфильтровать позиции для заданного инструмента.
            </summary>
      <param name="positions">Все позиции, в которых необходимо искать требуемые.</param>
      <param name="security">Инструмент, для которого нужно отфильтровать позиции.</param>
      <returns>Отфильтрованные позиции.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Position},StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Отфильтровать позиции для заданного портфеля.
            </summary>
      <param name="positions">Все позиции, в которых необходимо искать требуемые.</param>
      <param name="portfolio">Портфель, для которого нужно отфильтровать позиции.</param>
      <returns>Отфильтрованные позиции.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade},StockSharp.BusinessEntities.Security)">
      <summary>
            Отфильтровать собственные сделки для заданного инструмента.
            </summary>
      <param name="myTrades">Все собственные сделки, в которых необходимо искать требуемые.</param>
      <param name="security">Инструмент, по которому нужно найти сделки.</param>
      <returns>Отфильтрованные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade},StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Отфильтровать собственные сделки для заданного портфеля.
            </summary>
      <param name="myTrades">Все собственные сделки, в которых необходимо искать требуемые.</param>
      <param name="portfolio">Портфель, для которого нужно отфильтровать сделки.</param>
      <returns>Отфильтрованные сделки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.Filter(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.MyTrade},StockSharp.BusinessEntities.Order)">
      <summary>
            Отфильтровать собственные сделки для заданной заявки.
            </summary>
      <param name="myTrades">Все собственные сделки, в которых необходимо искать требуемые.</param>
      <param name="order">Заявка, для которой нужно отфильтровать сделки.</param>
      <returns>Отфильтрованные заявки.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsFullEmpty(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Определить, является ли стакан пустым.
            </summary>
      <param name="depth">Стакан.</param>
      <returns>True, если стакан пустой, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.IsHalfEmpty(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Определить, является ли стакан пустым на половину.
            </summary>
      <param name="depth">Стакан.</param>
      <returns>True, если стакан пустой на половину, иначе, false.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetTPlusNDate(StockSharp.BusinessEntities.WorkingTime,System.DateTime,System.Int32)">
      <summary>
            Получить T+N дату.
            </summary>
      <param name="time">Информация о режиме работы биржи.</param>
      <param name="date">Начальная дата T.</param>
      <param name="n">Размер N.</param>
      <returns>Конечная дата T+N.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ToExchangeTime(StockSharp.BusinessEntities.Exchange,System.DateTime)">
      <summary>
            Перевести локальное время в биржевое.
            </summary>
      <param name="exchange">Информация о бирже.</param>
      <param name="time">Локальное время.</param>
      <returns>Время с биржевым сдвигом.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ToExchangeTime(StockSharp.BusinessEntities.Exchange,System.DateTime,System.TimeZoneInfo)">
      <summary>
            Перевести локальное время в биржевое.
            </summary>
      <param name="exchange">Информация о бирже.</param>
      <param name="time">Локальное время.</param>
      <param name="sourceZone">Времемнная зона, в которой записано значение <paramref name="time" />.</param>
      <returns>Время с биржевым сдвигом.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ToLocalTime(StockSharp.BusinessEntities.Exchange,System.DateTime)">
      <summary>
            Перевести биржевое время в локальное.
            </summary>
      <param name="exchange">Информация о бирже, из которой будет использоваться <see cref="P:StockSharp.BusinessEntities.Exchange.TimeZoneInfo" />.</param>
      <param name="exchangeTime">Биржевое время.</param>
      <returns>Локальное время.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ToUtc(StockSharp.BusinessEntities.Exchange,System.DateTime)">
      <summary>
            Перевести биржевое время в UTC.
            </summary>
      <param name="exchange">Информация о бирже, из которой будет использоваться <see cref="P:StockSharp.BusinessEntities.Exchange.TimeZoneInfo" />.</param>
      <param name="exchangeTime">Биржевое время.</param>
      <returns>Биржевое время в UTC.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.InitLatency(StockSharp.BusinessEntities.MarketDepth)">
      <summary>
            Инициализировать <see cref="P:StockSharp.BusinessEntities.MarketDepth.Latency" />. Задержка равна разнице между <see cref="P:StockSharp.BusinessEntities.MarketDepth.LastChangeTime" /> и <see cref="P:StockSharp.Logging.LoggingHelper.Now" />.
            </summary>
      <param name="depth">Стакан.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.InitLatency(StockSharp.BusinessEntities.Trade)">
      <summary>
            Инициализировать <see cref="P:StockSharp.BusinessEntities.Trade.Latency" />. Задержка равна разнице между <see cref="P:StockSharp.BusinessEntities.Trade.Time" /> и <see cref="P:StockSharp.Logging.LoggingHelper.Now" />.
            </summary>
      <param name="trade">Тиковая сделка.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.InitLatency(StockSharp.BusinessEntities.MyTrade)">
      <summary>
            Инициализировать <see cref="P:StockSharp.BusinessEntities.MyTrade.Latency" />. Задержка равна разнице между <see cref="P:StockSharp.BusinessEntities.Trade.Time" /> и <see cref="P:StockSharp.Logging.LoggingHelper.Now" />.
            </summary>
      <param name="trade">Собственная сделка.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetLatency(System.DateTime,System.DateTime,StockSharp.BusinessEntities.Exchange)">
      <summary>
            Рассчитать задержку.
            </summary>
      <param name="now">Текущее время.</param>
      <param name="time">Биржевое время.</param>
      <param name="exchange">Информация о бирже.</param>
      <returns>Задержка.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetMarginPrice(StockSharp.BusinessEntities.Security,System.Nullable{StockSharp.BusinessEntities.OrderDirections})">
      <summary>
            Получить цену, которую необходимо оплатить для совершения торговой операции.
            </summary>
      <param name="security">Инструмент.</param>
      <param name="direction">Направление торговой операции.</param>
      <returns>Цена.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetFreeMoney(StockSharp.BusinessEntities.Portfolio,System.Boolean)">
      <summary>
            Получить размер свободных денежных средств в портфеле.
            </summary>
      <param name="portfolio">Портфель</param>
      <param name="useLeverage">Использовать ли для рассчета размер плеча.</param>
      <returns>Размер свободных денежных средств.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.GetFortsJumps(StockSharp.Algo.ContinuousSecurity,System.String,System.DateTime,System.DateTime,System.Boolean)">
      <summary>
            Получить для непрерывного инструмента реальные экспирирующиеся инструменты.
            </summary>
      <param name="continuousSecurity">Непрерывный инструмент.</param>
      <param name="baseCode">Базовая часть кода инструмента.</param>
      <param name="from">Начало диапазона экспираций.</param>
      <param name="to">Окончание диапазона экспираций.</param>
      <param name="throwIfNotExists">Сгенерировать исключение, если какой-либо из инструментов для переданного <paramref name="continuousSecurity" /> отсутствует.</param>
      <returns>Экспирирующиеся инструменты.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.FillFortsJumps(StockSharp.Algo.ContinuousSecurity,System.String,System.DateTime,System.DateTime)">
      <summary>
            Заполнить переходы <see cref="P:StockSharp.Algo.ContinuousSecurity.ExpirationJumps" />.
            </summary>
      <param name="continuousSecurity">Непрерывный инструмент.</param>
      <param name="baseCode">Базовая часть кода инструмента.</param>
      <param name="from">Начало диапазона экспираций.</param>
      <param name="to">Окончание диапазона экспираций.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ToCashPosition(StockSharp.BusinessEntities.Portfolio)">
      <summary>
            Сконвертировать портфель в денежную позицию.
            </summary>
      <param name="portfolio">Портфель с торговым счетом.</param>
      <returns>Денежная позиция.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.ToPositionManager(StockSharp.BusinessEntities.Position)">
      <summary>
            Сконвертировать позицию в объект типа <see cref="T:StockSharp.Algo.Positions.IPositionManager" />.
            </summary>
      <param name="position">Позиция.</param>
      <returns>Менеджера расчета позиции.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.EmulateOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order},StockSharp.Algo.Storages.IStorageRegistry,System.Collections.Generic.IDictionary{StockSharp.BusinessEntities.Security,System.Decimal})">
      <summary>
            Сэмулировать заявки на истории.
            </summary>
      <param name="orders">Заявки, которые необходимо сэмулировать на истории.</param>
      <param name="storageRegistry">Внешнеее хранилище для доступа к исторических данным.</param>
      <param name="openedPositions">Сделки, описывающие начальные открытые позиции.</param>
      <returns>Виртуальная стратегии, содержащая в себе ход эмуляционных торгов.</returns>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.AddOrderInfoLog(StockSharp.Logging.ILogReceiver,StockSharp.BusinessEntities.Order,System.String,System.Func{System.String})">
      <summary>
            Записать сообщение о заявке в лог.
            </summary>
      <param name="receiver">Получатель логов.</param>
      <param name="order">Заявка.</param>
      <param name="operation">Операция, которая проводится в заявокй.</param>
      <param name="getAdditionalInfo">Дополнительная информация о заявке.</param>
    </member>
    <member name="M:StockSharp.Algo.TraderHelper.AddOrderErrorLog(StockSharp.Logging.ILogReceiver,StockSharp.BusinessEntities.Order,System.String,System.Func{System.String})">
      <summary>
            Записать ошибку о заявке в лог.
            </summary>
      <param name="receiver">Получатель логов.</param>
      <param name="order">Заявка.</param>
      <param name="operation">Операция, которая проводится в заявокй.</param>
      <param name="getAdditionalInfo">Дополнительная информация о заявке.</param>
    </member>
    <member name="T:StockSharp.Algo.TransactionIdGenerator">
      <summary>
            Базовый генератор идентификаторов транзакций.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.TransactionIdGenerator.GetNextId">
      <summary>
            Получить следующий номер идентификатора транзакции.
            </summary>
      <returns>Следующий номер идентификатора транзакции.</returns>
    </member>
    <member name="T:StockSharp.Algo.IncrementTransactionIdGenerator">
      <summary>
            Генератор идентификаторов транзакций, основанный на автоматическом увеличении <see cref="P:StockSharp.Algo.IncrementTransactionIdGenerator.CurrentTransactionId" /> на 1.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.IncrementTransactionIdGenerator.#ctor">
      <summary>
            Создать генератор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.IncrementTransactionIdGenerator.GetNextId">
      <summary>
            Получить следующий номер идентификатора транзакции.
            </summary>
      <returns>Следующий номер идентификатора транзакции.</returns>
    </member>
    <member name="P:StockSharp.Algo.IncrementTransactionIdGenerator.CurrentTransactionId">
      <summary>
            Номер текущей транзакции. Первоначальное значение равно количество миллисекунд, прошедшее с начала дня.
            </summary>
    </member>
    <member name="T:StockSharp.Algo.MillisecondTransactionIdGenerator">
      <summary>
            Генератор идентификаторов транзакций, основанный на миллисекундах. Каждый следующий вызов метода <see cref="M:StockSharp.Algo.MillisecondTransactionIdGenerator.GetNextId" />
            будет возвращать количество миллисекунд, прошедшее с начала создания генератора.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.MillisecondTransactionIdGenerator.#ctor">
      <summary>
            Создать генератор.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.MillisecondTransactionIdGenerator.GetNextId">
      <summary>
            Получить следующий номер идентификатора транзакции.
            </summary>
      <returns>Следующий номер идентификатора транзакции.</returns>
    </member>
    <member name="T:StockSharp.Algo.Reporting.XmlStrategyReport">
      <summary>
            Генератор отчета для стратегии в формате Xml.
            </summary>
    </member>
    <member name="M:StockSharp.Algo.Reporting.XmlStrategyReport.#ctor(StockSharp.Algo.Strategies.Strategy,System.String)">
      <summary>
            Создать генератор Xml отчетов.
            </summary>
      <param name="strategy">Стратегия, для которой необходимо сгенерировать отчет.</param>
      <param name="fileName">Название файла, в котором сгенерируется отчет в формате Xml.</param>
    </member>
    <member name="M:StockSharp.Algo.Reporting.XmlStrategyReport.Generate">
      <summary>
            Сгенерировать отчет в формате Xml.
            </summary>
    </member>
    <member name="P:StockSharp.Algo.Reporting.XmlStrategyReport.FileName">
      <summary>
            Название файла, в котором сгенерируется отчет в формате Xml.
            </summary>
    </member>
  </members>
</doc>